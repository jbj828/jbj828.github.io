<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Developer Javit</title>
  
  <subtitle>Slowly and Steadily</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jbj828.github.io/"/>
  <updated>2020-03-08T13:27:18.045Z</updated>
  <id>http://jbj828.github.io/</id>
  
  <author>
    <name>Jay Chung</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Goal of 2020</title>
    <link href="http://jbj828.github.io/2020/03/08/self-Goal/"/>
    <id>http://jbj828.github.io/2020/03/08/self-Goal/</id>
    <published>2020-03-08T06:46:25.000Z</published>
    <updated>2020-03-08T13:27:18.045Z</updated>
    
    <content type="html"><![CDATA[<p>Goal of 2020</p><a id="more"></a><h3 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h3><p> <em><strong>프로그래밍은 노는 것이다. 스케쥴 짜서 공부할 필요 없다.</strong></em></p><h3 id="2020-Goal"><a href="#2020-Goal" class="headerlink" title="2020 Goal"></a>2020 Goal</h3><ol><li><strong>프로젝트 한 달 한 개 만들기</strong>(대단한거 만들 필요없다. 목표한 기능만 있는 것 만들기)</li><li><strong>한 달 책 한 권</strong>(인터넷 강의여도 됨, 즉 지식을 쌓는 데 한 달에 한 개)</li></ol><h4 id="프로젝트"><a href="#프로젝트" class="headerlink" title="프로젝트"></a>프로젝트</h4><ul><li>프로젝트에 필요한 지식들은 공부하면서 천천히 쌓기!</li><li>ex) Docker, AWS, Linux 등등</li></ul><h3 id="달-별-공부-목표"><a href="#달-별-공부-목표" class="headerlink" title="달 별 공부 목표"></a>달 별 공부 목표</h3><ul><li>3월 : NodeJS, HTTP 책 읽기</li><li>4월 : 데이터 구조 및 알고리즘(강의), IT인프라 책</li><li>5월 : 운영체제</li><li>6월 : 네트워크</li><li>7월 : 테스트 주도 개발 - 켄트벡 (저) 김창준 (역)</li><li>8월 : 리팩토링 - 파틴 파울러(저) 김지원 (역)</li><li>9월 : 디자인패턴</li><li>10월: </li><li>11월:</li><li>12월:</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Goal of 2020&lt;/p&gt;
    
    </summary>
    
    
      <category term="Goal" scheme="http://jbj828.github.io/categories/Goal/"/>
    
    
      <category term="Goal" scheme="http://jbj828.github.io/tags/Goal/"/>
    
  </entry>
  
  <entry>
    <title>Install NodeJS on Ubuntu Server</title>
    <link href="http://jbj828.github.io/2020/03/06/AWS-Install-NodeJS/"/>
    <id>http://jbj828.github.io/2020/03/06/AWS-Install-NodeJS/</id>
    <published>2020-03-06T04:46:25.000Z</published>
    <updated>2020-03-06T03:12:27.588Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu Server에 NodeJS 실습환경 구축</p><a id="more"></a><h3 id="NodeJS-설치"><a href="#NodeJS-설치" class="headerlink" title="NodeJS 설치"></a>NodeJS 설치</h3><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><p>참고 : <a href="https://github.com/nodesource/distributions/blob/master/README.md" target="_blank" rel="noopener">NodeSource</a></p><p>PPA를 통하여 최신 버전을 가져온다</p><p><code>curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -</code></p><p>우분투에 NodeJS를 설치<br><code>sudo apt-get install -y nodejs</code></p><p>NodeJS와 NPM이 잘 깔렸는지 확인<br><code>node -v</code><br><code>npm -v</code></p><p>NPM이 제 기능을 하게 하기 위해 다음 명령어 실행(이거 없으면 npm install 시 에러 날 확률이 높다)<br><code>sudo apt-get install build-essential</code></p><h4 id="NodeJS-Application-생성"><a href="#NodeJS-Application-생성" class="headerlink" title="NodeJS Application 생성"></a>NodeJS Application 생성</h4><p><code>cd /{디렉토리 이름a}</code><br><code>ls -al</code></p><p><code>sudo mkdir {디렉토리 이름b}</code><br><code>cd {디렉토리 이름b}</code></p><p><code>sudo chown ubuntu .</code> : 오너를 ubuntu로 바꾼다</p><br><p><strong>디렉토리에 웹 애플리케이션 생성</strong></p><p><code>npm init</code><br><code>ls -al</code></p><p><strong>ExpressJS 프레임웍 설치</strong></p><p><code>npm install express</code><br><code>ls -al</code><br><code>ls -al node_modules/</code></p><p><strong>웹 애플리케이션 구동</strong></p><p><code>vi app.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var express &#x3D; requier(&#39;express&#39;)</span><br><span class="line">var app &#x3D; express();</span><br><span class="line">app.get(&#39;&#x2F;&#39;, function(req, res)&#123;</span><br><span class="line">      res.send(&#39;Hello World&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(80, function()&#123;</span><br><span class="line">      console.log(&#39;Connected 80&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>sudo node app.js</code></p><p><code>{IP번호}:80</code> 을 브라우저 주소에 입력</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu Server에 NodeJS 실습환경 구축&lt;/p&gt;
    
    </summary>
    
    
      <category term="AWS" scheme="http://jbj828.github.io/categories/AWS/"/>
    
    
      <category term="AWS" scheme="http://jbj828.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>The method of Controlling AWS</title>
    <link href="http://jbj828.github.io/2020/03/06/AWS-ControlAWS/"/>
    <id>http://jbj828.github.io/2020/03/06/AWS-ControlAWS/</id>
    <published>2020-03-06T02:46:25.000Z</published>
    <updated>2020-03-06T02:40:59.877Z</updated>
    
    <content type="html"><![CDATA[<p>AWS를 제어하는 방법들</p><a id="more"></a><h3 id="Management-Console"><a href="#Management-Console" class="headerlink" title="Management Console"></a>Management Console</h3><ul><li>EC2를 생성하고 삭제하고 목록을 열람하는 기능을 제공</li><li>이러한 방식을 GUI(Graphical User Interface)라고 한다.</li></ul><h3 id="CLI-Command-Line-Interface"><a href="#CLI-Command-Line-Interface" class="headerlink" title="CLI(Command Line Interface)"></a>CLI(Command Line Interface)</h3><ul><li>명령어를 입력하여 컴퓨터를 제어하는 방식</li><li><code>aws ec2 describe-instances</code>  : Management Console에 나온 내용과 동일한 내용이 텍스트 형식으로 콘솔에 나타난다.</li><li>익숙해지면 GUI 방식보다 편리하다.</li><li>일련의 연속적인 작업을 한꺼번에 실행가능<ul><li><code>aws ec2 describe-instances | grep PublicIp</code>  : aws의 목록을 알아낸 후 PublicIp만의 텍스트를 추출한 것</li></ul></li></ul><h3 id="SDK-Software-Development-Kit"><a href="#SDK-Software-Development-Kit" class="headerlink" title="SDK(Software Development Kit)"></a>SDK(Software Development Kit)</h3><ul><li>프로그래밍을 통해 좀 더 섬세한 제어가 가능하도록 하기 위해 AWS에서 제공하는 도구</li><li>각각의 언어별로 다른 버전</li><li>언어별로 AWS 인프라를 제어할 수 있게 하는 개발 도구</li><li>자신이 사용할 수 있는 언어를 통해 AWS 인프라를 편리하게 제어 가능</li></ul><h3 id="API-Application-Programming-Interface"><a href="#API-Application-Programming-Interface" class="headerlink" title="API(Application Programming Interface)"></a>API(Application Programming Interface)</h3><ul><li>Restful API : Web을 통해 AWS의 인프라를 제어하거나 인프라의 상태를 알아낼 수 있는 상태</li><li>어떤 언어를 사용하건 상관없이 AWS의 인프라 사용 가능</li><li>직접 이용하는 건 복잡, 불편</li><li>그래서 SDK를 제공하는 것</li><li>직접 사용할 일은 없다.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AWS를 제어하는 방법들&lt;/p&gt;
    
    </summary>
    
    
      <category term="AWS" scheme="http://jbj828.github.io/categories/AWS/"/>
    
    
      <category term="AWS" scheme="http://jbj828.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>Connecting Dockerhub and Github</title>
    <link href="http://jbj828.github.io/2020/03/05/Docker-dockerhub-and-github/"/>
    <id>http://jbj828.github.io/2020/03/05/Docker-dockerhub-and-github/</id>
    <published>2020-03-05T01:46:25.000Z</published>
    <updated>2020-03-05T06:16:10.445Z</updated>
    
    <content type="html"><![CDATA[<p>Dockerhub와 Github 연동하기</p><a id="more"></a><h3 id="Dockerhub"><a href="#Dockerhub" class="headerlink" title="Dockerhub?"></a>Dockerhub?</h3><ul><li>도커의 이미지 용량은 메가에서 기가단위까지 거대하다. 이러한 큰 용량의 이미지를 Dockerhub를 통해 공개이미지로서 무료로 관리할 수 있게 만든 것.</li></ul><h3 id="Dockerhub와-Github-연동-이유"><a href="#Dockerhub와-Github-연동-이유" class="headerlink" title="Dockerhub와 Github 연동 이유?"></a>Dockerhub와 Github 연동 이유?</h3><ul><li>깃허브의 특정한 프로젝트에 있는 도커파일을 도커허브 측에서 자동으로 빌드를 수행해준다. 소스코드를 수정해서 깃허브에 업로드만 하면 자동으로 도커허브에서 그것을 감지해서 도커파일을 이용해 다시 빌드를 수행해주기 때문에 매우 쉽게 도커이미지를 컨테이너로 띄울 수 있게 된다.</li></ul><h3 id="과정"><a href="#과정" class="headerlink" title="과정"></a>과정</h3><ul><li>Dockerhub에서 Create a Repository</li><li>Github과 연동하여 해당 github repository와 연동</li><li>dockerhub에서 build 진행</li></ul><br><ul><li>빌드가 완료되면 우리의 서버에서 현재 구동 중인 모든 도커이미지를 제거해도 됨.</li><li><code>docker rm -f `docker ps -a -q`</code> : 컨테이너 삭제</li><li><code>docker rmi -f `docker images`</code>  : 이미지 삭제</li><li><code>docker ps -a</code> : 모든 이미지와 컨테이너 제거 확인</li></ul><br><p><strong>ReadMe 파일 만들기</strong></p><ul><li>Github에서 readme 파일 만들기<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Docker 실전 연습 예제입니다.</span><br><span class="line">### Installation</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">cd &#x2F;home</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;jbj828&#x2F;Docker-Practice</span><br><span class="line">cd Docker-Practice</span><br><span class="line">&lt;&#x2F;pre&gt;</span><br><span class="line">### Run</span><br><span class="line">&lt;pre&gt;</span><br><span class="line"># Login For Private Docker Repository</span><br><span class="line">docker login</span><br><span class="line">docker pull jbj828&#x2F;docker-practice</span><br><span class="line">docker run -p 80:80 -v &#x2F;home&#x2F;Docker-Practice&#x2F;Project:&#x2F;var&#x2F;www&#x2F;html jbj828&#x2F;docker-practice</span><br><span class="line">&lt;&#x2F;pre&gt;</span><br></pre></td></tr></table></figure></li></ul><br><p><strong>Readme파일에서 프로젝트 경로안에 index.html 파일이 존재하도록 설정했기 때문에, 깃 프로젝트의 구성을 바꿔준다</strong></p><ul><li><code>ls</code></li><li><code>cd /home/ubuntu</code></li><li><code>ls</code></li><li><code>cd Docker-Practice/</code></li><li><code>mkdir Project</code></li><li><code>mv index.php ./Project/index.php</code></li><li><code>cd Project</code></li><li><code>ls</code>  : 이제 Project 폴더안에 index.php가 존재</li></ul><br><ul><li><code>cd ..</code></li><li><code>git add .</code></li><li><code>git commit -m &quot;Change index.php path&quot;</code></li><li><code>git push</code></li><li>Readme.md파일을 수정했기 때문에 소스코드 충돌 메세지가 뜬다. 이럴 때는 pull 먼저 진행하면 된다</li><li><code>git pull</code></li><li>Merge관련 메세지 나오면 그냥 밖으로 나옴</li><li><code>git push</code></li></ul><br>출처 : 동빈나 youtube]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dockerhub와 Github 연동하기&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Posting Docker project to Github</title>
    <link href="http://jbj828.github.io/2020/03/04/Docker-withGithub/"/>
    <id>http://jbj828.github.io/2020/03/04/Docker-withGithub/</id>
    <published>2020-03-04T07:46:25.000Z</published>
    <updated>2020-03-04T06:27:37.001Z</updated>
    
    <content type="html"><![CDATA[<p>Github에 Docker 프로젝트 올리기</p><a id="more"></a><ul><li>Github에 새로운 Repository 생성</li></ul><br><p><em>AWS EC2의 ubuntu 18.04버전에는 자동으로 깃 프로그램이 설치되어 있어 바로 사용가능</em></p><h4 id="만들어진-Repository와-우리의-서버와-연동시키기-위해-클론부터-함"><a href="#만들어진-Repository와-우리의-서버와-연동시키기-위해-클론부터-함" class="headerlink" title="만들어진 Repository와 우리의 서버와 연동시키기 위해 클론부터 함"></a>만들어진 Repository와 우리의 서버와 연동시키기 위해 클론부터 함</h4><ul><li><code>cd /home/ubuntu</code></li><li><code>git clone 깃허브 레포지터리 복사</code></li><li><code>ls</code></li><li><code>cd 레포지터리 이름</code></li></ul><br><p>이제 깃프로젝트에 소스코드를 올리면 됨</p><ul><li><p><code>sudo vi 레포지터리이름</code></p></li><li><p><code>:wq!</code>  : 그냥 파일 저장할 수 있도록 해주고 주피터를 이용해서 소스코드 작성</p></li><li><p>이전에 작성한 example폴더의 Docker 파일 그대로 복사 붙여넣기(이렇게 깃 프로젝트를 만들었다)</p></li><li><p>주피터 홈에서 new -&gt; text file   하나의 php 코드도 만들어줌</p></li><li><p>이름은 index.php</p></li><li><p>내용은 이전에 작성했던 index.php내용 그대로 넣음</p></li></ul><br><p><strong>이제 실제로 깃에 올려보자</strong></p><ul><li><code>ls</code></li><li><code>cat Dockerfile</code> : 내용확인</li><li><code>cat index.php</code> : 내용확인</li><li><code>git add .</code></li><li><code>git commit -m &quot;이름&quot;</code></li><li><code>git push</code></li></ul><br>출처 : 동빈나 youtube]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Github에 Docker 프로젝트 올리기&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Making DB with AWS RDS</title>
    <link href="http://jbj828.github.io/2020/03/04/Docker-Making-DB-with-AWR-RDS/"/>
    <id>http://jbj828.github.io/2020/03/04/Docker-Making-DB-with-AWR-RDS/</id>
    <published>2020-03-04T06:46:25.000Z</published>
    <updated>2020-03-06T01:39:07.467Z</updated>
    
    <content type="html"><![CDATA[<p>AWS RDS를 이용한 데이터베이스 구축</p><a id="more"></a><p><strong>AWS RDS를 이용해 한 번 기록 된 데이터를 컨테이너가 꺼지더라도 남아있도록 하기 위해 이용</strong></p><br><p><strong>한글 데이터 삽입이 가능한 데이터베이스를 위해 한글 설정 관련 파라미터 그룹 생성</strong></p><ul><li>RDS에서 파라미터 생성</li><li><code>char</code> 검색해서 전부 utf8로 바꿈</li><li><code>collation</code> 검색 -&gt; 전부 utf8_general_ci</li></ul><br><ul><li>데이터베이스 -&gt; 연결 &amp; 보안 -&gt;　vpc 보안그룹 링크 들어감 -&gt; 인바운드 -&gt; 편집</li><li>실습이기 때문에 언제 어디서나 접속가능하게 만든다<ul><li>0.0.0.0/0</li></ul></li><li>이렇게 하면 접속주소만 알면 누구나 접속가능하게 됨</li></ul><br><ul><li>연결&amp;보안 -&gt; 엔드포인트(해당 mysql에 접속하기 위한 접속주소) 복사</li><li>php file에서 호스트 주소로 엔드포인트 붙여넣기</li><li>사용자 이름도 mysql 내용대로 수정</li><li>포트번호도 3306으로(mysql 포트번호)</li></ul><br><ul><li>aws ec2안에 설치된 mysql컨테이너는 지워도 됨</li><li><code>docker rm -f 컨테이너아이디</code></li></ul><br>출처 : 동빈나 youtube]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AWS RDS를 이용한 데이터베이스 구축&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
      <category term="AWS" scheme="http://jbj828.github.io/categories/Docker/AWS/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
      <category term="AWS" scheme="http://jbj828.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>Connecting MySQL Container and PHP Container</title>
    <link href="http://jbj828.github.io/2020/03/04/Docker-Connecting-mysqlAndPhp/"/>
    <id>http://jbj828.github.io/2020/03/04/Docker-Connecting-mysqlAndPhp/</id>
    <published>2020-03-04T04:46:25.000Z</published>
    <updated>2020-03-04T14:28:58.978Z</updated>
    
    <content type="html"><![CDATA[<p>PHP 컨테이너와 MySQL 컨테이너 연동해보기</p><a id="more"></a><ul><li><code>cd /home/ubuntu/example</code></li><li><code>ls</code></li><li><code>sudo vi Dockerfile</code></li><li>RUN 밑에<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Connect PHP &amp; MYSQL</span><br><span class="line">RUN apt-get install -y php5.6-mysql</span><br></pre></td></tr></table></figure>:wq!</li><li><code>docker build -t example .</code></li></ul><br><p>도커 이미지가 만들어졌으니, 이미지를 이용해서 컨테이너로 띄운다</p><ul><li><code>docker images</code></li><li><code>docker run -p 80:80 -v /home/ubuntu/example/html:/var/www/html example</code></li></ul><br><p>터미널을 하나 더 만들어서 php문서 작업</p><ul><li><code>cd /home/ubuntu/example/html</code></li><li><code>ls</code></li><li><code>cat index.php</code></li><li><code>sudo vi index.php</code></li></ul><br><p>문서작업이 많으면 Jupyter에서 직접 작업해도 된다.</p><ul><li>php를 mysql에 연결하기 위한 php문법<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $conn &#x3D; mysqli_connect(</span><br><span class="line">        &#39;[mysql IPAddress]&#39;,</span><br><span class="line">        &#39;test&#39;,</span><br><span class="line">        &#39;password&#39;,</span><br><span class="line">        &#39;TEST&#39;,</span><br><span class="line">        &#39;9876&#39;</span><br><span class="line">    );</span><br><span class="line">    if(mysqli_connect_errno())&#123;</span><br><span class="line">        echo &quot;Failed to connect to MySQL: &quot;.mysqli_connect_error();</span><br><span class="line">    &#125;</span><br><span class="line">    $sql &#x3D; &quot;SELECT VERSION()&quot;;</span><br><span class="line">    $result &#x3D; mysqli_query($conn, $sql);</span><br><span class="line">    $row &#x3D; mysqli_fetch_array($result);</span><br><span class="line">    print_r($row[&quot;VERSION()&quot;]));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li></ul><br>출처 : 동빈나 youtube]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP 컨테이너와 MySQL 컨테이너 연동해보기&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Making MySQL container with Docker</title>
    <link href="http://jbj828.github.io/2020/03/04/Docker-making-mySQL-container/"/>
    <id>http://jbj828.github.io/2020/03/04/Docker-making-mySQL-container/</id>
    <published>2020-03-04T03:46:25.000Z</published>
    <updated>2020-03-04T02:37:44.299Z</updated>
    
    <content type="html"><![CDATA[<p>Docker로 MySQL 컨테이너 만들어 보기</p><a id="more"></a><p><strong>MySQL은 도커허브에 존재하는 이미지이기 때문에 즉시 MySQL이미지를 다운로드 받아 사용할 수 있다</strong></p><br><ul><li><p><code>sudo apt install mysql-client-core-5.7</code> : mysql 설치</p></li><li><p><code>docker run -d -p 9876:3306 -e MYSQL_ROOT_PASSWORD=password mysql:5.6</code>  :  9876포트와 mysql의 기본포트인 3306포트 연결. 환경변수로 mysql의 루트 패스워드를 패스워드로 설정. mysql 5.6 이미지를 다운로드 받아서 실행까지 시행. </p></li><li><p><code>docker ps -a</code> </p></li><li><p><code>docker exec -it 컨테이너아이디 /bin/bash</code>  : 컨테이너 접속 위해 exec명령 이용. bash명령을 시행해 해당 컨테이너에 접속한 것과 같은 효과</p></li><li><p><code>mysql -u root -p</code>  : mysql 실행 및 접속</p></li><li><p>패스워드는 <code>password</code> 그대로 복사 붙여넣기</p></li></ul><br><h5 id="Database-생성"><a href="#Database-생성" class="headerlink" title="Database 생성"></a>Database 생성</h5><ul><li><code>CREATE DATABASE TEST;</code></li><li><code>SHOW DATABASES;</code></li><li><code>exit</code></li><li><code>exit</code></li></ul><br><h5 id="Docker-컨테이너의-세부정보-확인-및-컨테이너에-포함되어-있는-mysql-접속"><a href="#Docker-컨테이너의-세부정보-확인-및-컨테이너에-포함되어-있는-mysql-접속" class="headerlink" title="Docker 컨테이너의 세부정보 확인 및 컨테이너에 포함되어 있는 mysql 접속"></a>Docker 컨테이너의 세부정보 확인 및 컨테이너에 포함되어 있는 mysql 접속</h5><ul><li><code>docker inspect 컨테이너아이디</code></li><li>“IPAddress” 찾기</li><li><code>mysql -u root -p --host 아이피어드레스 --port 3306</code></li></ul><br><ul><li><code>SHOW DATABASES;</code>  : 이전에 만든 test 있는지 확인</li></ul><br><ul><li><code>mysql -u root -p --host 127.0.0.1 --port 9876</code> : 이 방법으로도 mysql에 접속 가능</li></ul><br><p>도커 컨테이너는 언제든지 제거될 수 있기 때문에 일반적으로 도커컨테이너를 mysql 서버로 사용 안함. 컨테이너와 같이 일시적인 서버로서 mysql을 사용하지 않음. 그래서 일반적으로 AWS RDS 같은 데이터베이스 기능을 많이 이용.</p><br><p><strong>Mysql 접속 이후 관리자 역할로 하나으 user 만들기</strong></p><ul><li><code>CREATE USER &#39;test&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39;;</code></li><li><code>GRANT ALL PRIVILEGES ON *.* TO &#39;test&#39;@&#39;%&#39;;</code> : 해당 유저에게 권한을 준다. test계정에 권한을 주고 외부에서 접속할 수 있도록 설정</li><li><code>FLUSH PRIVILEGES;</code></li><li><code>exit</code></li></ul><br><ul><li><code>docker restart 컨테이너아이디</code></li></ul><br><ul><li>AWS에서 포트 9876으로 열어준다.</li><li>‘IPv4 퍼블릭 IP’ 주소 복사해서 데이터베이스 접속 앱(HeidiSQL 등) 이용</li></ul><br>출처 : 동빈나 youtube]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker로 MySQL 컨테이너 만들어 보기&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Making Apache and PHP configuration with Docker Image</title>
    <link href="http://jbj828.github.io/2020/03/04/Docker-making-PHP-config/"/>
    <id>http://jbj828.github.io/2020/03/04/Docker-making-PHP-config/</id>
    <published>2020-03-04T01:46:25.000Z</published>
    <updated>2020-03-04T02:39:04.798Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 이미지로 Apache 및 PHP 개발환경 구축하기</p><a id="more"></a><p>아파치 웹서버만 포함되어있는 도커이미지를 더 수정해서 PHP까지 추가해본다. 볼륨을 공유할 수 있도록 해서 PHP 소스코드가 동작할 수 있도록 개발한다.</p><br><p><strong>컨테이너 제거</strong></p><ul><li><code>docker ps -a</code>  : 80번 포트의 컨테이너가 구동 중</li><li><code>docker rm -f `docker ps -a -q`</code>  : -f옵션은 컨테이너를 강제 삭제 시킴. docker ps에 -a -q를 붙여서 현재 존재하는 모든 컨테이너 명단을 가져온다.</li><li><code>docker ps -a</code>  : 컨테이너 확인해 본다</li></ul><br><p><strong>도커파일 수정</strong></p><ul><li><p><code>cd /home/ubuntu/example</code> : 저번에 만든 도커 파일 위치</p></li><li><p><code>ls</code> </p></li><li><p><code>sudo vi Dockerfile</code></p></li><li><p>도커파일에 php 설치 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;MAINTAINER 밑에</span><br><span class="line"># Avoiding user interaction with tzdata</span><br><span class="line">ENV DEBIAN_FRONTEND&#x3D;noninteractive</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 기존 RUN 밑에</span><br><span class="line">RUN apt-get install -y software-properties-common</span><br><span class="line">RUN add-apt-repository ppa:ondrej&#x2F;php # For Installing PHP 5.6</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y php5.6</span><br></pre></td></tr></table></figure></li><li><p><code>docker build -t example .</code></p></li><li><p><code>docker images</code></p></li></ul><p>빌드가 완료되면 기존에 존재하던 이미지는 <code>none</code>으로 바뀜. 사용되지 않는 이미지는 삭제한다. 하지만 삭제하고자 할 때 특정한 컨테이너에서 구동 중인 것은 삭제가 진행 안됨. 먼저 컨테이너부터 삭제 진행</p><ul><li><code>docker rm -f 컨테이너아이디</code> : docker ps -a에서 확인가능</li><li><code>docker rmi -f d 이미지아이디</code>  </li></ul><p><strong>Example 레포지터리를 컨테이너에 띄우기</strong></p><ul><li><code>docker run -p 80:80 -v /home/ubuntu/example/html:/var/www/html example</code>  : 80번 포트를 열고, volume옵션을 열어주어서 마운팅을 진행한다. /home/ubuntu/example/html 과 /var/www/html을 서로 연결해준다. 후자는 php의 소스코드가 놓이는 기본 경로.<br>이렇게 마운팅 된 경로는 호스트에다 파일을 넣어주면 자동으로 컨테이너의 해당 경로에 실제로 파일이 놓인 것과 같은 효과를 낸다.</li><li>/html/ubuntu/example/html 의 경로를 복사해 주피터에서 새로운 터미널을 열어 복사한다</li><li><code>cd /html/ubuntu/example/html</code></li><li><code>ls</code><br>: 이제 이 새로운 터미널에서 html문서나 php문서를 작성하면 이 컨테이너 내부에 있는 php소스코드 경로와 연결이 되기 때문에 실제 웹 서버에 php코드가 놓이는 것과 동일한 효과를 낸다</li><li>80번 포트에서 새로고침하면 php가 적용 된 문서가 나타난다</li></ul><p><strong>PHP 소스코드 작성</strong></p><p>새로운 터미널에서.</p><ul><li><p><code>sudo vi index.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><p>:wq!</p></li><li><p>다시 새로고침하면 컨테이너 안에 설치되어 있는 php환경설정 내용이 등장.</p></li></ul><br><ul><li>php와 apache가 설치된 하나의 image를 직접 만들었기 때문에 이제 docker run 을 통해 이 컨테이너를 띄울 수 있다</li><li><code>docker run -p 81:80 -v /home/ubuntu/example/html:/var/www/html example</code></li><li>AWS가서 81번도 방화벽을 열어준다</li></ul><p>출처 : 동빈나 youtube</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 이미지로 Apache 및 PHP 개발환경 구축하기&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Install Docker on AWS EC2 and run the web server through Dockerfile</title>
    <link href="http://jbj828.github.io/2020/03/03/Docker-installDockerOnAWSec2/"/>
    <id>http://jbj828.github.io/2020/03/03/Docker-installDockerOnAWSec2/</id>
    <published>2020-03-03T13:46:25.000Z</published>
    <updated>2020-03-06T01:38:57.930Z</updated>
    
    <content type="html"><![CDATA[<p>Docker Tutorial 2</p><a id="more"></a><p><strong>주피터에 도커 설치하기</strong></p><br><ul><li><code>df -h</code>  : 메모리가 어느정도 남았는지 체크</li><li><code>sudo apt update</code> : 설치는 apt를 이용해서 하기 때문에 먼저 apt 업데이트 명령 수행</li><li><code>sudo apt install apt-transport-https</code>  : 유틸 설치</li><li><code>sudo apt install ca-certificates</code>  : 유틸 설치</li><li><code>sudo apt install curl</code> : 유틸설치, 특정한 웹사이트에서 어떠한 데이터를 다운로드 받을 때 쓰는 것</li><li><code>sudo apt install software-properties-common</code></li></ul><br><ul><li><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code>  : curl을 이용해서 실제로 도커를 설치하기 위해 gpg내용을 다운로드 받고 그 내용을 apt기능을 위한 리스트에 추가할 수 있도록 함.</li></ul><br><ul><li><code>sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;</code>  : 도커는 레포지터리에서 다운로드 가능, 우분투 18.04버전에 맞는 도커를 다운로드 해야함.</li><li><code>sudo apt update</code></li></ul><p><strong>이것으로 apt-list에 docker를 다운로드 받기 위한 경로가 추가되었다</strong></p><br><p><strong>이제 실제로 도커를 다운로드 받는다</strong></p><ul><li><code>apt-cache policy docker-ce</code></li><li><code>sudo apt install docker-ce</code>  : 도커는 설치하게 되면 시스템 서비스로 등록되기 때문에 언제 어디서든 이용가능</li></ul><br><ul><li><code>sudo systemctl status docker</code>  : 도커 서비스 상태 확인</li><li><code>q</code> : 눌러서 원래로 돌아옴</li><li><code>docker pull hello-world</code>  : docker의 <em>pull</em> 명령은 특정한 서버파일 자체를 이미지 형태로 다운로드 받을 수 있게 해줌</li><li><code>docker images</code> : 이미지 확인</li></ul><br><p><strong>다운로드 받은 이미지를 실제 컨테이너로 만들기</strong></p><ul><li><code>docker run hello-world</code>  : hello-world 컨테이너를 띄움. 즉 이 명령을 내리자마자 우리의 서버 위에 하나의 서버가 별도로 더 생성되어 서버가 동작하고 작업이 종료된 것.</li><li><code>docker ps -a</code> : 어떤 컨테이너가 동작했는지 확인가능</li></ul><br><p><strong>컨테이너 삭제</strong></p><ul><li><code>docker rm 컨테이너아이디</code>  : docker ps -a로 아이디 확인 가능</li><li><code>docker images</code> : 삭제를 하더라도 이미지 파일은 남아있음</li></ul><br><h3 id="Docker-파일을-직접-작성해서-하나의-서버-이미지를-직접-만들기"><a href="#Docker-파일을-직접-작성해서-하나의-서버-이미지를-직접-만들기" class="headerlink" title="Docker 파일을 직접 작성해서 하나의 서버 이미지를 직접 만들기"></a>Docker 파일을 직접 작성해서 하나의 서버 이미지를 직접 만들기</h3><ul><li><code>ls</code>  : 현재 디렉토리의 파일에 대한 리스트를 보여줌</li><li><code>cd /home/ubuntu</code></li><li><code>ls</code></li><li><code>mkdir example</code></li><li><code>cd example</code></li><li><code>ls</code></li><li><code>sudo vi Dockerfile</code></li></ul><br><p><strong>도커파일 작성</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line">MAINTAINER ByungJae Chung &lt;jbj828@naver.com&gt;</span><br><span class="line"></span><br><span class="line">RUN apt-get update &#x2F;&#x2F;해당 서버가 웹 서버를 구동할 수 있도록 설정</span><br><span class="line">RUN apt-get install -y apache2 # Install Apache web server (Only &#39;yes&#39;) &#x2F;&#x2F; y옵션 넣는 이유는 설치할 때 용량 크면 설치 할 것인지 물어본다. docker이미지 만들 때는 행동예측이 어렵기에 무조건 설치한다는 뜻</span><br><span class="line"></span><br><span class="line">EXPOSE 80 # Open HTTP Port  &#x2F;&#x2F; 아파치 웹서버의 기본 포트인 80번 포트를 열 수 있도록 만들어준 것</span><br><span class="line"></span><br><span class="line">CMD [&quot;apachectl&quot;, &quot;-D&quot;, &quot;FOREGROUND&quot;] &#x2F;&#x2F;특정한 컨테이너는 작업 수행하자마자 바로 종료되기 때문에 아파치가 항상 구동중인 상태로 만들기 위해 명시</span><br></pre></td></tr></table></figure><p><code>:wq!</code></p><br><p><strong>Build Docker File</strong></p><p>도커 이미지를 만드는 것</p><ul><li><code>ls</code></li><li><code>docker build -t example .</code></li><li><code>docker images</code> : 확인<ul><li>만약 error가 났다면 error message 보고 docker file 들어가서 수정하고 다시 build하기</li></ul></li></ul><br><p><strong>만든 이미지를 활용해 실제 웹서버 컨테이너 구동</strong></p><ul><li><code>docker run -p 80:80 example</code> : 왼쪽은 현재 우리 서버의 포트를 넣고 오른쪽엔 컨테이너의 포트 넣기 - 호스트의 80번 포트와 컨테이너의 80번 포트가 연결됨, 실제로 호스트 서버의 80번 포트에 접속했을 때 사용자는 컨테이너의 80번 포트에 접속할 수 있게 됨</li></ul><Br><ul><li>이후 AWS -&gt; 보안그룹/launch-wizard-1 -&gt; 편집 -&gt;<br>규칙추가 -&gt; 유형:HTTP</li><li>서버의 80번 포트로 검색해봄 (주소창에서 주소명만 복사해서 <code>:80</code> 붙임) </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker Tutorial 2&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
      <category term="AWS" scheme="http://jbj828.github.io/categories/Docker/AWS/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
      <category term="AWS" scheme="http://jbj828.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>Install AWS EC2 Instance and Jupyter Notebook(환경설정)</title>
    <link href="http://jbj828.github.io/2020/03/03/Docker-tutorial1/"/>
    <id>http://jbj828.github.io/2020/03/03/Docker-tutorial1/</id>
    <published>2020-03-03T05:46:25.000Z</published>
    <updated>2020-03-06T01:39:26.840Z</updated>
    
    <content type="html"><![CDATA[<p>Docker Tutorial 1</p><a id="more"></a><h3 id="AWS-EC2-인스턴스-생성-및-접속"><a href="#AWS-EC2-인스턴스-생성-및-접속" class="headerlink" title="AWS EC2 인스턴스 생성 및 접속"></a>AWS EC2 인스턴스 생성 및 접속</h3><Br><ol><li>AWS에서 ubuntu 18버전으로 먼저 인스턴스 생성</li><li>key pair는 관리자만 실행가능하도록 환경설정<ul><li>오른쪽마우스 -&gt; 속성 -&gt; 보안 -&gt; 고급 -&gt; 상속사용</li><li>key pair는 무조건 C드라이브 안에 넣기</li></ul></li><li>명령프롬프트 관리자 권한으로 실행<ul><li>cd 키페어 위치</li><li>aws 홈페이지 가서 연결버튼 누름</li><li>ssh 링크 복사해서 cmd에 복사</li><li>연결완료 되면 pwd 입력 -&gt; <code>현재 서버위치</code></li></ul></li></ol><br><h3 id="Jupyter-Notebook-설치-HTTPS-적용-시스템-서비스-설정하기"><a href="#Jupyter-Notebook-설치-HTTPS-적용-시스템-서비스-설정하기" class="headerlink" title="Jupyter Notebook 설치, HTTPS 적용, 시스템 서비스 설정하기"></a>Jupyter Notebook 설치, HTTPS 적용, 시스템 서비스 설정하기</h3><br><ul><li><p><strong>Jypyter Notebook</strong> : 콘솔창이 아닌 웹브라우저 환경에서 해당 서버에 바로 접근해서 해당 서버를 관리할 수 있도록 해주는 유틸</p><ol><li>sudo apt-get update  :  apt-get명령의 업데이트</li><li>sudo apt-get install python3-pip<ul><li>ubuntu 18.04버전엔 pyhton3가 디폴트로 깔려있다. 그래서 python3는 깔 필요없고 파이썬 관련 패키지를 설치할 수 있도록 도와주는 python3-pip를 설치</li></ul></li><li>sudo pip3 install notebook  : jupyter notebook 설치</li></ol><br><p>만들어진 주피터를 통해서 서버의 외부에서 해당 서버에 웹브라우저를 이용해서 접속할 수 있도록 된 것. 이제 주피터 접속을 위한 비밀번호 설정을 해줘야 함.</p>  <br><ol><li>python3</li><li>from notebook.auth import passwd</li><li>passwd()   :  패스워드 함수 호출(비밀번호를 설정하겠다는 의미)</li><li>나온 hash값 복사해서 메모장 붙여넣기</li><li>exit()</li></ol><br><p>서버에서 주피터 노트북을 실행해서 외부에서 접속 했을 때 비밀번호를 입력해야 서버에 접속할 수 있도록 하기 위해 주피터 환경설정 진행</p><br><ol><li>jupyter notebook –generate-config    : 환경설정 파일 만듦</li><li>sudo vi 바로 윗줄 환경설정 위치값 붙여넣기<ul><li>ex)  sudo vi /home/ubuntu/.jupyter/jupyter_notebook_config.py         </li></ul></li><li>제일 밑으로 내려가서 ‘a’눌러서 수정모드로 변환</li><li>c = get_config()</li><li>c.NotebookApp.password = u’sha1 : 복사해둔 해시값’</li><li>c.NotebookApp.ip = ‘172.31.14.123’    이거는 화면 제목 창에 나온 주소 그대로 적으면 됨</li><li>c.NotebookApp.notebook_dir = ‘/‘</li><li>esc버튼 누르고</li><li>:wq!</li></ol><br><ol><li>sudo jupyter-notebook –allow-root   : 주피터 노트북을 루트권한을 가진 상태로 실행<ul><li>8888포트로 주피터 노트북이 열린 것 확인가능</li></ul></li></ol><br><ol><li>AWS 웹사이트 다시 돌아가서 </li><li>‘설명’란 안에 있는</li><li>‘보안그룹’ 의 ‘launch-wizard-1’ 클릭</li><li>‘인바운드’</li><li>‘편집’</li><li>‘규칙추가’</li><li>포트범위 : 8888</li><li>소스 : 0.0.0.0/0  (두 개 다)</li></ol><br><ol><li>인스턴스 화면으로 돌아옴</li><li>‘설명’란에 ‘IPv4 퍼블릭 IP’에 있는 주소 복사</li><li>주소창에 붙이고 ‘:8888’ 붙여서 엔터</li></ol><br><ul><li>더 이상 ssh가 필요하지 않고 바로 웹 브라우저에서 해당 서버에 접속할 수 있어서 매우 편리해졌다. 하지만 우린 주피터를 항상 실행할 수 있는 상태로 만들고 싶다</li></ul></li></ul><br><ol><li>다시 cmd로 돌아와서 ‘ctrl+z’로 해당 서버 종료 </li><li>bg   : background상태에서 돌아가게 함</li><li>disown -h   : 소유권 포기<ul><li>이제 주피터 노트북이 항상 실행 중인 상태가 됨<br></li></ul></li></ol><p>언제 어디서나 웹브라우저로 서버를 관리할 수 있게 됨<br>하지만 지금의 주피터 노트북은 ssl인증서가 적용되지 않은 상태라서 통신과정에서 상당히 위험.<br><br></p><p>그러므로 https를 적용해야됨</p><br><ol><li>sudo netstat -nap | grep 8888  : 현재 8888포트가 실행 중인 피아이디를 알 수 있다</li><li>sudo kill -9 ‘파이썬 옆 숫자’<ul><li>해당 주피터 노트북을 종료시킬 수 있음</li><li>웹브라우저에서 새로고침하면 적용 안 됨</li></ul></li></ol><br><h3 id="HTTPS-적용"><a href="#HTTPS-적용" class="headerlink" title="HTTPS 적용"></a>HTTPS 적용</h3><br><p><em>환경설정에 개인키와 공개키를 넣는 작업</em></p><br><ol><li>cd /home/ubuntu</li><li>pwd</li><li>mkdir ssl</li><li>cd ssl</li><li>sudo openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout “cert.key” -out “cert.pem” -batch     <em>개인키 공개키 생성</em></li><li>ls</li><li>sudo vi 바로 윗줄 환경설정 다시 열기<br>ex)  sudo vi /home/ubuntu/.jupyter/jupyter_notebook_config.py<br><em>방향키 위쪽 버튼 눌러서 찾기</em></li><li>‘a’눌러서 시작</li><li>c.NotebookApp.certfile = u’/home/ubuntu/ssl/cert.pem’</li><li>c.Notebop.keyfile = u’/home/ubuntu/ssl/cert.key’</li><li>esc버튼</li><li>:wq!</li></ol><Br><ol><li><p>sudo jupyter-notebook –allow-root   <em>주피터 노트북 실행</em></p><ul><li>https://주소:8888 넣으면 ssl이 적용이 된 상태로 서버에 접속가능</li><li>여기까지가 우리 주피터 노트북에 ssl(인증서)까지 적용한 것</li></ul></li></ol><br><h3 id="시스템-서비스-설정하기"><a href="#시스템-서비스-설정하기" class="headerlink" title="시스템 서비스 설정하기"></a>시스템 서비스 설정하기</h3><ul><li>서버가 재부팅되면 자동으로 주피터 노트북이 실행이 안됨. 그래서 주피터 노트북을 시스템 서비스로서 등록시켜서 재부팅해도 자동실행 가능하도록 함.</li></ul><br><ol><li><p>먼저 ctrl+c 눌러서 서버 구동 종료</p></li><li><p>which jupyter-notebook    <em>주피터 노트북 실행파일의 경로를 찾기 위한 명령</em></p></li><li><p>sudo vi /etc/systemd/system/jupyter.service    <em>시스템 서비스로 등록하기 위해 서비스 파일 작성</em></p></li><li><p><em>서비스 파일 작성</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Jupyter Notebook Server</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">User&#x3D;ubuntu  &#x2F;&#x2F;기본적으로 AWS ec2에 ssh명령을 이용해서 접속할 땐 ubuntu계정으로 접속하기 때문</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;sudo &#x2F;usr&#x2F;local&#x2F;bin&#x2F;jupyter-notebook --allow-root --config&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;.jupyter&#x2F;jupyter_notebook_config.py</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>:wq!입력</p><br></li></ol><p>  <em>주피터 노트북을 구동시키도록 함</em></p><ol><li>sudo systemctl daemon-reload <em>데몬을 다시 로드할수 있도록</em></li><li>sudo systemctl enable jupyter <em>주피터서비스를 사용가능하도록 만듦</em> </li><li>sudo systemctl start jupyter  <em>항상 실행상태가 되도록 만듦</em></li></ol><br><ul><li><p>실행 중인 주피터 서비스를 확인</p><ol><li>sudo systemctl status jupyter</li><li>확인 후 ‘q’눌러서 상태확인 마침</li></ol><br></li><li><p>주피터 서비스를 다시 시작하고자 할 때</p><ol><li>sudo systemctl restart jupyter</li></ol></li></ul><br><p>이제 aws ec2를 재부팅하더라도 주피터 노트북 서비스가 자동으로 실행되어서 구동중인 상태가 될 수 있도록 처리한 것. 항상 주피터를 이용해서 해당 서버에 접속해 관리할 수 있도록 된 것.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker Tutorial 1&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
      <category term="AWS" scheme="http://jbj828.github.io/categories/Docker/AWS/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
      <category term="AWS" scheme="http://jbj828.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>What is Docker?</title>
    <link href="http://jbj828.github.io/2020/03/03/Docker-theory/"/>
    <id>http://jbj828.github.io/2020/03/03/Docker-theory/</id>
    <published>2020-03-03T01:46:25.000Z</published>
    <updated>2020-03-02T16:47:18.314Z</updated>
    
    <content type="html"><![CDATA[<p>Primary theory of Docker</p><a id="more"></a><p>출처 : 공부목적으로 <a href="https://subicura.com/" target="_blank" rel="noopener">Subicura’s Blog</a>를 참조했습니다.</p><br><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul><li>컨테이너를 관리하는 플랫폼</li><li>컨테이너 기반의 오픈소스 가상화 플랫폼<ul><li>다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해줍니다. 백엔드 프로그램, 데이터베이스 서버, 메시지 큐등 어떤 프로그램도 컨테이너로 추상화할 수 있고 조립PC, AWS, Azure, Google cloud등 어디에서든 실행할 수 있습니다.</li><li>즉, 컨테이너는 격리된 공간에서 프로세스가 동작하는 기술입니다.</li></ul></li></ul><p><strong>Difference between VM and Docker</strong></p><br><img src="/2020/03/03/Docker-theory/docker1.png" class="" width="500" height="300" title="VM and Docker"><br><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><p>  ‘컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것’</p><ul><li>이미지는 컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것으로 상태값을 가지지 않고 변하지 않습니다(Immutable). 컨테이너는 이미지를 실행한 상태라고 볼 수 있고 추가되거나 변하는 값은 컨테이너에 저장됩니다. 같은 이미지에서 여러개의 컨테이너를 생성할 수 있고 컨테이너의 상태가 바뀌거나 컨테이너가 삭제되더라도 이미지는 변하지 않고 그대로 남아있습니다.</li><li>말그대로 이미지는 컨테이너를 실행하기 위한 모든 정보를 가지고 있기 때문에 더 이상 의존성 파일을 컴파일하고 이것저것 설치할 필요가 없습니다. 이제 새로운 서버가 추가되면 미리 만들어 놓은 이미지를 다운받고 컨테이너를 생성만 하면 됩니다. 한 서버에 여러개의 컨테이너를 실행할 수 있고, 수십, 수백, 수천대의 서버도 문제없습니다.</li><li>도커 이미지는 Docker hub에 등록하거나 Docker Registry 저장소를 직접 만들어 관리할 수 있습니다. 현재 공개된 도커 이미지는 50만개가 넘고 Docker hub의 이미지 다운로드 수는 80억회에 이릅니다. 누구나 쉽게 이미지를 만들고 배포할 수 있습니다.</li></ul><br><img src="/2020/03/03/Docker-theory/docker2.png" class="" width="500" height="300" title="Docker Image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Primary theory of Docker&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Regular Expression</title>
    <link href="http://jbj828.github.io/2020/02/23/RegularExpression/"/>
    <id>http://jbj828.github.io/2020/02/23/RegularExpression/</id>
    <published>2020-02-23T06:46:25.000Z</published>
    <updated>2020-02-23T06:18:30.544Z</updated>
    
    <content type="html"><![CDATA[<p>regular expression</p><a id="more"></a><h3 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h3><ul><li>정규표현식(正規表現式, Regular Expression)은 문자열을 처리하는 방법 중의 하나로 특정한 조건의 문자를 ‘검색’하거나 ‘치환’하는 과정을 매우 간편하게 처리 할 수 있도록 하는 수단이다.</li></ul><br><p><strong>정규표현식의 특징</strong></p><ul><li>Case sensitive(대소문자 구분)<br>  <code>options : &quot;i&quot;</code> 하면 대소문자 구분 없이 검색 가능</li></ul><br><p><strong>정규표현식의 패턴</strong></p><ul><li>^ : Character ^ matches the beginning of the line.</li><li>$ : Dollar sign matches the end of the line</li><li>\ : Escaping the pattern to the normal text.<ul><li><code>\$</code> : this means normal text of “$”</li></ul></li><li>. : Point . mathces any character   </li><li>[] : Insid square brackets “[]” a list of characters can be provided. The expression matches if any of these characters is found. The order of character is insignificant.</li><li>[x-y] : A range of characters can be specified with [-] syntax. ex) [c-k] : c부터 k까지 모두 선택</li><li>[^ ] : If a character class starts with ^, then specified characters will not be selected.</li></ul><p><strong>서브 패턴</strong></p><ul><li>(on|ues|rida) : Alternating text can be enclosed in parentheses and alternatives separated with |</li></ul><br>출처 : 생활코딩]]></content>
    
    <summary type="html">
    
      &lt;p&gt;regular expression&lt;/p&gt;
    
    </summary>
    
    
      <category term="Language" scheme="http://jbj828.github.io/categories/Language/"/>
    
    
      <category term="language" scheme="http://jbj828.github.io/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>How to write ReadMe?</title>
    <link href="http://jbj828.github.io/2020/02/22/WritingReadMe/"/>
    <id>http://jbj828.github.io/2020/02/22/WritingReadMe/</id>
    <published>2020-02-22T04:30:25.000Z</published>
    <updated>2020-02-22T03:43:18.193Z</updated>
    
    <content type="html"><![CDATA[<p>Information about writing ReadME documentation.</p><a id="more"></a><h3 id="Anatomy-of-a-README"><a href="#Anatomy-of-a-README" class="headerlink" title="Anatomy of a README"></a>Anatomy of a README</h3><ol><li>What <strong>steps</strong> need to be taken?</li><li>What should the user already have <strong>installed</strong> or <strong>configured</strong>?</li><li>What might they have a hard time understading <strong>right away</strong>?</li></ol><br><h3 id="Basic-Structure"><a href="#Basic-Structure" class="headerlink" title="Basic Structure"></a>Basic Structure</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 프로젝트 제목</span><br><span class="line">프로젝트 설명 (with 프로젝트 Logo)</span><br><span class="line"></span><br><span class="line">## 설치 방법 (Installation)</span><br><span class="line">설치 방법 설명 (with 예시코드)</span><br><span class="line"></span><br><span class="line">## 사용 방법 (Usage)</span><br><span class="line">사용 방법 설명 (with 예시코드)</span><br></pre></td></tr></table></figure><ul><li>If it is Open Source Project<br></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 기여 방법 (Contributing)</span><br><span class="line">기여 방법 설명</span><br><span class="line"></span><br><span class="line">## 라이센스 (License)</span><br><span class="line">해당하는 License (choosealicense.com 참고)</span><br></pre></td></tr></table></figure><ul><li>Big project</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## 버그들 (Known Bugs)</span><br><span class="line">## FAQ (Frequently Asked Qustions)</span><br><span class="line">## ToC (Table of Contents)</span><br></pre></td></tr></table></figure><p><Br><Br></p><p>ref : “Udacity - Writing READMEs”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Information about writing ReadME documentation.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Github" scheme="http://jbj828.github.io/categories/Github/"/>
    
    
      <category term="github" scheme="http://jbj828.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hashing - Direct Chaining Coding</title>
    <link href="http://jbj828.github.io/2020/02/19/Al-HashingDirectChaining/"/>
    <id>http://jbj828.github.io/2020/02/19/Al-HashingDirectChaining/</id>
    <published>2020-02-19T06:30:25.000Z</published>
    <updated>2020-02-23T05:42:56.281Z</updated>
    
    <content type="html"><![CDATA[<p>Direct Chaning Coding by Hashing </p><a id="more"></a><Br><p>DirectChaining.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line">import java.util.LinkedList;</span><br><span class="line"></span><br><span class="line">public class DirectChaining &#123;</span><br><span class="line">LinkedList&lt;String&gt;[] hashTable;</span><br><span class="line">int maximumChainSize &#x3D; 5;</span><br><span class="line"></span><br><span class="line">DirectChaining() &#123;</span><br><span class="line">hashTable &#x3D; new LinkedList[13];</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; HashFunction to be used on Keys</span><br><span class="line">public int simpleASCIIHashFunction(String x, int M) &#123;</span><br><span class="line">char ch[];</span><br><span class="line">ch &#x3D; x.toCharArray();</span><br><span class="line">int i, sum;</span><br><span class="line">for (sum &#x3D; 0, i &#x3D; 0; i &lt; x.length(); i++) &#123;</span><br><span class="line">sum &#x3D; sum + ch[i];</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; System.out.println(&quot;Index from hashfunction: &quot; + sum % M);</span><br><span class="line">return sum % M;</span><br><span class="line">&#125;&#x2F;&#x2F; end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Insert Key in HashTable</span><br><span class="line">public void insertKeyInHashTable(String value) &#123;</span><br><span class="line">int newIndex &#x3D; simpleASCIIHashFunction(value, hashTable.length); &#x2F;&#x2F;returns in which index we need to store this string</span><br><span class="line">if(hashTable[newIndex] &#x3D;&#x3D; null) &#123;</span><br><span class="line">System.out.println(&quot;Index: &quot; + newIndex + &quot; is empty. Creating a new LinkedList there...&quot;);</span><br><span class="line">hashTable[newIndex] &#x3D; new LinkedList&lt;String&gt;(); </span><br><span class="line">hashTable[newIndex].add(value);</span><br><span class="line">System.out.println(&quot;Successfully inserted &quot; + &quot;\&quot;&quot; + value + &quot;\&quot;&quot; + &quot; in location: &quot; + newIndex);</span><br><span class="line">System.out.println(&quot;-------------------------------------------\n&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;\nIndex: &quot; + newIndex + &quot; is having sufficient space. Inserting there...&quot;);</span><br><span class="line">hashTable[newIndex].add(value);</span><br><span class="line">System.out.println(&quot;Successfully inserted &quot; + &quot;\&quot;&quot; + value + &quot;\&quot;&quot; + &quot; in location: &quot; + newIndex);</span><br><span class="line">System.out.println(&quot;-------------------------------------------\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Search for a given key in hashTable</span><br><span class="line">public boolean searchKeyInHashTable(String stringToBeSearched) &#123;</span><br><span class="line">int newIndex &#x3D; simpleASCIIHashFunction(stringToBeSearched, hashTable.length);</span><br><span class="line">if (hashTable[newIndex] !&#x3D; null &amp;&amp; hashTable[newIndex].contains(stringToBeSearched)) &#123;</span><br><span class="line">System.out.println(&quot;\n&quot; + &quot;\&quot;&quot; + stringToBeSearched + &quot;\&quot;&quot; + &quot; found in HashTable at location: &quot;+newIndex);</span><br><span class="line">return true;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;\n&quot; + &quot;\&quot;&quot; + stringToBeSearched + &quot;\&quot;&quot; + &quot; not found in HashTable.&quot;);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Delete key from HashTable</span><br><span class="line">public void deleteKeyFromHashTable(String stringToBeDeleted) &#123;</span><br><span class="line">int newIndex &#x3D; simpleASCIIHashFunction(stringToBeDeleted, hashTable.length);</span><br><span class="line">if (hashTable[newIndex] !&#x3D; null &amp;&amp; hashTable[newIndex].contains(stringToBeDeleted)) &#123;</span><br><span class="line">System.out.println(&quot;\n&quot; + &quot;\&quot;&quot; + stringToBeDeleted + &quot;\&quot;&quot; + &quot; has been found in HashTable.&quot; );</span><br><span class="line">hashTable[newIndex].remove(stringToBeDeleted);</span><br><span class="line">System.out.println(&quot;\&quot;&quot; + stringToBeDeleted + &quot;\&quot;&quot; + &quot; has been deleted from HashTable !&quot; );</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;\nCould not find &quot; + &quot;\&quot;&quot; + stringToBeDeleted + &quot;\&quot;&quot; + &quot; in HashTable&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; display the hash table</span><br><span class="line">public void displayHashTable() &#123;</span><br><span class="line">if(hashTable &#x3D;&#x3D; null) &#123;</span><br><span class="line">System.out.println(&quot;\nHashTable does not exits !&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;\n---------- HashTable ---------&quot;);</span><br><span class="line">for (int i &#x3D; 0; i &lt; hashTable.length; i++) &#123;</span><br><span class="line">System.out.println(&quot;Index: &quot; + i + &quot;, key: &quot; + hashTable[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; &#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Deletes entire HashTable</span><br><span class="line">public void deleteHashTable() &#123;</span><br><span class="line">hashTable &#x3D; null;</span><br><span class="line">System.out.println(&quot;Successfully deleted HashTable !&quot;);</span><br><span class="line">&#125;&#x2F;&#x2F; end of method</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F;end of class</span><br></pre></td></tr></table></figure><br><p>Main.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line"></span><br><span class="line">public class DirectChainingMain &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Constructor</span><br><span class="line">DirectChaining directChaining &#x3D; new DirectChaining();</span><br><span class="line"></span><br><span class="line">directChaining.insertKeyInHashTable(&quot;The&quot;);</span><br><span class="line">directChaining.insertKeyInHashTable(&quot;quick&quot;);</span><br><span class="line">directChaining.insertKeyInHashTable(&quot;brown&quot;);</span><br><span class="line">directChaining.insertKeyInHashTable(&quot;fox&quot;);</span><br><span class="line">directChaining.insertKeyInHashTable(&quot;over&quot;);</span><br><span class="line">directChaining.insertKeyInHashTable(&quot;lazy&quot;);</span><br><span class="line">directChaining.displayHashTable();</span><br><span class="line"></span><br><span class="line">directChaining.insertKeyInHashTable(&quot;fox&quot;); &#x2F;&#x2F; use for showing collision</span><br><span class="line">directChaining.displayHashTable();</span><br><span class="line"></span><br><span class="line">directChaining.insertKeyInHashTable(&quot;fox&quot;); </span><br><span class="line">directChaining.displayHashTable();</span><br><span class="line"></span><br><span class="line">directChaining.insertKeyInHashTable(&quot;fox&quot;); </span><br><span class="line">directChaining.displayHashTable();</span><br><span class="line"></span><br><span class="line">directChaining.insertKeyInHashTable(&quot;fox&quot;); </span><br><span class="line">directChaining.displayHashTable();</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * DirectChaining.insertKeyInHashTable(&quot;fox&quot;); </span><br><span class="line"> * DirectChaining.displayHashTable();</span><br><span class="line"> * </span><br><span class="line"> * DirectChaining.insertKeyInHashTable(&quot;fox&quot;); </span><br><span class="line"> * DirectChaining.displayHashTable();</span><br><span class="line"> * </span><br><span class="line"> * DirectChaining.insertKeyInHashTable(&quot;fox&quot;); </span><br><span class="line"> * DirectChaining.displayHashTable();</span><br><span class="line"> * </span><br><span class="line"> * DirectChaining.insertKeyInHashTable(&quot;fox&quot;); </span><br><span class="line"> * DirectChaining.displayHashTable();</span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> * DirectChaining.searchKeyInHashTable(&quot;jump&quot;);</span><br><span class="line"> * DirectChaining.searchKeyInHashTable(&quot;brown&quot;);</span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> * DirectChaining.deleteKeyFromHashTable(&quot;jump&quot;);</span><br><span class="line"> * DirectChaining.deleteKeyFromHashTable(&quot;quick&quot;);</span><br><span class="line"> * DirectChaining.displayHashTable();</span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line"> * DirectChaining.deleteHashTable(); </span><br><span class="line"> * DirectChaining.displayHashTable();</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F; end of method</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F; end of class</span><br></pre></td></tr></table></figure><br><p>출처 : “Data Structures &amp; Algorithms” by DS GUY</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Direct Chaning Coding by Hashing &lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Hashing</title>
    <link href="http://jbj828.github.io/2020/02/18/Al-hasing/"/>
    <id>http://jbj828.github.io/2020/02/18/Al-hasing/</id>
    <published>2020-02-18T14:30:25.000Z</published>
    <updated>2020-02-19T00:59:23.048Z</updated>
    
    <content type="html"><![CDATA[<p>Hashing</p><a id="more"></a><br><p><strong>What is Hashing</strong></p><ul><li>Hashing is a method of sorting and indexing data. The idea behind hasing is to allow large amounts of data to be indexed using keys commonly created by formulas.</li><li>해시함수란 데이터의 효율적 관리를 목적으로 임의의 데이터를 고정된 길이의 데이터로 매핑하는 함수이다. 매핑 전 원래 데이터의 값을 키(key), 매핑 후 데이터의 값을 해시값(hash value), 매핑하는 과정 자체를 해싱(hashing) 이라고 한다.</li></ul><p><strong>Why we need Hashing</strong></p><ul><li>Time efficient<img src="/2020/02/18/Al-hasing/hasing1.png" class="" width="400" height="200" title="hashing time complexity"></li></ul><br><p><strong>Terminologies</strong></p><ul><li><p>Hash Function : A hash function is any function that can be used to map data of arbitrary size to data of fixed size.</p></li><li><p>Key : Input data given by user</p></li><li><p>Hash Value : The values returned by a hash function are called hash values, hash codes, digests, or simply hashes.</p></li><li><p>Hash Tables : It is a data structure which implements an associative array abstract data type, a structure that can map keys to values.</p></li><li><p>Collision : A collision occurs when two different key to a hash function produce the same output called hash values.</p><img src="/2020/02/18/Al-hasing/hashing2.png" class="" width="600" height="500" title="hashing structure"></li></ul><br><p><strong>Characteristics of good Hash function</strong></p><ul><li>It distributes hash values uniformly across the hash table.</li><li>The hash function uses all the input data.</li></ul><br><h4 id="Collision-Resolution-Techniques"><a href="#Collision-Resolution-Techniques" class="headerlink" title="Collision Resolution Techniques"></a>Collision Resolution Techniques</h4><img src="/2020/02/18/Al-hasing/hashing3.png" class="" width="400" height="300" title="hashing structure"><br><ul><li><p>Direct Chaining </p><ul><li>Implements the buckets as linked lists. Colliding elements are stored in these lists.<img src="/2020/02/18/Al-hasing/hashing4.png" class="" width="400" height="300" title="Direct Chaining"><br></li></ul></li><li><p>Open Addressing</p><ul><li>Colliding elements are stored in other vacant buckets. During storage and lookup, there are found through so called “probing”<br></li></ul><ul><li><p>Linear Probing :</p><ul><li>Linear probing is a strategy for resolving collisions by replacing the new key into the closest following empty cell.<img src="/2020/02/18/Al-hasing/hashing5.png" class="" width="400" height="300" title="Linear Probing"><br></li></ul></li><li><p>Quadratic Probing : </p><ul><li>Qudratic probing operates by taking the original hash index and adding successive values of an arbitrary quadratic polynomial until an open slot is found.<img src="/2020/02/18/Al-hasing/hashing6.png" class="" width="400" height="300" title="Quadratic Probing"><br></li></ul></li><li><p>Double Hashing :</p><ul><li>Interval between probes is computed by another hash function.<img src="/2020/02/18/Al-hasing/hashing7.png" class="" width="400" height="300" title="Double Hashing"></li></ul></li></ul></li></ul><br><p><strong>What happens when Hash Table is full?</strong></p><ul><li><p>Direct Chaining </p><ul><li>This situation will never arise.</li></ul></li><li><p>Open Addressing</p><ul><li>Need to create 2x size of current table and redo Hashing for existing keys.<img src="/2020/02/18/Al-hasing/hashing8.png" class="" width="400" height="300" title="resizeHashTable"></li></ul></li></ul><br><p><strong>Pros &amp; Cons of Collision Resolution Technique</strong></p><ul><li><p>Direct Chaining</p><ul><li>No fear of exhausting Hash Table buckets.</li><li>Fear of big Linked Lists(can effect performance big time).</li></ul></li><li><p>Open Addressing</p><ul><li>Easy implementation</li><li>Fear of exhasuting Hash Table buckets.</li></ul></li></ul><ol><li><p>If input size is known then always use “Open Addressing”, else can use any of the two.</p></li><li><p>If Deletion is very high, then we should always go for ‘Direct Chaining’. Because when we delet a lot on ‘Open Addressing’, there’s gonna have lots of Hole and it will make problem. We can do “restruction”, but it’s not that efficient way.</p></li></ol><br><p><strong>Practical Use of Hashing</strong></p><ul><li>Password Verification</li><li>File System : File path is mapped to physical location on disk.</li></ul><br><p><strong>Pros &amp; Cons of Hashing</strong></p><ul><li><p>Pros</p><ul><li>On an average Insertion/Deletion/Search operation takes O(1) time.</li></ul></li><li><p>Cons</p><ul><li>In the worst case Insertion/Deletion/Search might take O(n) time(when hash function is not good enough)</li></ul></li></ul><br>출처 : "Data Structures & Algorithms" by DS GUY]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hashing&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Trie Coding</title>
    <link href="http://jbj828.github.io/2020/02/18/Al-Trie-Coding/"/>
    <id>http://jbj828.github.io/2020/02/18/Al-Trie-Coding/</id>
    <published>2020-02-18T07:30:25.000Z</published>
    <updated>2020-02-18T09:14:30.541Z</updated>
    
    <content type="html"><![CDATA[<p>Trie coding</p><a id="more"></a><br><p>Trie.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">package trie;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class Trie &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Private class</span><br><span class="line">private class TrieNode &#123;</span><br><span class="line">Map&lt;Character, TrieNode&gt; children;</span><br><span class="line">boolean endOfWord;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Constructor</span><br><span class="line">public TrieNode() &#123;</span><br><span class="line">children &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">endOfWord &#x3D; false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#x2F;&#x2F; End of inner class</span><br><span class="line"></span><br><span class="line">private final TrieNode root;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Constructor</span><br><span class="line">public Trie() &#123;</span><br><span class="line">root &#x3D; new TrieNode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Insert word into Trie</span><br><span class="line">public void insert(String word) &#123;</span><br><span class="line">TrieNode current &#x3D; root;</span><br><span class="line">for (int i &#x3D; 0; i &lt; word.length(); i++) &#123;</span><br><span class="line">char ch &#x3D; word.charAt(i);</span><br><span class="line">TrieNode node &#x3D; current.children.get(ch);</span><br><span class="line">if (node &#x3D;&#x3D; null) &#123;</span><br><span class="line">node &#x3D; new TrieNode();</span><br><span class="line">current.children.put(ch, node);</span><br><span class="line">&#125;</span><br><span class="line">current &#x3D; node;</span><br><span class="line">&#125;</span><br><span class="line">current.endOfWord &#x3D; true;</span><br><span class="line">System.out.println(&quot;Successfully inserted &quot; + word + &quot; in Trie !&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Search for a word in Trie</span><br><span class="line">public boolean search(String word) &#123;</span><br><span class="line">TrieNode currentNode &#x3D; root;</span><br><span class="line">for (int i &#x3D; 0; i &lt; word.length(); i++) &#123;</span><br><span class="line">char ch &#x3D; word.charAt(i);</span><br><span class="line">TrieNode node &#x3D; currentNode.children.get(ch); </span><br><span class="line">if (node &#x3D;&#x3D; null) &#123; &#x2F;&#x2F;CASE#1 -- if node does not exist for given char then return false</span><br><span class="line">System.out.println(&quot;Word: &quot; + word + &quot; does not exists in Trie !&quot;);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">currentNode &#x3D; node;</span><br><span class="line">&#125;</span><br><span class="line">if(currentNode.endOfWord &#x3D;&#x3D; true) &#123;</span><br><span class="line">System.out.println(&quot;Word: &quot; + word + &quot; exists in Trie !&quot;); &#x2F;&#x2F;CASE#2 -- Word exists in Trie</span><br><span class="line">&#125;else &#123;&#x2F;&#x2F;CASE#3 -- Current word is a prefix of another word. But this word does not exists</span><br><span class="line">System.out.println(&quot;Word: &quot; + word + &quot; does not exists in Trie ! But this is a Prefix of another Word !&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return currentNode.endOfWord;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Delete word from Trie</span><br><span class="line">public void delete(String word) &#123;</span><br><span class="line">if (search(word) &#x3D;&#x3D; true) &#123;</span><br><span class="line">delete(root, word, 0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Returns true if parent should delete the mapping</span><br><span class="line">private boolean delete(TrieNode parentNode, String word, int index) &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; CASE#1 -- Some other word&#39;s prefix is same as Prefix of this word (BCDE, BCKG)</span><br><span class="line">&#x2F;&#x2F; CASE#2 -- We are at last character of this word and This word is a Prefix of some other word (BCDE, BCDEFG)</span><br><span class="line">&#x2F;&#x2F; CASE#3 -- Some other word is a Prefix of this word (BCDE, BC)</span><br><span class="line">&#x2F;&#x2F; CASE#4 -- No one is dependent on this Word (BCDE, BCDE)</span><br><span class="line"></span><br><span class="line">char ch &#x3D; word.charAt(index);</span><br><span class="line">TrieNode currentNode &#x3D; parentNode.children.get(ch);</span><br><span class="line"></span><br><span class="line">boolean canThisNodeBeDeleted;</span><br><span class="line"></span><br><span class="line">if (currentNode.children.size() &gt; 1) &#123;</span><br><span class="line">System.out.println(&quot;Entering Case#1&quot;);</span><br><span class="line">delete(currentNode, word, index + 1); &#x2F;&#x2F; CASE#1</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (index &#x3D;&#x3D; word.length() - 1) &#123; &#x2F;&#x2F; CASE#2</span><br><span class="line">System.out.println(&quot;Entering Case#2&quot;);</span><br><span class="line">if (currentNode.children.size() &gt;&#x3D; 1) &#123;</span><br><span class="line">currentNode.endOfWord &#x3D; false;&#x2F;&#x2F;updating endOfWord will signify that this word is not there in Trie</span><br><span class="line">return false;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">System.out.println(&quot;Character &quot; + ch + &quot; has no dependency, hence deleting it from last&quot;);</span><br><span class="line">parentNode.children.remove(ch);</span><br><span class="line">return true;&#x2F;&#x2F; If this word is not a prefix of some other word, and since this is last</span><br><span class="line">&#x2F;&#x2F; character, we should</span><br><span class="line">&#x2F;&#x2F; return true, indicating we are ok to delete this node</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (currentNode.endOfWord &#x3D;&#x3D; true) &#123; &#x2F;&#x2F; CASE#3</span><br><span class="line">System.out.println(&quot;Entering Case#3&quot;);</span><br><span class="line">delete(currentNode, word, index + 1); </span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(&quot;Entering Case#1&quot;);</span><br><span class="line">canThisNodeBeDeleted &#x3D; delete(currentNode, word, index + 1); &#x2F;&#x2F; CASE#4</span><br><span class="line">if (canThisNodeBeDeleted &#x3D;&#x3D; true) &#123;</span><br><span class="line">System.out.println(&quot;Character &quot; + ch + &quot; has no dependency, hence deleting it&quot;);</span><br><span class="line">parentNode.children.remove(ch);</span><br><span class="line">return true; &#x2F;&#x2F; Current node can also be deleted</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return false; &#x2F;&#x2F; Someone is dependent on this node, hence dont delete it</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F; End of class</span><br></pre></td></tr></table></figure><br><p>Main.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package trie;</span><br><span class="line"></span><br><span class="line">public class TrieMain &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Trie t  &#x3D;new Trie();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;CASE#1</span><br><span class="line">t.insert(&quot;bcde&quot;);</span><br><span class="line">t.insert(&quot;bckg&quot;);</span><br><span class="line">t.delete(&quot;bcde&quot;);</span><br><span class="line">t.search(&quot;bcde&quot;);</span><br><span class="line">t.search(&quot;bckg&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*&#x2F;&#x2F;CASE#2</span><br><span class="line">t.insert(&quot;bcde&quot;);</span><br><span class="line">t.insert(&quot;bcdefg&quot;);</span><br><span class="line">t.delete(&quot;bcde&quot;);</span><br><span class="line">t.search(&quot;bcde&quot;);</span><br><span class="line">t.search(&quot;bcdefg&quot;);*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*&#x2F;&#x2F;CASE#3</span><br><span class="line">t.insert(&quot;bcde&quot;);</span><br><span class="line">t.insert(&quot;bc&quot;);</span><br><span class="line">t.delete(&quot;bcde&quot;);</span><br><span class="line">t.search(&quot;bcde&quot;);</span><br><span class="line">t.search(&quot;bcde&quot;);</span><br><span class="line">t.search(&quot;bc&quot;);</span><br><span class="line">t.search(&quot;b&quot;);*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*&#x2F;&#x2F;CASE#4</span><br><span class="line">t.insert(&quot;bcde&quot;);</span><br><span class="line">t.delete(&quot;bcde&quot;);</span><br><span class="line">t.search(&quot;bcde&quot;);*&#x2F;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F;End of Class</span><br></pre></td></tr></table></figure><Br><p>출처 : “Data Structures &amp; Algorithms” by DS GUY</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Trie coding&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Trie</title>
    <link href="http://jbj828.github.io/2020/02/16/Al-Trie/"/>
    <id>http://jbj828.github.io/2020/02/16/Al-Trie/</id>
    <published>2020-02-16T06:30:25.000Z</published>
    <updated>2020-02-17T00:43:39.182Z</updated>
    
    <content type="html"><![CDATA[<p>trie</p><a id="more"></a><p><strong>What is Trie?</strong></p><ul><li>It is a search tree, which is typically used to store/search strings in space/time efficient way.</li><li>In it, any node can store non repetitive multiple characters.</li><li>Also, every node stores ‘link’ of next character of the string.</li><li>Also, every node keeps a track of ‘end of String’</li></ul><br><p><strong>Why learn Trie?</strong></p><ul><li>Used to solve many standard problems in efficient ways<ul><li>Spelling checker</li><li>Auto Complete string</li><li>Etc..</li></ul></li></ul><br><p><strong>Creating a Trie</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Trie()</span><br><span class="line">  create a blank node</span><br></pre></td></tr></table></figure><br><p><strong>Inserting a String in Trie</strong></p><ul><li>Case#1 - Trie is blank(air)</li><li>Case#2 - New String’s prefix is common with another String’s Prefix(aio)</li><li>Case#3 - New String’s prefix is already present as complete String(airk)</li><li>Case#4 - String to be inserted is already present in Trie</li></ul><br><p><strong>Searching a String in Trie</strong> </p><p>ex)abc</p><ul><li>Case#1 - String does not exist in Trie(ex) xyz)</li><li>Case#2 - String exists in Trie(ex) abc)</li><li>Case#3 - Current String is a prefix of another String. But this string does not exist in Trie.(ex) ab)</li></ul><br><p><strong>Deleting a String from Trie</strong></p><ul><li>Case#1 - Some other word’s prefix is same as Prefix of this word(BCDE, BCKG)</li><li>Case#2 - This word is a prefix of some other word(BCDE,BCDEF)</li><li>Case#3 - Some other word is a prefix of this word(BCDE,BC)</li><li>Case#4 - No one is dependent on this word(k)</li></ul><Br><p><strong>Trie-Practical use</strong></p><ul><li>Auto Complete</li><li>Spell Checkers</li></ul><p>출처 : “Data Structures &amp; Algorithms” by DS GUY</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;trie&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Binary Heap Coding</title>
    <link href="http://jbj828.github.io/2020/02/15/Al-BinaryHeapCoding/"/>
    <id>http://jbj828.github.io/2020/02/15/Al-BinaryHeapCoding/</id>
    <published>2020-02-15T13:30:25.000Z</published>
    <updated>2020-02-15T13:26:55.261Z</updated>
    
    <content type="html"><![CDATA[<p>Binary Heap Coding</p><a id="more"></a><p>HeapByArray.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line"></span><br><span class="line">public class HeapByArray &#123;</span><br><span class="line">int[] arr;</span><br><span class="line">int sizeOfTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Constructor</span><br><span class="line">public HeapByArray(int size) &#123;</span><br><span class="line">&#x2F;&#x2F;We are adding 1 here so that first cell of the array can be left blank all the time. This is eliminate problem of array starting from index 0.</span><br><span class="line">arr &#x3D; new int[size+1];</span><br><span class="line">this.sizeOfTree &#x3D; 0;</span><br><span class="line">System.out.println(&quot;Empty Heap has been created !&quot;);</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public int sizeOfArray() &#123;</span><br><span class="line">return arr.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public int sizeOfTree() &#123;</span><br><span class="line">System.out.println(&quot;Size Of Tree: &quot; + sizeOfTree);</span><br><span class="line">return sizeOfTree;</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public boolean isHeapEmpty() &#123;</span><br><span class="line">if (sizeOfTree &lt;&#x3D; 0) &#123;</span><br><span class="line">System.out.println(&quot;Tree is empty !&quot;);</span><br><span class="line">return true;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;Tree is not empty !&quot;);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public void deleteheap() &#123;</span><br><span class="line">arr &#x3D; null;</span><br><span class="line">System.out.println(&quot;Heap has been deleted !&quot;);</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Insert a new value in Heap</span><br><span class="line">public void insertInHeap(int value) &#123;</span><br><span class="line">&#x2F;&#x2F;Doing +1 because sizeOfTree always points to the last occupied cell of the array </span><br><span class="line">System.out.println(&quot;Inserting &quot; + value + &quot; in Heap...&quot;);</span><br><span class="line">arr[sizeOfTree+1] &#x3D; value;</span><br><span class="line">sizeOfTree++;</span><br><span class="line">HeapifyBottomToTop(sizeOfTree);</span><br><span class="line">System.out.println(&quot;Inserted &quot; + value + &quot; successfully in Heap !&quot;);</span><br><span class="line">levelOrder();</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Peek into Heap</span><br><span class="line">public void peek() &#123;</span><br><span class="line">if(sizeOfTree &#x3D;&#x3D; 0) &#123;</span><br><span class="line">System.out.println(&quot;Heap is empty !&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;Head of the Heap is: &quot; + arr[1]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Extract Head of Heap</span><br><span class="line">public int extractHeadOfHeap() &#123;</span><br><span class="line">if(sizeOfTree &#x3D;&#x3D; 0) &#123;</span><br><span class="line">System.out.println(&quot;Heap is empty !&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;Head of the Heap is: &quot; + arr[1]);</span><br><span class="line">System.out.println(&quot;Extracting it now...&quot;);</span><br><span class="line">int extractedValue &#x3D; arr[1];</span><br><span class="line">arr[1] &#x3D; arr[sizeOfTree];</span><br><span class="line">sizeOfTree--;</span><br><span class="line">HeapifyTopToBottom(1);</span><br><span class="line">System.out.println(&quot;Successfully extracted value from Heap.&quot;);</span><br><span class="line">levelOrder();</span><br><span class="line">return extractedValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public void HeapifyBottomToTop(int index) &#123;</span><br><span class="line">int parent &#x3D; index &#x2F; 2;</span><br><span class="line">&#x2F;&#x2F; We are at root of the tree. Hence no more Heapifying is required.</span><br><span class="line">if (index &lt;&#x3D; 1) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; If Current value is smaller than its parent, then we need to swap</span><br><span class="line">if (arr[index] &lt; arr[parent]) &#123;</span><br><span class="line">int tmp &#x3D; arr[index];</span><br><span class="line">arr[index] &#x3D; arr[parent];</span><br><span class="line">arr[parent] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">HeapifyBottomToTop(parent);</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public void HeapifyTopToBottom(int index) &#123;</span><br><span class="line">int left  &#x3D; index*2;</span><br><span class="line">int right &#x3D; (index*2)+1;</span><br><span class="line">int smallestChild &#x3D; 0;</span><br><span class="line"></span><br><span class="line">if (sizeOfTree &lt; left) &#123; &#x2F;&#x2F;If there is no child of this node, then nothing to do. Just return.</span><br><span class="line">return; </span><br><span class="line">&#125;else if (sizeOfTree &#x3D;&#x3D; left) &#123; &#x2F;&#x2F;If there is only left child of this node, then do a comparison and return.</span><br><span class="line">if(arr[index] &gt; arr[left]) &#123;</span><br><span class="line">int tmp &#x3D; arr[index];</span><br><span class="line">arr[index] &#x3D; arr[left];</span><br><span class="line">arr[left] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">return;</span><br><span class="line">&#125;else &#123; &#x2F;&#x2F;If both children are there</span><br><span class="line">if(arr[left] &lt; arr[right]) &#123; &#x2F;&#x2F;Find out the smallest child</span><br><span class="line">smallestChild &#x3D; left;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">smallestChild &#x3D; right;</span><br><span class="line">&#125;</span><br><span class="line">if(arr[index] &gt; arr[smallestChild]) &#123; &#x2F;&#x2F;If Parent is greater than smallest child, then swap</span><br><span class="line">int tmp &#x3D; arr[index];</span><br><span class="line">arr[index] &#x3D; arr[smallestChild];</span><br><span class="line">arr[smallestChild] &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">HeapifyTopToBottom(smallestChild);</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public void levelOrder() &#123;</span><br><span class="line">System.out.println(&quot;Printing all the elements of this Heap...&quot;);&#x2F;&#x2F; Printing from 1 because 0th cell is dummy</span><br><span class="line">for (int i &#x3D; 1; i &lt;&#x3D; sizeOfTree; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + &quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;\n&quot;);</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F;end of class</span><br></pre></td></tr></table></figure><br><p>출처 : “Data Structures &amp; Algorithms” by DS GUY</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Binary Heap Coding&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Binary Heap</title>
    <link href="http://jbj828.github.io/2020/02/14/Al-BinaryHeap/"/>
    <id>http://jbj828.github.io/2020/02/14/Al-BinaryHeap/</id>
    <published>2020-02-14T13:16:25.000Z</published>
    <updated>2020-02-15T14:46:04.039Z</updated>
    
    <content type="html"><![CDATA[<p>Binary Heap theory </p><a id="more"></a><br><p><strong>What is Binary Heap</strong></p><ul><li><p>Definition : Binary Heap is a Binary Tree with some special properties.</p><br><ol><li><p>Heap property</p><ul><li>Value of any given node must be &lt;= value of its children(Min-Heap)</li><li>Value of any given node must be &gt;= value of its children(Max-Heap)<br></li></ul></li><li><p>Complete tree</p><ul><li>All levels are completely filled except possibly the last level and the last level has all keys as left as possible.</li><li>This makes Binary Heap ideal candidate for Array Implementation.</li></ul></li></ol></li></ul><Br><p><strong>Why should we learn Binary Heap?</strong></p><p>There are cases when we want to find ‘min/max’ number among set of numbers in log(n) time. Also, we want to make sure that Inserting additional numbers does not take more than O(log n) time.</p><br><ul><li><p>Possible Solutions:</p><ol><li>Store the numbers in sorted Array &lt;- Take O(n) time complexity</li><li>Store the numbers in Linked List in sorted manner &lt;- Take O(n) time complexity</li></ol></li></ul><br>Binary Heap will solve this problem with O(log n).<br><p><strong>Types of Binary Heap</strong></p><ol><li>Min-Heap : If the value of each node is less than or equal to value of both of its children.</li><li>Max-Heap : If the value of each node is more than or equal to value of both of its children.</li></ol><br><p><strong>Practical Use</strong></p><ol><li>Prim’s Algorithm</li><li>Heap Sort</li><li>Priority Queue</li></ol><p><br><br></p><h4 id="Binary-Heap-Array-Representaion"><a href="#Binary-Heap-Array-Representaion" class="headerlink" title="Binary Heap - Array Representaion"></a>Binary Heap - Array Representaion</h4><ul><li>Implementation options<ul><li>Array based Implementation</li><li>Reference/Pointer based Implementation</li></ul></li></ul><br><p><strong>Insertion in Heap</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">insertValueInHeap(value)</span><br><span class="line">  if tree does not exists</span><br><span class="line">    return error message</span><br><span class="line">  else</span><br><span class="line">    insert &#39;value&#39; in first unused cell of Array</span><br><span class="line">    sizeOfHeap++</span><br><span class="line">    heapifyBottomToTop(sizeOfHeap)  ----- O(log n) : this means the height of the tree, the recursive call will step every node until it reaches the number which is smaller(Min-Heap) than its children</span><br></pre></td></tr></table></figure><Br><ul><li>Time Complexity - O(log n)</li><li>Space Complexity - O(log n) </li></ul><br><p><strong>ExtractMin from Heap</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">extractMin()</span><br><span class="line">  if tree does not exist</span><br><span class="line">    return error message</span><br><span class="line">  else</span><br><span class="line">    extract 1st cell of Array</span><br><span class="line">    promote last element to first</span><br><span class="line">    sizeOfHeap--</span><br><span class="line">    heapifyTopToBottom(1)</span><br></pre></td></tr></table></figure><Br><ul><li>Time Complexity - O(log n)</li><li>Space Complexity - O(log n) </li></ul><br><p><strong>Delete Heap</strong></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deleteHeap()</span><br><span class="line">  set array to null</span><br></pre></td></tr></table></figure><br><ul><li>Time Complexity - O(1)</li><li>Space Complexity - O(1) </li></ul><br><p><strong>Reason why we don’t use Reference implementation(linked list) on Binary Heap</strong></p><ul><li>When we try to extract min/max number from the tree using reference, we need to loop all over the tree to find the value. This procedure takes O(n) time complexity. Inefficient!!</li></ul><p><Br><Br></p><p>출처 : “Data Structures &amp; Algorithms” by DS GUY</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Binary Heap theory &lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
</feed>
