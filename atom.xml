<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Developer Javit</title>
  
  <subtitle>Slowly and Steadily</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jbj828.github.io/"/>
  <updated>2020-04-02T04:37:23.934Z</updated>
  <id>http://jbj828.github.io/</id>
  
  <author>
    <name>Jay Chung</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Graph Traversal(BFS, DFS)</title>
    <link href="http://jbj828.github.io/2020/04/02/Al-graph-Graph-Traversal/"/>
    <id>http://jbj828.github.io/2020/04/02/Al-graph-Graph-Traversal/</id>
    <published>2020-04-02T07:30:25.000Z</published>
    <updated>2020-04-02T04:37:23.934Z</updated>
    
    <content type="html"><![CDATA[<p>graph traversal</p><a id="more"></a><h3 id="What-is-Graph-Traversal"><a href="#What-is-Graph-Traversal" class="headerlink" title="What is Graph Traversal?"></a>What is Graph Traversal?</h3><p>Graph traversal refers to the process of visiting each vertex in a graph.</p><h3 id="Types-of-Graph-Traversal"><a href="#Types-of-Graph-Traversal" class="headerlink" title="Types of Graph Traversal"></a>Types of Graph Traversal</h3><ul><li>Breadth First Search(BFS)</li><li>Depth First Search(DFS)</li></ul><h1 id="Breadth-First-Search-BFS"><a href="#Breadth-First-Search-BFS" class="headerlink" title="Breadth First Search(BFS)"></a>Breadth First Search(BFS)</h1><p>BFS is an algorithm for traversing Graph data structures. It starts at some arbitrary node of a graph and explores the neighbor nodes(which are at current level) first, before moving to the next level neighbors.</p><h3 id="Handling-one-Special-Scenario-of-BFS"><a href="#Handling-one-Special-Scenario-of-BFS" class="headerlink" title="Handling one Special Scenario of BFS"></a>Handling one Special Scenario of BFS</h3><ul><li>Disconnected Graph<ul><li>Cannot traverse the graph with BFS. Because the vertecis are disconneted with each other.</li></ul></li></ul><h3 id="Time-Complexity-BFS"><a href="#Time-Complexity-BFS" class="headerlink" title="Time Complexity - BFS"></a>Time Complexity - BFS</h3><ul><li>Time Complexity - O(V+E)</li><li>Space Complexity - O(V+E)</li></ul><br><h1 id="Depth-First-Search-DFS"><a href="#Depth-First-Search-DFS" class="headerlink" title="Depth First Search(DFS)"></a>Depth First Search(DFS)</h1><p>DFS is an algorithm for traversing Graph data structures. It starts selecting some arbitrary node and explores as far as possible along each edge before backtracking.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">class Graph &#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        this.adjacencyList &#x3D; &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    addVertex(vertex)&#123;</span><br><span class="line">        if(!this.adjacencyList[vertex]) this.adjacencyList[vertex] &#x3D; [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addEdge(vertex1, vertex2)&#123;</span><br><span class="line">        if(this.adjacencyList[vertex1])&#123;</span><br><span class="line">            this.adjacencyList[vertex1].push(vertex2);</span><br><span class="line">        &#125;</span><br><span class="line">        if(this.adjacencyList[vertex2])&#123;</span><br><span class="line">            this.adjacencyList[vertex2].push(vertex1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    removeEdge(v1, v2)&#123;</span><br><span class="line">        if(this.adjacencyList[v1].includes(v2))&#123;</span><br><span class="line">            this.adjacencyList[v1] &#x3D; this.adjacencyList[v1].filter( v &#x3D;&gt; v !&#x3D;&#x3D; v2);</span><br><span class="line">        &#125;</span><br><span class="line">        if(this.adjacencyList[v2].includes(v1))&#123;</span><br><span class="line">            this.adjacencyList[v2] &#x3D; this.adjacencyList[v2].filter( v &#x3D;&gt; v !&#x3D;&#x3D; v1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    removeVertex(vertex)&#123;</span><br><span class="line">        while(this.adjacencyList[vertex].length)&#123;</span><br><span class="line">            const adjacentVertex &#x3D; this.adjacencyList[vertex].pop();</span><br><span class="line">            this.removeEdge(vertex, adjacentVertex);</span><br><span class="line">        &#125;</span><br><span class="line">        delete this.adjacencyList[vertex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    depthFirstRecursive(start)&#123;</span><br><span class="line">        const result &#x3D; [];</span><br><span class="line">        const visited &#x3D; &#123;&#125;;</span><br><span class="line">        const adjacencyList &#x3D; this.adjacencyList;</span><br><span class="line"></span><br><span class="line">        (function dfs(vertex)&#123;</span><br><span class="line">            if(!vertex) return null;</span><br><span class="line">            visited[vertex] &#x3D; true;</span><br><span class="line">            result.push(vertex);</span><br><span class="line">            adjacencyList[vertex].forEach(neighbor &#x3D;&gt; &#123;</span><br><span class="line">                if(!visited[neighbor])&#123;</span><br><span class="line">                    return dfs(neighbor);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)(start);</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    depthFirstIterative(start)&#123;</span><br><span class="line">        const stack &#x3D; [start];</span><br><span class="line">        const result &#x3D; [];</span><br><span class="line">        const visited &#x3D; &#123;&#125;;</span><br><span class="line">        let currentVertex;</span><br><span class="line"></span><br><span class="line">        visited[start] &#x3D; true;</span><br><span class="line">        while(stack.length)&#123;</span><br><span class="line">            currentVertex &#x3D; stack.pop();</span><br><span class="line">            result.push(currentVertex);</span><br><span class="line"></span><br><span class="line">            this.adjacencyList[currentVertex].forEach(neighbor &#x3D;&gt; &#123;</span><br><span class="line">                if(!visited[neighbor])&#123;</span><br><span class="line">                    visited[neighbor] &#x3D; true;</span><br><span class="line">                    stack.push(neighbor);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let g &#x3D; new Graph();</span><br><span class="line"></span><br><span class="line">g.addVertex(&quot;A&quot;)</span><br><span class="line">g.addVertex(&quot;B&quot;)</span><br><span class="line">g.addVertex(&quot;C&quot;)</span><br><span class="line">g.addVertex(&quot;D&quot;)</span><br><span class="line">g.addVertex(&quot;E&quot;)</span><br><span class="line">g.addVertex(&quot;F&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g.addEdge(&quot;A&quot;, &quot;B&quot;)</span><br><span class="line">g.addEdge(&quot;A&quot;, &quot;C&quot;)</span><br><span class="line">g.addEdge(&quot;B&quot;,&quot;D&quot;)</span><br><span class="line">g.addEdge(&quot;C&quot;,&quot;E&quot;)</span><br><span class="line">g.addEdge(&quot;D&quot;,&quot;E&quot;)</span><br><span class="line">g.addEdge(&quot;D&quot;,&quot;F&quot;)</span><br><span class="line">g.addEdge(&quot;E&quot;,&quot;F&quot;)</span><br><span class="line">g.depthFirstRecursive(&quot;A&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;          A</span><br><span class="line">&#x2F;&#x2F;        &#x2F;   \</span><br><span class="line">&#x2F;&#x2F;       B     C</span><br><span class="line">&#x2F;&#x2F;       |     |</span><br><span class="line">&#x2F;&#x2F;       D --- E</span><br><span class="line">&#x2F;&#x2F;        \   &#x2F;</span><br><span class="line">&#x2F;&#x2F;          F</span><br></pre></td></tr></table></figure><p>출처 : “Data Structures &amp; Algorithms” by DS GUY</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;graph traversal&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Graph</title>
    <link href="http://jbj828.github.io/2020/04/01/Al-graph/"/>
    <id>http://jbj828.github.io/2020/04/01/Al-graph/</id>
    <published>2020-04-01T06:30:25.000Z</published>
    <updated>2020-04-02T04:37:45.234Z</updated>
    
    <content type="html"><![CDATA[<p>graph</p><a id="more"></a><h3 id="What-is-Graph"><a href="#What-is-Graph" class="headerlink" title="What is Graph?"></a>What is Graph?</h3><ul><li>Graph is a pair of sets(V,E), where V is the set of vertices and E is the set of edges, connecting the pairs of vertices.</li></ul><h3 id="Some-Terminologies"><a href="#Some-Terminologies" class="headerlink" title="Some Terminologies"></a>Some Terminologies</h3><ul><li>Vertex : Vertex is the node of the graph</li><li>Edges : Edges are the arcs that connect pairs of vertices</li><li>Unweighted Graph : A graph not having a weight associated with any edge</li><li>Weighted Graph : A graph having a weight associated with each edge</li><li>Undirected Graph : It is a graph that is a set of vertices connected by edges, where the edges don’t have a direction associated with them.</li><li>Directed Graph : It is a graph that is a set of vertices connected by edges, where the edges have a direction associated with them.</li><li>Cyclic Graph : A cyclic graph is a graph having at least on loop.</li><li>Acyclic Graph : An Acyclic graph is a graph having no loop.</li><li>Tree : Tree is a special case of Directed Acyclic Graph(DAG).</li></ul><h3 id="Types-of-Graph"><a href="#Types-of-Graph" class="headerlink" title="Types of Graph"></a>Types of Graph</h3><Br><h3 id="How-is-Graph-represented"><a href="#How-is-Graph-represented" class="headerlink" title="How is Graph represented?"></a>How is Graph represented?</h3><ol><li><p><strong>Adjacency Matrix</strong> : In graph theory, an adjacency matrix is a square matrix used to represent a finite graph. The elements of the matrix indicate whether pairs of vertices are adjacent or not in the graph.</p></li><li><p><strong>Adjacency List</strong> : In graph theory, an adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a vertex in the graph.</p></li></ol><h5 id="When-to-use-which-representation"><a href="#When-to-use-which-representation" class="headerlink" title="When to use which representation?"></a>When to use which representation?</h5><ul><li>If the graph is a ‘Complete’ or ‘near to complete’ Graph, then we should use <strong>Adjacency Matrix</strong>.</li><li>If the number of ‘Edges’ are few, then we should use <strong>Adjacency List</strong>.</li></ul><p>출처 : “Data Structures &amp; Algorithms” by DS GUY</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;graph&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Sorting - Quick Sort</title>
    <link href="http://jbj828.github.io/2020/03/31/Al-sort-quick-sort/"/>
    <id>http://jbj828.github.io/2020/03/31/Al-sort-quick-sort/</id>
    <published>2020-03-31T13:30:25.000Z</published>
    <updated>2020-04-01T03:43:28.654Z</updated>
    
    <content type="html"><![CDATA[<p>quick sort</p><a id="more"></a><h2 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h2><ul><li>Quick Sort is Divide and Conquer algorithm.</li><li>At each step it finds ‘Pivot’ and then makes sure that all the smaller elements are on the left of ‘Pivot’ and all the bigger elements are on the right side of ‘Pivot’.</li><li>It does this recursively until the entire array is sorted.</li><li>Unlike Merge Sort, it does not requires any external space.</li><li>피봇값을 기준으로 피봇 앞에는 피봇보다 작은 값, 뒤에는 큰 값이 오도록 하여 리스트를 분할하고, 분할된 두 개 리스트 각각에 재귀적으로 이 과정을 반복해 정렬을 완성. 합병정렬과 달리 주어진 배열을 임의로 나누지 않기 때문에 대개는 효율적이지만, 피봇값이 잘못 선택되면 O(n2)이 될 수도 있음.</li></ul><h3 id="Time-amp-Space-Complexity"><a href="#Time-amp-Space-Complexity" class="headerlink" title="Time &amp; Space Complexity"></a>Time &amp; Space Complexity</h3><ul><li>Time Complexity - O(n log n)</li><li>Space Complexity - O(n) : system이 모든 요소를 stack에 넣고 pop 할 경우</li></ul><h3 id="When-to-Use-Avoid-Quick-Sort"><a href="#When-to-Use-Avoid-Quick-Sort" class="headerlink" title="When to Use/Avoid Quick Sort"></a>When to Use/Avoid Quick Sort</h3><ul><li><p>When to use:</p><ul><li>When average expected time is O(n log n)</li></ul></li><li><p>When not to use:</p><ul><li>When space is a concern like embedded systems</li><li>When stable sort is required</li></ul></li></ul><h3 id="Coding-Quick-Sort-on-Javascript"><a href="#Coding-Quick-Sort-on-Javascript" class="headerlink" title="Coding Quick Sort on Javascript"></a>Coding Quick Sort on Javascript</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function pivot(arr, start&#x3D;0, end&#x3D;arr.length-1)&#123;</span><br><span class="line">  function swap(array, i, j) &#123;</span><br><span class="line">    var temp &#x3D; array[i];</span><br><span class="line">    array[i] &#x3D; array[j];</span><br><span class="line">    array[j] &#x3D; temp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var pivot &#x3D; arr[start];</span><br><span class="line">  var swapIdx &#x3D; start;</span><br><span class="line"></span><br><span class="line">  for(var i &#x3D; start + 1; i &lt; arr.length; i++)&#123;</span><br><span class="line">    if(pivot &gt; arr[i])&#123;</span><br><span class="line">      swapIdx++;</span><br><span class="line">      swap(arr,swapIdx,i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  swap(arr,start,swapIdx);</span><br><span class="line">  return swapIdx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function quickSort(arr, left&#x3D;0, right&#x3D;arr.length-1)&#123;</span><br><span class="line">  if(left &lt; right)&#123;</span><br><span class="line">    let pivotIndex &#x3D; pivot(arr, left, right);</span><br><span class="line">    &#x2F;&#x2F;left</span><br><span class="line">    quickSort(arr, left, pivotIndex-1);</span><br><span class="line">    &#x2F;&#x2F;right</span><br><span class="line">    quickSort(arr, pivotIndex+1, right);</span><br><span class="line">  &#125;</span><br><span class="line">  return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>출처 : “Data Structures &amp; Algorithms” by DS GUY</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;quick sort&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Sorting - Merge Sort</title>
    <link href="http://jbj828.github.io/2020/03/31/Al-sort-merge-sort/"/>
    <id>http://jbj828.github.io/2020/03/31/Al-sort-merge-sort/</id>
    <published>2020-03-31T05:30:25.000Z</published>
    <updated>2020-03-31T13:08:09.066Z</updated>
    
    <content type="html"><![CDATA[<p>merge sort</p><a id="more"></a><h2 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h2><ul><li>Merge Sort is a Divide and Conquer algorithm.</li><li>It divides input array in two halves, keeps breaking those 2 halves recursively until they become too small to be broken further.</li><li>Then each of the broken pieces are merged together to inch towards final answer.</li><li>리스트를 잘게 쪼갠 뒤 둘씩 크기를 비교해 정렬하고 분리된 리스트를 재귀적으로 합쳐서 정렬을 완성, 분할된 리스트를 저장해둘 공간이 필요해 메모리 소모량이 큰 편</li></ul><h3 id="Time-amp-Space-Complexity"><a href="#Time-amp-Space-Complexity" class="headerlink" title="Time &amp; Space Complexity"></a>Time &amp; Space Complexity</h3><ul><li>Time Complexity - O(n log n)</li><li>Space Complexity - O(n)</li></ul><h3 id="When-to-Use-Avoid-Merge-Sort"><a href="#When-to-Use-Avoid-Merge-Sort" class="headerlink" title="When to Use/Avoid Merge Sort"></a>When to Use/Avoid Merge Sort</h3><ul><li><p>When to use:</p><ul><li>When you need a <code>stable sort</code></li><li>When average expected time is O(n log n)</li></ul></li><li><p>When not to use:</p><ul><li>When space is a concern like embedded systems</li></ul></li></ul><h3 id="Coding-Merge-Sort-on-Javascript"><a href="#Coding-Merge-Sort-on-Javascript" class="headerlink" title="Coding Merge Sort on Javascript"></a>Coding Merge Sort on Javascript</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">function merge(arr1, arr2)&#123;</span><br><span class="line">    let result &#x3D; [];</span><br><span class="line">    let i &#x3D; 0;</span><br><span class="line">    let j &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    while( i &lt; arr1.length &amp;&amp; j &lt; arr2.length)&#123;</span><br><span class="line">        if(arr1[i] &lt; arr2[j])&#123;</span><br><span class="line">            result.push(arr1[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result.push(arr2[j]);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while( i &lt; arr1.length)&#123;</span><br><span class="line">        result.push(arr1[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    while( j &lt; arr2.length)&#123;</span><br><span class="line">        result.push(arr2[j]);</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function mergeSort(arr)&#123;</span><br><span class="line">    if(arr.length &lt;&#x3D; 1) return arr;</span><br><span class="line">    let mid &#x3D; Math.floor(arr.length &#x2F;2);</span><br><span class="line">    let left &#x3D; mergeSort(arr.slice(0, mid));</span><br><span class="line">    let right &#x3D; mergeSort(arr.slice(mid));</span><br><span class="line">    return merge(left, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>출처 : “Data Structures &amp; Algorithms” by DS GUY</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;merge sort&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Sorting - Insertion Sort / Bucket Sort</title>
    <link href="http://jbj828.github.io/2020/03/31/Al-hashing-Insertion-sort/"/>
    <id>http://jbj828.github.io/2020/03/31/Al-hashing-Insertion-sort/</id>
    <published>2020-03-30T15:30:25.000Z</published>
    <updated>2020-03-31T03:49:41.268Z</updated>
    
    <content type="html"><![CDATA[<p>insertion sort / bucket sort</p><a id="more"></a><h2 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h2><ul><li><p>In Insertion sort algorithm we divide the given array into 2 parts. Sorted &amp; Unsorted.</p></li><li><p>Then from Unsorted, we pick the first element and find its correct position in sorted array.</p></li><li><p>Repeat till Unsorted array is empty.</p></li><li><p>모든 요소에 대해 앞에서부터 차례대로 이미 정렬된 배열(sorted list)과 비교하여 sorted list내 자신의 위치를 찾아 삽입함으로써 정렬을 완성, 입력데이터가 이미 정렬된 상태라면 O(n)의 빠른 속도를 보이지만 그렇지 않은 경우 다른 기법을 적용하는 것이 나음.</p></li></ul><h3 id="Time-amp-Space-Complexity"><a href="#Time-amp-Space-Complexity" class="headerlink" title="Time &amp; Space Complexity"></a>Time &amp; Space Complexity</h3><ul><li>Time Complexity - O(n2)</li><li>Space Complexity - O(1)</li></ul><h3 id="When-to-Use-Avoid-Insertion-Sort"><a href="#When-to-Use-Avoid-Insertion-Sort" class="headerlink" title="When to Use/Avoid Insertion Sort"></a>When to Use/Avoid Insertion Sort</h3><ul><li><p>When to use:</p><ul><li>No extra space</li><li>Simple implementation</li><li>Best when we have continuous inflow of numbers and we want to keep the list shorted</li></ul></li><li><p>When to avoid:</p><ul><li>Average case is bad</li></ul></li></ul><h3 id="Coding-Insertion-Sort"><a href="#Coding-Insertion-Sort" class="headerlink" title="Coding Insertion Sort"></a>Coding Insertion Sort</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package sorting;</span><br><span class="line"></span><br><span class="line">public class InsertionSort &#123;</span><br><span class="line"></span><br><span class="line">static void insertionSort(int [] A) &#123;</span><br><span class="line"> for(int  i &#x3D; 1 ; i&lt;A.length;i++) &#123;  </span><br><span class="line"> int  tmp&#x3D;A[i], j&#x3D;i;</span><br><span class="line">     while ( j&gt;0 &amp;&amp; A[j-1]&gt;tmp ) &#123;</span><br><span class="line">        A[j]&#x3D;A[j-1];</span><br><span class="line">        j--;</span><br><span class="line">     &#125;</span><br><span class="line">     A[j] &#x3D; tmp;</span><br><span class="line"> &#125;&#x2F;&#x2F;end of for loop</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void printArray(int []array) &#123;</span><br><span class="line">for (int i &#x3D; 0; i &lt; array.length; i++) &#123;</span><br><span class="line">System.out.print(array[i]+&quot;  &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F;end of class</span><br></pre></td></tr></table></figure><br><h2 id="Bucket-Sort"><a href="#Bucket-Sort" class="headerlink" title="Bucket Sort"></a>Bucket Sort</h2><ul><li>Bucket sort is a sorting algorithm that works by distributing the elements of an array into a number of buckets.</li><li>Each bucket is then sorted individually.</li><li>데이터를 루트에 넣었을 때 나온 값의 개수만큼 버킷을 두어 데이터를 나누고 버킷별로 정렬한 후 합쳐 정렬을 완성, 데이터 분포가 균등할 경우 계산복잡성을 낮출 수 있으나 그 반대의 경우 효과를 기대하기 어려울 수 있음</li></ul><h3 id="Bucket-Sort-Algorithm"><a href="#Bucket-Sort-Algorithm" class="headerlink" title="Bucket Sort Algorithm"></a>Bucket Sort Algorithm</h3><ul><li>Create Number of buckets = ceil/floor(squareroot of total number of items)</li><li>Iterate through each number and place it in appropriate bucket</li><li>Appropriate bucket = Ceil((Value * number of buckets) / max value in array)</li><li>Sort all the buckets(Using <code>Quick Sort</code> is the best for time complexity)</li><li>Merge all the buckets</li></ul><h3 id="Time-amp-Space-Complexity-1"><a href="#Time-amp-Space-Complexity-1" class="headerlink" title="Time &amp; Space Complexity"></a>Time &amp; Space Complexity</h3><ul><li>Time Complexity - O(n log n)</li><li>Space Complexity - O(n)</li></ul><h3 id="When-to-Use-Avoid-Bucket-sort"><a href="#When-to-Use-Avoid-Bucket-sort" class="headerlink" title="When to Use / Avoid Bucket sort"></a>When to Use / Avoid Bucket sort</h3><ul><li><p>When to use:</p><ul><li>When input is uniformly distributed over a range</li></ul></li><li><p>When not to use</p><ul><li>When space is a concern</li></ul></li></ul><h3 id="Coding-Bucket-Sort"><a href="#Coding-Bucket-Sort" class="headerlink" title="Coding Bucket Sort"></a>Coding Bucket Sort</h3><p>BucketSort.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collections;</span><br><span class="line"></span><br><span class="line">public class BucketSort &#123;</span><br><span class="line"></span><br><span class="line">    int arr[];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; constructor</span><br><span class="line">    public BucketSort(int arr[])&#123;</span><br><span class="line">        this.arr &#x3D; arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Prints Array</span><br><span class="line">    public void printArray()&#123;</span><br><span class="line">        int tmp &#x3D; 0;</span><br><span class="line">        for(int i &#x3D; 0; i &lt; arr.length; i++)&#123;</span><br><span class="line">            System.out.println(arr[i] + &quot; &quot;);</span><br><span class="line">            tmp++;</span><br><span class="line">            if(tmp &#x3D;&#x3D; 20)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">                tmp &#x3D; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Prints Buckets</span><br><span class="line">    public void printBucket(ArrayList&lt;Integer&gt;[] buckets)&#123;</span><br><span class="line">        for(int i &#x3D; 0; i &lt; buckets.length; i++)&#123;</span><br><span class="line">            System.out.println(&quot;\nBucket#&quot; + i + &quot;: &quot;);</span><br><span class="line">            for(int j &#x3D; 0; j&lt; buckets[i].size(); j++)&#123;</span><br><span class="line">                System.out.println(buckets[i].get(j) + &quot; &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Sorting Method</span><br><span class="line">    public void bucketSort()&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Create sqrt# of buckets, so that the distribution is even</span><br><span class="line">        int numberOfBuckets &#x3D; (int) Math.ceil(Math.sqrt(arr.length));</span><br><span class="line">        int maxValue &#x3D; Integer.MIN_VALUE;</span><br><span class="line">        int minValue &#x3D; Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Find the min and max value from the array</span><br><span class="line">        for(int value : arr)&#123;</span><br><span class="line">            if(value &lt; minValue)&#123;</span><br><span class="line">                minValue &#x3D; value;</span><br><span class="line">            &#125; else if( value &gt; maxValue)&#123;</span><br><span class="line">                maxValue &#x3D; value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Create an Array of Buckets</span><br><span class="line">        ArrayList&lt;Integer&gt;[] buckets &#x3D; new ArrayList[numberOfBuckets];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; initializing empty buckets</span><br><span class="line">        for(int i &#x3D; 0; i &lt; buckets.length; i++)&#123;</span><br><span class="line">            buckets[i] &#x3D; new ArrayList&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int value : arr)&#123;</span><br><span class="line">            int bucketNumber &#x3D; (int) Math.ceil((value * numberOfBuckets) &#x2F; maxValue);</span><br><span class="line">            buckets[bucketNumber -1].add(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;Printing buckets before sorting&quot;);</span><br><span class="line">        printBucket(buckets);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Sort Buckets</span><br><span class="line">        for(ArrayList&lt;Integer&gt; bucket: buckets)&#123;</span><br><span class="line">            Collections.sort(bucket);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n\nPrinting buckets after sorting&quot;);</span><br><span class="line">        printBucket(buckets);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Concatenate buckets</span><br><span class="line">        int index &#x3D; 0;</span><br><span class="line">        for(ArrayList&lt;Integer&gt; bucket: buckets)&#123;</span><br><span class="line">            for(int value:bucket)&#123;</span><br><span class="line">                arr[index] &#x3D; value;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line"></span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        int arr[] &#x3D; new int[100];</span><br><span class="line">        &#x2F;&#x2F;Generating 100 random numbers in the range of 0-100</span><br><span class="line">        Random random &#x3D; new Random();</span><br><span class="line">        for(int i&#x3D;0;i&lt;100;i++) &#123;</span><br><span class="line">            arr[i] &#x3D; random.nextInt(100)+100;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;Passing this array to BucketSort method</span><br><span class="line">        BucketSort bs &#x3D; new BucketSort(arr);</span><br><span class="line">        System.out.println(&quot;Array before Sorting: &quot;);</span><br><span class="line">        bs.printArray();</span><br><span class="line">        bs.bucketSort();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;\n\nArray after Sorting: &quot;);</span><br><span class="line">        bs.printArray();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>출처 : “Data Structures &amp; Algorithms” by DS GUY</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;insertion sort / bucket sort&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Sorting - Bubble Sort / Selection Sort</title>
    <link href="http://jbj828.github.io/2020/03/30/Al-Sorting-bubbleSort/"/>
    <id>http://jbj828.github.io/2020/03/30/Al-Sorting-bubbleSort/</id>
    <published>2020-03-30T02:30:25.000Z</published>
    <updated>2020-03-30T02:49:08.640Z</updated>
    
    <content type="html"><![CDATA[<p>bubble sort / selection sort</p><a id="more"></a><h3 id="What-is-Bubble-Sort"><a href="#What-is-Bubble-Sort" class="headerlink" title="What is Bubble Sort?"></a>What is Bubble Sort?</h3><ul><li>Bubble sort, sometimes is also referred as Sinking sort.</li><li>Repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order.</li><li>주어진 배열의 마지막 위치에 있는 요소를, 정렬되지 않은 직전 요소부터 첫 요소에 이르기까지 비교해 정렬 순서가 맞지 않은 모든 case에 대해 요소 위치를 바꿔줌. 이를 요소 수만큼 반복. 가장 간단하지만 비효율적인 알고리즘.</li></ul><h3 id="Time-amp-Space-Complexity"><a href="#Time-amp-Space-Complexity" class="headerlink" title="Time &amp; Space Complexity"></a>Time &amp; Space Complexity</h3><ul><li>Time Complexity - O(n2)</li><li>Space Complexity - O(1)</li></ul><h3 id="When-to-use-avoid"><a href="#When-to-use-avoid" class="headerlink" title="When to use/avoid"></a>When to use/avoid</h3><ul><li><p>When to use:</p><ul><li>When input is already sorted</li><li>Space is a concern</li><li>Easy to implement</li></ul></li><li><p>When to avoid:</p><ul><li>Average case time complexity is poor</li></ul></li></ul><h3 id="Coding-Bubble-Sort"><a href="#Coding-Bubble-Sort" class="headerlink" title="Coding Bubble Sort"></a>Coding Bubble Sort</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package sorting;</span><br><span class="line"></span><br><span class="line">public class BubbleSort &#123;</span><br><span class="line"></span><br><span class="line">void bubbleSort(int arr[]) &#123;</span><br><span class="line">int n &#x3D; arr.length;</span><br><span class="line">for (int i &#x3D; 0; i &lt; n - 1; i++) &#x2F;&#x2F;run from first cell to last cell</span><br><span class="line">for (int j &#x3D; 0; j &lt; n - i - 1; j++) &#x2F;&#x2F;run from first cell to &quot;last cell - iteration&quot;</span><br><span class="line">if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line">int temp &#x3D; arr[j];</span><br><span class="line">arr[j] &#x3D; arr[j + 1];</span><br><span class="line">arr[j + 1] &#x3D; temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* Prints the array *&#x2F;</span><br><span class="line">void printArray(int arr[]) &#123;</span><br><span class="line">int n &#x3D; arr.length;</span><br><span class="line">for (int i &#x3D; 0; i &lt; n; ++i)</span><br><span class="line">System.out.print(arr[i] + &quot; &quot;);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F; end of class</span><br></pre></td></tr></table></figure><br><h3 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h3><ul><li>The Selection sort algorithm is based on the idea of finding the minimum or maximum element in an unsorted array and then putting it in its correct position in a sorted array.</li><li>요소 위치 변경 횟수를 줄여 버블정렬을 일부 개선한 알고리즘. 정렬 순서가 맞지 않으면 무조건 자리를 바꿔줬던 버블정렬과 달리, 1회 iteration마다 최소값(혹은 최대값)을 찾고 단 한번만 해당 요소 위치를 바꿔줌.</li></ul><h3 id="Time-amp-Space-Complexity-1"><a href="#Time-amp-Space-Complexity-1" class="headerlink" title="Time &amp; Space Complexity"></a>Time &amp; Space Complexity</h3><ul><li>Time Complexity - O(n2)</li><li>Space Complexity - O(1)</li></ul><h3 id="When-to-use-avoid-1"><a href="#When-to-use-avoid-1" class="headerlink" title="When to use/avoid"></a>When to use/avoid</h3><ul><li><p>When to use:</p><ul><li>When we don’t have additional memory</li><li>Easy to implement</li></ul></li><li><p>When to avoid:</p><ul><li>Average case time complexity is poor</li></ul></li></ul><h3 id="Coding-Selection-Sort"><a href="#Coding-Selection-Sort" class="headerlink" title="Coding Selection Sort"></a>Coding Selection Sort</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line"></span><br><span class="line">public class SelectionSort &#123;</span><br><span class="line"></span><br><span class="line">    void selectionSort(int arr[])&#123;</span><br><span class="line"></span><br><span class="line">        for(int i &#x3D; 0; i &lt; arr.length; i++)&#123;</span><br><span class="line">            int minimumIndex &#x3D; i;</span><br><span class="line">            for(int j &#x3D; i+1; j &lt; arr.length; j++)&#123;</span><br><span class="line">                if(arr[j] &lt; arr[minimumIndex])&#123;</span><br><span class="line">                    minimumIndex &#x3D; j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(minimumIndex !&#x3D; i)&#123;</span><br><span class="line">                int temp &#x3D; arr[i];</span><br><span class="line">                arr[i] &#x3D; arr[minimumIndex];</span><br><span class="line">                arr[minimumIndex] &#x3D; temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void printArray(int arr[])&#123;</span><br><span class="line">        for(int i &#x3D;0; i &lt; arr.length; i++)&#123;</span><br><span class="line">            System.out.println(arr[i] + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>출처 : “Data Structures &amp; Algorithms” by DS GUY</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;bubble sort / selection sort&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Sorting</title>
    <link href="http://jbj828.github.io/2020/03/30/Al-sorting2/"/>
    <id>http://jbj828.github.io/2020/03/30/Al-sorting2/</id>
    <published>2020-03-29T15:30:25.000Z</published>
    <updated>2020-04-01T03:42:35.552Z</updated>
    
    <content type="html"><![CDATA[<p>sorting</p><a id="more"></a><h3 id="What-is-Sorting"><a href="#What-is-Sorting" class="headerlink" title="What is Sorting?"></a>What is Sorting?</h3><p>Sorting refers to arranging data in a particular format : either ascending or descending</p><h3 id="Types-of-Sorting"><a href="#Types-of-Sorting" class="headerlink" title="Types of Sorting"></a>Types of Sorting</h3><img src="/2020/03/30/Al-sorting2/sorting1.PNG" class="" width="500" height="500" title="Types-of-sorting"><br><h3 id="In-Place-vs-Out-Place-Sorting"><a href="#In-Place-vs-Out-Place-Sorting" class="headerlink" title="In-Place vs Out-Place Sorting"></a>In-Place vs Out-Place Sorting</h3><p>입력리스트 내부에서 정렬이 이뤄지는 경우를 가리킵니다. 반대는 정렬 도중에 별도 저장공간을 필요로 하는 경우입니다. 합병정렬의 경우 입력리스트를 분할해 이를 정렬하고 다시 합치는 과정에서 분할된 리스트를 별도로 저장해 두어야 합니다. 카운팅정렬과 래딕스정렬은 입력값의 빈도를 세어서 저장해 두는 변수, 결과리스트를 저장해 둘 변수가 필요합니다. 버킷정렬은 버킷이라는 변수를 만들 공간이 있어야 합니다.</p><h5 id="In-Place-Sort"><a href="#In-Place-Sort" class="headerlink" title="In-Place Sort:"></a>In-Place Sort:</h5><ul><li>Sorting algorithms which does not require any extra space for sorting.</li><li>Example - Bubble Sort</li></ul><h5 id="Out-Place-Sort"><a href="#Out-Place-Sort" class="headerlink" title="Out-Place Sort:"></a>Out-Place Sort:</h5><ul><li>Sorting algorithms which requires extra space for sorting</li><li>Example - Merge sort</li></ul><br><h3 id="Stable-vs-Unstable-Sorting"><a href="#Stable-vs-Unstable-Sorting" class="headerlink" title="Stable vs Unstable Sorting"></a>Stable vs Unstable Sorting</h3><h5 id="Stable-Sort"><a href="#Stable-Sort" class="headerlink" title="Stable Sort:"></a>Stable Sort:</h5><ul><li>If a Sorting algorithm after sorting the contents <strong>does not change the sequence</strong> of similar content in which they appear, is called Stable sorting.</li><li>Example - Insertion sort</li></ul><h5 id="Unstable-Sort"><a href="#Unstable-Sort" class="headerlink" title="Unstable Sort:"></a>Unstable Sort:</h5><ul><li>If a sorting algorithm after sorting the contents, <strong>changes the sequence</strong> of similar content in which they appear, it is called Unstable sorting.</li><li>Example - Quick Sort</li></ul><br><h3 id="Why-“Stable-Sort”-is-important"><a href="#Why-“Stable-Sort”-is-important" class="headerlink" title="Why “Stable Sort” is important?"></a>Why “Stable Sort” is important?</h3><ul><li>Scenarios where ‘sort key’ is not the entire identity of the item.</li><li>Consider a person object with a name and a Age. Let’s say we sorted based on their name. If we were to then sort by age in a stable way, we’d guarentee that our original ordering would be preserved for people with the same age.</li><li>‘group by’ clauses of Database uses this concept very heavily.</li></ul><br><h3 id="Few-Terminologies"><a href="#Few-Terminologies" class="headerlink" title="Few Terminologies"></a>Few Terminologies</h3><ul><li><p>Increasing Order</p><ul><li>If successive element is greater than previous one.</li><li>ex) 1,3,4,6,8,9</li></ul></li><li><p>Decreasing Order</p><ul><li>If successive element is less than current one.</li><li>ex) 9,8,6,4,3,1</li></ul></li><li><p>Non-Increasing Order</p><ul><li>If successive element is less than or equal to its previous element in the sequence. This order occurs when the sequence contains duplicate values.</li><li>ex) 9,8,6,3,3,1</li></ul></li><li><p>Non-Decreasing Order</p><ul><li>If the successive element is greater than or equals to its previous element in the sequence. This order occurs when the sequence contains duplicate values.</li><li>ex) 1,3,3,6,8,9</li></ul></li></ul><h3 id="Sorting-Algorithms-Compared"><a href="#Sorting-Algorithms-Compared" class="headerlink" title="Sorting Algorithms Compared"></a>Sorting Algorithms Compared</h3><img src="/2020/03/30/Al-sorting2/compareSort.PNG" class="" width="500" height="500" title="Compare Sorting Algorithms"><br><p>출처 : “Data Structures &amp; Algorithms” by DS GUY</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sorting&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Hashing - Double Probing</title>
    <link href="http://jbj828.github.io/2020/03/29/Al-hashing-double-hashing/"/>
    <id>http://jbj828.github.io/2020/03/29/Al-hashing-double-hashing/</id>
    <published>2020-03-29T12:30:25.000Z</published>
    <updated>2020-03-29T14:06:14.413Z</updated>
    
    <content type="html"><![CDATA[<p>hashing - double probing</p><a id="more"></a><p>DoubleProbing.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">public class DoubleHashing &#123;</span><br><span class="line">    String[] hashTable;</span><br><span class="line">    int noOfCellsUsedInHashTable;</span><br><span class="line"></span><br><span class="line">    DoubleHashing()&#123;</span><br><span class="line">        hashTable &#x3D; new String[13];</span><br><span class="line">        noOfCellsUsedInHashTable &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; hash function to be used on keys</span><br><span class="line">    public int simpleASCIIHashFunction(String x, int M)&#123;</span><br><span class="line">        char[] ch;</span><br><span class="line">        ch &#x3D; x.toCharArray();</span><br><span class="line">        int i, sum;</span><br><span class="line">        for(i &#x3D; 0, sum &#x3D; 0; i &lt; x.length(); i++)&#123;</span><br><span class="line">            sum +&#x3D; ch[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;Index from Hash Function : &quot; + sum%M);</span><br><span class="line">        return sum % M;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 2nd Hash Function</span><br><span class="line">    int secondHashFunction(String x, int M)&#123;</span><br><span class="line">        char[] ch;</span><br><span class="line">        ch &#x3D; x.toCharArray();</span><br><span class="line">        int i, sum;</span><br><span class="line">        for(i &#x3D; 0, sum &#x3D; 0; i &lt; x.length(); i++)&#123;</span><br><span class="line">            sum +&#x3D; ch[i];</span><br><span class="line">        &#125;</span><br><span class="line">        while(sum &gt; 13)&#123;</span><br><span class="line">            sum &#x3D; addAllTheDigitsTogether(sum);</span><br><span class="line">        &#125;</span><br><span class="line">        return sum % M;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int addAllTheDigitsTogether(int sum)&#123;</span><br><span class="line">        int value &#x3D; 0;</span><br><span class="line">        while(sum &gt; 0)&#123;</span><br><span class="line">            value &#x3D; sum % 10;</span><br><span class="line">            sum &#x3D; sum &#x2F; 10;</span><br><span class="line">        &#125;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; get Load Factor</span><br><span class="line">    public double getLoadFactor()&#123;</span><br><span class="line">        double loadFactor &#x3D; noOfCellsUsedInHashTable * 1.0 &#x2F; hashTable.length;</span><br><span class="line">        return loadFactor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Insert key in Hash Table</span><br><span class="line">    public void insertKeyInHashTable(String value)&#123;</span><br><span class="line">        double loadFactor &#x3D; getLoadFactor();</span><br><span class="line">        if(loadFactor &gt;&#x3D; 0.75)&#123;</span><br><span class="line">            System.out.println(&quot;Load Factor of this hash table is over 0.75. We need to rehash!! &quot;);</span><br><span class="line">            rehashKeys(value);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            int firstHashResult &#x3D; simpleASCIIHashFunction(value, hashTable.length);</span><br><span class="line">            int secondHashResult &#x3D; secondHashFunction(value, hashTable.length);</span><br><span class="line"></span><br><span class="line">            for(int i &#x3D; 0; i &lt; hashTable.length; i++)&#123;</span><br><span class="line">                int index &#x3D; (firstHashResult + (i * secondHashResult)) % hashTable.length;</span><br><span class="line">                if(hashTable[index] &#x3D;&#x3D; null)&#123;</span><br><span class="line">                    hashTable[index] &#x3D; value;</span><br><span class="line">                    System.out.println(&quot;Succeed in inserting value on the hash table&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(&quot;Cannot insert the value on the index of &quot; + index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        noOfCellsUsedInHashTable++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Creates a new hash table and rehashing</span><br><span class="line">    public void rehashKeys(String newString)&#123;</span><br><span class="line">        noOfCellsUsedInHashTable &#x3D; 0;</span><br><span class="line">        ArrayList&lt;String&gt; data &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">        for(String s : hashTable)&#123;</span><br><span class="line">            if(s !&#x3D; null)&#123;</span><br><span class="line">                data.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        data.add(newString);</span><br><span class="line">        hashTable &#x3D; new String[hashTable.length * 2];</span><br><span class="line">        for(String s : data)&#123;</span><br><span class="line">            insertKeyInHashTable(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Search for a given key in hash table</span><br><span class="line">    public boolean searchKeyInHashTable(String value)&#123;</span><br><span class="line">        int index &#x3D; simpleASCIIHashFunction(value, hashTable.length);</span><br><span class="line">            for(int i &#x3D; index; i &lt; index + hashTable.length; i++)&#123;</span><br><span class="line">                int newIndex &#x3D; i % hashTable.length;</span><br><span class="line">                if(hashTable[newIndex] &#x3D;&#x3D; value)&#123;</span><br><span class="line">                    System.out.println(&quot;Found the value!!&quot;);</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        System.out.println(&quot;Cannot find the value&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Delete Key from Hash Table</span><br><span class="line">    public void deleteKeyFromHashTable(String value)&#123;</span><br><span class="line">        int index &#x3D; simpleASCIIHashFunction(value, hashTable.length);</span><br><span class="line"></span><br><span class="line">        for(int i &#x3D; index; i &lt; index + hashTable.length; i++)&#123;</span><br><span class="line">            int newIndex &#x3D; i % hashTable.length;</span><br><span class="line">            if(hashTable[newIndex] !&#x3D; null &amp;&amp; hashTable[newIndex].equals(value))&#123;</span><br><span class="line">                hashTable[newIndex] &#x3D; null;</span><br><span class="line">                System.out.println(&quot;Delete the value on the hash table&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;No value on the hash Table&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Display the hash table</span><br><span class="line">    public void displayTheHashTable()&#123;</span><br><span class="line">        if(hashTable &#x3D;&#x3D; null)&#123;</span><br><span class="line">            System.out.println(&quot;Hash Table is not exist&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i &#x3D; 0; i &lt; hashTable.length; i++)&#123;</span><br><span class="line">            System.out.println(hashTable[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Delete entire hash table</span><br><span class="line">    public void deleteEntireHashTable()&#123;</span><br><span class="line">        hashTable &#x3D; null;</span><br><span class="line">        System.out.println(&quot;Delete the hash table&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hashing - double probing&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Hashing - Quadratic Probing</title>
    <link href="http://jbj828.github.io/2020/03/29/Al-hashing-quadrotic-probing/"/>
    <id>http://jbj828.github.io/2020/03/29/Al-hashing-quadrotic-probing/</id>
    <published>2020-03-29T08:30:25.000Z</published>
    <updated>2020-03-29T14:06:39.430Z</updated>
    
    <content type="html"><![CDATA[<p>Hashing - Quadratic Probing</p><a id="more"></a><p>QuadraticProbing.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">public class QuadraticProbing &#123;</span><br><span class="line"></span><br><span class="line">     String[] hashTable;</span><br><span class="line">     int noOfCellUsedInHashTable;</span><br><span class="line"></span><br><span class="line">     QuadraticProbing()&#123;</span><br><span class="line">         hashTable &#x3D; new String[13];</span><br><span class="line">         noOfCellUsedInHashTable &#x3D; 0;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; Hash Function to be used on keys</span><br><span class="line">    public int simpleASCIIHashFunction(String x, int M)&#123;</span><br><span class="line">         char ch[];</span><br><span class="line">         ch &#x3D; x.toCharArray();</span><br><span class="line">         int sum, i;</span><br><span class="line">         for(i &#x3D; 0, sum &#x3D; 0; i &lt; ch.length; i++)&#123;</span><br><span class="line">             sum +&#x3D; ch[i];</span><br><span class="line">         &#125;</span><br><span class="line">         return sum % M;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Returns load factor of Hash Table</span><br><span class="line">    public double getLoadFactor()&#123;</span><br><span class="line">         double loadFactor &#x3D; noOfCellUsedInHashTable * 1.0 &#x2F; hashTable.length;</span><br><span class="line">         return loadFactor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Insert Key in Hash Table</span><br><span class="line">    public void insertKeyInHashTable(String value)&#123;</span><br><span class="line">         double loadFactor &#x3D; getLoadFactor();</span><br><span class="line">         if(loadFactor &gt;&#x3D; 0.75)&#123;</span><br><span class="line">             System.out.println(&quot;The hash table is full. Rehash the table&quot;);</span><br><span class="line">             rehashing(value);</span><br><span class="line">         &#125; else &#123;</span><br><span class="line">             System.out.println(&quot;Inserting key in Hash Table&quot;);</span><br><span class="line">             int index &#x3D; simpleASCIIHashFunction(value, hashTable.length);</span><br><span class="line">             int counter &#x3D; 0;</span><br><span class="line">             for(int i &#x3D; index; i &lt; index + hashTable.length; i++)&#123;</span><br><span class="line">                 int newIndex &#x3D; (index + (counter*counter)) % hashTable.length;</span><br><span class="line">                 if(hashTable[newIndex] &#x3D;&#x3D; null)&#123;</span><br><span class="line">                     hashTable[newIndex] &#x3D; value;</span><br><span class="line">                     break;</span><br><span class="line">                 &#125; else &#123;</span><br><span class="line">                     System.out.println(&quot;Index is not blank&quot;);</span><br><span class="line">                 &#125;</span><br><span class="line">                 counter++;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         noOfCellUsedInHashTable++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Create a new Hash Table and Rehashing</span><br><span class="line">    public void rehashing(String newString)&#123;</span><br><span class="line">        noOfCellUsedInHashTable &#x3D; 0;</span><br><span class="line">        ArrayList&lt;String&gt; data &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">        for(String s : hashTable)&#123;</span><br><span class="line">            if(s !&#x3D; null)</span><br><span class="line">                data.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        data.add(newString);</span><br><span class="line">        hashTable &#x3D; new String[hashTable.length *2];</span><br><span class="line">        for(String s : data)&#123;</span><br><span class="line">            insertKeyInHashTable(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Search for a given key in Hash Table</span><br><span class="line">    public boolean searchKeyOnHashTable(String key)&#123;</span><br><span class="line"></span><br><span class="line">         int index &#x3D; simpleASCIIHashFunction(key, hashTable.length);</span><br><span class="line">         for(int i &#x3D; index; i &lt; index + hashTable.length; i++)&#123;</span><br><span class="line">             int newIndex &#x3D; i % hashTable.length;</span><br><span class="line">             if(hashTable[newIndex] !&#x3D; null &amp;&amp; hashTable[newIndex].equals(key))&#123;</span><br><span class="line">                 System.out.println(&quot;Found the key!!&quot;);</span><br><span class="line">                 return true;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(&quot;Cannot find the key&quot;);</span><br><span class="line">         return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Delete Key From Hash Table</span><br><span class="line">    public void deleteKeyFromHashTable(String key)&#123;</span><br><span class="line">         int index &#x3D; simpleASCIIHashFunction(key, hashTable.length);</span><br><span class="line"></span><br><span class="line">         for(int i &#x3D; index; i &lt; index + hashTable.length; i++)&#123;</span><br><span class="line">             int newIndex &#x3D; i % hashTable.length;</span><br><span class="line">             if(hashTable[newIndex] !&#x3D; null &amp;&amp; hashTable[newIndex].equals(key))&#123;</span><br><span class="line">                 hashTable[newIndex] &#x3D; null;</span><br><span class="line">                 System.out.println(&quot;Delete the key&quot;);</span><br><span class="line">                 return;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(&quot;Cannot find the key&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Display the hash table</span><br><span class="line">    public void displayTheHashTable()&#123;</span><br><span class="line">         if(hashTable &#x3D;&#x3D; null)&#123;</span><br><span class="line">             System.out.println(&quot;HashTable is not exist&quot;);</span><br><span class="line">         &#125; else&#123;</span><br><span class="line">             for(int i &#x3D; 0; i &lt; hashTable.length; i++)&#123;</span><br><span class="line">                 System.out.println(hashTable[i]);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Delete Entire hash table</span><br><span class="line">    public void deleteEntireHashTable()&#123;</span><br><span class="line">         hashTable &#x3D; null;</span><br><span class="line">        System.out.println(&quot;Hash Table is deleted&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hashing - Quadratic Probing&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Hashing - Linear Probing</title>
    <link href="http://jbj828.github.io/2020/03/28/Al-hash-linear-probing/"/>
    <id>http://jbj828.github.io/2020/03/28/Al-hash-linear-probing/</id>
    <published>2020-03-28T14:30:25.000Z</published>
    <updated>2020-03-28T13:24:26.432Z</updated>
    
    <content type="html"><![CDATA[<p>hashing - linear probing</p><a id="more"></a><p>LinearProbing.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">public class LinearProbing &#123;</span><br><span class="line"></span><br><span class="line">    String[] hashTable;</span><br><span class="line">    int noOfCellsUsedInHashTable;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Constructor</span><br><span class="line">    LinearProbing()&#123;</span><br><span class="line">        hashTable &#x3D; new String[13];</span><br><span class="line">        noOfCellsUsedInHashTable &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Hash function to be used on keys</span><br><span class="line">    public int simpleASCIIHashFunction(String x, int M)&#123;</span><br><span class="line">        char ch[];</span><br><span class="line">        ch &#x3D; x.toCharArray();</span><br><span class="line">        int i, sum;</span><br><span class="line">        for(sum &#x3D;0, i &#x3D; 0; i &lt; x.length(); i++)&#123;</span><br><span class="line">            sum &#x3D; sum + ch[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return sum % M;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Returns LoadFactor of HashTable</span><br><span class="line">    public double getLoadFactor()&#123;</span><br><span class="line">        double loadFactor &#x3D; noOfCellsUsedInHashTable * 1.0 &#x2F; hashTable.length;</span><br><span class="line">        return loadFactor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Insert key in hash table</span><br><span class="line">    public void insertKeyInHashTable(String value)&#123;</span><br><span class="line">        double loadFactor&#x3D; getLoadFactor();</span><br><span class="line">        if(loadFactor &gt;&#x3D; 0.75)&#123;</span><br><span class="line">            rehashKeys(value);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;Inserting \&quot;&quot; + value + &quot;\&quot; in HashTable...&quot;);</span><br><span class="line">            int index &#x3D; simpleASCIIHashFunction(value, hashTable.length);</span><br><span class="line">            for(int i &#x3D; index; i &lt; index+ hashTable.length; i++)&#123;</span><br><span class="line">                int newIndex &#x3D; i % hashTable.length;</span><br><span class="line">                if(hashTable[newIndex] &#x3D;&#x3D; null)&#123;</span><br><span class="line">                    hashTable[newIndex] &#x3D; value;</span><br><span class="line">                    System.out.println(&quot;Successfully insert the value on the index &quot; + newIndex);</span><br><span class="line">                    break;</span><br><span class="line">                &#125; else&#123;</span><br><span class="line">                    System.out.println(&quot;Failed to insert the value on the index &quot; + newIndex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        noOfCellsUsedInHashTable++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Create a new HashTable and Rehashing</span><br><span class="line">    public void rehashKeys(String newStringToBeInserted)&#123;</span><br><span class="line">        noOfCellsUsedInHashTable &#x3D; 0;</span><br><span class="line">        ArrayList&lt;String&gt; data &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">        for(String s : hashTable)&#123;</span><br><span class="line">            if(s !&#x3D; null)&#123;</span><br><span class="line">                data.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        data.add(newStringToBeInserted);</span><br><span class="line">        hashTable &#x3D; new String[hashTable.length * 2];</span><br><span class="line">        for(String s : data)&#123;</span><br><span class="line">            insertKeyInHashTable(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Search for a given key in Hash Table</span><br><span class="line">    public boolean searchKeyInHashTable(String key) &#123;</span><br><span class="line">        int index &#x3D; simpleASCIIHashFunction(key, hashTable.length);</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; index; i &lt; index + hashTable.length; i++) &#123;</span><br><span class="line">            int newIndex &#x3D; i % hashTable.length;</span><br><span class="line">            if (hashTable[newIndex] !&#x3D; null &amp;&amp; hashTable[newIndex].equals(key)) &#123;</span><br><span class="line">                System.out.println(&quot;The key is found on the index of &quot; + newIndex);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;Not Found&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Delete Key from HashTable</span><br><span class="line">    public void deleteKeyInHashTable(String key)&#123;</span><br><span class="line">        int index &#x3D; simpleASCIIHashFunction(key, hashTable.length);</span><br><span class="line"></span><br><span class="line">        for(int i &#x3D; index; i &lt; index + hashTable.length; i++)&#123;</span><br><span class="line">            int newIndex &#x3D; i % hashTable.length;</span><br><span class="line">            if(hashTable[newIndex] !&#x3D; null &amp;&amp; hashTable[newIndex].equals(key))&#123;</span><br><span class="line">                hashTable[newIndex] &#x3D; null;</span><br><span class="line">                System.out.println(&quot;Delete the key you want&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;Failed to delete the key&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Display the Hash Table</span><br><span class="line">    public void displayHashTable()&#123;</span><br><span class="line">        if(hashTable &#x3D;&#x3D; null)&#123;</span><br><span class="line">            System.out.println(&quot;No hashTable&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i &#x3D; 0; i &lt; hashTable.length; i++)&#123;</span><br><span class="line">            System.out.println(hashTable[i] + &quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Deletes entire Hash table</span><br><span class="line">    public void deleteEntireHashTable()&#123;</span><br><span class="line">        if(hashTable &#x3D;&#x3D; null)&#123;</span><br><span class="line">            System.out.println(&quot;No hash table!! Check again!!&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        hashTable &#x3D; null;</span><br><span class="line">        System.out.println(&quot;Completely deleted!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hashing - linear probing&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Vuex - Actions</title>
    <link href="http://jbj828.github.io/2020/03/28/VueJS-actions/"/>
    <id>http://jbj828.github.io/2020/03/28/VueJS-actions/</id>
    <published>2020-03-28T09:46:25.000Z</published>
    <updated>2020-03-28T03:22:56.832Z</updated>
    
    <content type="html"><![CDATA[<p>actions</p><a id="more"></a><h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions?"></a>Actions?</h3><p>Mutations에는 순차적인 로직들만 선언하고 Actions에는 비순차적 또는 비동기 처리 로직들을 선언한다. </p><p>Mutations의 역할은 State 관리이다. 상태관리 자체는 한 데이터에 대해 여러 개의 컴포넌트가 관여하는 것을 효율적으로 관리하기 위한 것이다. 하지만 Mutations에 비동기 처리 로직들이 포함되면 같은 값에 대해 여러 개의 컴포넌트에서 변경을 요청했을 때, 변경 순서 파악이 어렵게 된다. </p><p>이 문제를 사전에 차단하기 위해 비동기 처리 로직은 Actions로, 동기 처리 로직은 Mutations로  나눠서 구현한다.</p><p>따라서, <code>setTimeout()</code>이나 서버와의 http 통신 처리 같이 결과를 받아올 타이밍이 예측되지 않은 로직은 Actions에 선언한다.</p><h5 id="Actions-등록"><a href="#Actions-등록" class="headerlink" title="Actions 등록"></a>Actions 등록</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; store.js</span><br><span class="line">export const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  mutations : &#123;</span><br><span class="line">    addCounter : function(state, payload)&#123;</span><br><span class="line">      return state.counter++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions : &#123;</span><br><span class="line">    addCounter : function(context)&#123;</span><br><span class="line">      &#x2F;&#x2F; commit의 대상인 addCounter는 mutations의 메서드를 의미</span><br><span class="line">      return context.commit(&#39;addCounter&#39;); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>상태가 변화하는 걸 추적하기 위해 actions는 결국 mutations의 메서드를 호출(commit)하는 구조가 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; store.js</span><br><span class="line">export const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  actions : &#123;</span><br><span class="line">    getServerData : function(context)&#123;</span><br><span class="line">      return axios.get(&quot;sample.json&quot;).then(function()&#123;</span><br><span class="line">        &#x2F;&#x2F;...</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    delayFewMinutes : function(context)&#123;</span><br><span class="line">      return setTimeout(function()&#123;</span><br><span class="line">        commit(&#39;addCounter&#39;);</span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>HTTP get 요청이나 setTimeout과 같은 비동기 처리 로직들은 actions에 선언해준다.</p><h5 id="Actions-사용"><a href="#Actions-사용" class="headerlink" title="Actions 사용"></a>Actions 사용</h5><p>앞에선 mutations를 이용하여 counter를 하나씩 늘렸다. 이번엔 actions를 이용해보자. actions를 호출할 때는 아래와 같이 <strong>dispatch()</strong>를 이용한다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; App.vue</span><br><span class="line">methods : &#123;</span><br><span class="line">  &#x2F;&#x2F;Mutations를 이용할 때</span><br><span class="line">  addCounter()&#123;</span><br><span class="line">    this.$store.commit(&#39;addCounter&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; Actions를 이용할 때</span><br><span class="line">  addCounter()&#123;</span><br><span class="line">    this.$store.dispatch(&#39;addCounter&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Actions에-인자-값-넘기기"><a href="#Actions에-인자-값-넘기기" class="headerlink" title="Actions에 인자 값 넘기기"></a>Actions에 인자 값 넘기기</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click&#x3D;&quot;asyncIncrement(&#123;by : 50, duration: 500&#125;)&quot;&gt;Increment&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  actions : &#123;</span><br><span class="line">    &#x2F;&#x2F; payload는 일반적으로 사용하는 인자 명</span><br><span class="line">    asyncIncrement : function(context, payload)&#123;</span><br><span class="line">      return setTimeout(function()&#123;</span><br><span class="line">        context.commit(&#39;increment&#39;, payload.by);</span><br><span class="line">      &#125;, payload.duration);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>출처 : <a href="https://joshua1988.github.io/web-development/vuejs/vuex-getters-mutations/" target="_blank" rel="noopener">Captain Pangyo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;actions&lt;/p&gt;
    
    </summary>
    
    
      <category term="VueJS" scheme="http://jbj828.github.io/categories/VueJS/"/>
    
    
      <category term="VueJS" scheme="http://jbj828.github.io/tags/VueJS/"/>
    
  </entry>
  
  <entry>
    <title>Vuex - Getters and Mutations</title>
    <link href="http://jbj828.github.io/2020/03/28/VueJS-getters-and-mutations/"/>
    <id>http://jbj828.github.io/2020/03/28/VueJS-getters-and-mutations/</id>
    <published>2020-03-28T06:46:25.000Z</published>
    <updated>2020-03-28T02:43:37.848Z</updated>
    
    <content type="html"><![CDATA[<p>getters and mutations</p><a id="more"></a><h3 id="Getters"><a href="#Getters" class="headerlink" title="Getters?"></a>Getters?</h3><p>중앙 데이터 관리식 구조에서 발생하는 문제점 중 하나는 각 컴포넌트에서 Vuex의 데이터를 접근할 때 중복된 코드를 반복호출 하게 되는 것이다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; App.vue</span><br><span class="line">computed: &#123;</span><br><span class="line">  doubleCounter() &#123;</span><br><span class="line">    return this.$store.state.counter * 2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Child.vue</span><br><span class="line">computed: &#123;</span><br><span class="line">  doubleCounter() &#123;</span><br><span class="line">    return this.$store.state.counter * 2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>여러 컴포넌트에서 같은 로직을 비효율적으로 중복 사용하고 있다. 이 때, Vuex의 데이터(state) 변경을 각 컴포넌트에서 수행하는 게 아니라, Vuex에서 수행하도록 하고 각 컴포넌트에서 수행 로직을 호출하면, 코드 가독성도 올라가고 성능에서도 이점이 생긴다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; store.js (Vuex)</span><br><span class="line">getters : &#123;</span><br><span class="line">  doubleCounter : function(state)&#123;</span><br><span class="line">    return state.counter * 2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; App.vue</span><br><span class="line">computed : &#123;</span><br><span class="line">  doubleCounter()&#123;</span><br><span class="line">    return this.$store.getters.doubleCounter;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Child.vue</span><br><span class="line">computed : &#123;</span><br><span class="line">  doubleCounter()&#123;</span><br><span class="line">    return this.$store.getters.doubleCounter;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>참고로, <code>computed</code>의 장점인Caching 효과는 단순히 state 값을 반환하는 것이 아니라, getters에 선언된 속성에서 filter(), reverse() 등의 추가적인 계산 로직이 들어갈 때 발휘된다.</p><h4 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h4><p>Vuex에 내장된 helper 함수, mapGetter로 이미 위에서 한 번 가독성이 올라간 코드를 더 직관적이게 작성할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; App.vue</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  Parent counter : &#123;&#123; parentCounter&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; App.vue</span><br><span class="line">import &#123; mapGetters &#125; from &quot;vuex&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">computed : mapGetters(&#123;</span><br><span class="line">  parentCounter : &#39;getCounter&#39; &#x2F;&#x2F; getCounter는 Vuex의 getters에 선언된 속성 이름</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>여기서 주의할 점은 위 방법은 컴포넌트 자체에서 사용할 computed 속성과 함께 사용할 수 없다는 점이다. 해결방안은 ES6의 문법 <code>...</code>을 사용하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; App.vue</span><br><span class="line"></span><br><span class="line">import &#123; mapGetters &#125; from &quot;vuex&quot;</span><br><span class="line"></span><br><span class="line">computed : &#123;</span><br><span class="line">  ...mapGetters([</span><br><span class="line">    &#39;getCounter&#39;</span><br><span class="line">  ]),</span><br><span class="line">  anotherCounter()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다만 <code>...</code> 문법을 사용하려면 Babel stage-2 라이브러리 설치 및 babel preset에 추가가 필요하다.</p><h3 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations?"></a>Mutations?</h3><p>Mutations란 Vuex의 데이터, 즉 state 값을 변경하는 로직들을 의미한다. Getters와 차이점은</p><ol><li>인자를 받아 Vuex에 넘겨줄 수 있고</li><li>computed가 아닌 methods에 등록</li></ol><p>Actions와의 차이점은</p><ol><li>Mutations는 동기적 로직을 정의</li><li>Actions는 비동기적 로직을 정의</li></ol><p><strong>Mutations의 성격상 안에 정의한 로직들이 순차적으로 일어나야 각 컴포넌트의 반영 여부를 제대로 추적할 수가 있기 때문이다</strong></p><p><code>commit</code>을 이용하여 state를 변경한다.</p><h5 id="Mutations-등록"><a href="#Mutations-등록" class="headerlink" title="Mutations 등록"></a>Mutations 등록</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; store.js</span><br><span class="line">export const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  mutations : &#123;</span><br><span class="line">    addCounter : function(state, payload)&#123;</span><br><span class="line">      return state.counter++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="Mutations-사용"><a href="#Mutations-사용" class="headerlink" title="Mutations 사용"></a>Mutations 사용</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; App.vue</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  Parent counter : &#123;&#123; parentCounter&#125;&#125; &lt;br&gt;</span><br><span class="line">  &lt;button @click&#x3D;&quot;addCounter&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; App.vue</span><br><span class="line">methods : &#123;</span><br><span class="line">  addCounter()&#123;</span><br><span class="line">    &#x2F;&#x2F; this.$store.state.counter++;</span><br><span class="line">    this.$store.commit(&#39;addCounter&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 주목할 부분은 getters처럼 <code>this.$store.mutations.addCounter</code> 같은 접근이 불가능하고, commit을 이용하여 mutations 이벤트를 호출해야 한다는 점이다. 앞서 설명한 추적 가능한 상태 변화를 위해 프레임워크가 이렇게 구조화 되어 있는 것이다.</p><h5 id="Mutations에-인자-값-넘기기"><a href="#Mutations에-인자-값-넘기기" class="headerlink" title="Mutations에 인자 값 넘기기"></a>Mutations에 인자 값 넘기기</h5><p>각 컴포넌트에서 Vuex의 state를 조작하는 데 필요한 특정 값들을 넘기고 싶을 때는 <code>commit()</code>에 두번째 인자를 추가한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.$store.commit(&#39;addCounter&#39;, 10);</span><br><span class="line">this.$store.commit(&#39;addCounter&#39;, &#123;</span><br><span class="line">  value : 10,</span><br><span class="line">  arr : [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Vuex에서 아래와 같이 받을 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mutations : &#123;</span><br><span class="line">  &#x2F;&#x2F; payload가 &#123; value : 10&#125; 일 경우</span><br><span class="line">  addCounter: function(state, payload)&#123;</span><br><span class="line">    state.counter &#x3D; payload.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>데이터 인자 명은 보통 <code>payload</code>를 많이 쓴다.</p><ul><li>변경 된 state 값을 받아오는 <strong>Getters</strong></li><li>state 값을 변경하기 위한 메서드를 정의하는 <strong>Mutations</strong></li></ul><p>출처 : <a href="https://joshua1988.github.io/web-development/vuejs/vuex-getters-mutations/" target="_blank" rel="noopener">Captain Pangyo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;getters and mutations&lt;/p&gt;
    
    </summary>
    
    
      <category term="VueJS" scheme="http://jbj828.github.io/categories/VueJS/"/>
    
    
      <category term="VueJS" scheme="http://jbj828.github.io/tags/VueJS/"/>
    
  </entry>
  
  <entry>
    <title>Structure of Vuex</title>
    <link href="http://jbj828.github.io/2020/03/27/VueJS-basic-structure-of-Vuex/"/>
    <id>http://jbj828.github.io/2020/03/27/VueJS-basic-structure-of-Vuex/</id>
    <published>2020-03-27T06:46:25.000Z</published>
    <updated>2020-03-27T10:33:31.854Z</updated>
    
    <content type="html"><![CDATA[<p>structure of vuex</p><a id="more"></a><p>모든 Vuex 애플리케이션의 중심에는 <code>store</code>가 있다. <code>store</code>는 기본적으로 애플리케이션 상태를 보유하고 있는 컨테이너이다. Vuex 저장소가 일반 전역 개체와 두 가지 다른 점이 있다.</p><ol><li>Vuex store는 반응형이다. Vue 컴포넌트는 상태를 검색할 때 저장소의 상태가 변경되면 효율적으로 대응하고 업데이트 한다.</li><li>저장소의 상태를 직접 변경할 수 없다. <strong>커밋을 이용한 변이</strong>만 가능하다. 이렇게 하면 모든 상태에 대한 추적이 가능해져 앱을 사용해 툴을 더 잘 이해할 수 있다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;모듈 시스템 사용할 경우 Vue.use(Vuex)를 먼저 호출해야 한다</span><br><span class="line"></span><br><span class="line">const store &#x3D; new Vuex.store(&#123;</span><br><span class="line">  state : &#123;</span><br><span class="line">    count : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations : &#123;</span><br><span class="line">    increment(state)&#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>이제 state 객체에 <code>store.state</code>로 접근하여 <code>store.commit</code> 메소드로 상태 변경을 트리거 할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&#39;increment&#39;)</span><br><span class="line"></span><br><span class="line">console.log(store.state.count) &#x2F;&#x2F; -&gt; 1</span><br></pre></td></tr></table></figure><p>다시 말해, <code>store.state.count</code>를 직접 변경하는 대신 변이를 수행하는 이유는 명시적으로 추적을 하기 때문이다. </p><p>컴포넌트 안에서 저장소 상태를 사용하는 것은 단순히 계산된 속성 내에서 상태를 반환하는 것이다. 변경을 트리거하는 것은 컴포넌트 메소드에서 변경을 커밋하는 것을 의미한다.</p><p><strong>가장 기본적인 Vuex 카운터 앱</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; count &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;increment&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;decrement&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; make sure to call Vue.use(Vuex) if using a module system</span><br><span class="line"></span><br><span class="line">const store &#x3D; new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">  increment: state &#x3D;&gt; state.count++,</span><br><span class="line">    decrement: state &#x3D;&gt; state.count--</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">    return store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment () &#123;</span><br><span class="line">      store.commit(&#39;increment&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement () &#123;</span><br><span class="line">    store.commit(&#39;decrement&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>출처 : <a href="https://vuex.vuejs.org/kr/guide/" target="_blank" rel="noopener">Vuex</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;structure of vuex&lt;/p&gt;
    
    </summary>
    
    
      <category term="VueJS" scheme="http://jbj828.github.io/categories/VueJS/"/>
    
    
      <category term="VueJS" scheme="http://jbj828.github.io/tags/VueJS/"/>
    
  </entry>
  
  <entry>
    <title>What is the Vuex?</title>
    <link href="http://jbj828.github.io/2020/03/26/VueJS-vuex/"/>
    <id>http://jbj828.github.io/2020/03/26/VueJS-vuex/</id>
    <published>2020-03-26T06:46:25.000Z</published>
    <updated>2020-03-26T08:01:33.249Z</updated>
    
    <content type="html"><![CDATA[<p>vuex</p><a id="more"></a><h3 id="원칙-1-Single-Source-of-Truth-단일-데이터-소스"><a href="#원칙-1-Single-Source-of-Truth-단일-데이터-소스" class="headerlink" title="원칙 1 : Single Source of Truth(단일 데이터 소스)"></a>원칙 1 : Single Source of Truth(단일 데이터 소스)</h3><p>컴포넌트들 간에 공유해야 하는 데이터(예: 애플리케이션 데이터)는 이를 사용하는 컴포넌트와는 별도로 단일 위치에 보관해야 한다.</p><p>이 단일 위치를 <code>store(저장소)</code>라고 한다. 컴포넌트는 이 위치에서 애플리케이션 데이터를 읽어야 하며 충돌이나 불일치를 방지하기 위해 복사본을 자체적으로 보관해서는 안된다.</p><h3 id="원칙-2-Data-is-Read-Only"><a href="#원칙-2-Data-is-Read-Only" class="headerlink" title="원칙 2 : Data is Read-Only"></a>원칙 2 : Data is Read-Only</h3><p>컴포넌트들은 저장소에서 데이터를 자유롭게 읽을 수 있다. 그러나 직접 변경은 불가능.</p><p>대신 데이터를 변경할 것이라는 것을 store에 알려야 하며, store은 “mutations”라고 하는 정의된 함수들을 통해 변경을 완수해야할 책임이 있다.</p><p>이렇게 데이터 변경 로직을 중앙 집중화하면 데이터에 불일치가 일어나거나 데이터에 다른 문제들이 생겼을 때 여러 곳을 일일이 뒤져볼 필요가 없다. 이것은 어떤 익명의 컴포넌트가 예상치 못한 방식으로 데이터를 변경할 가능성을 최소화 해준다.</p><h3 id="원칙-3-Mutations-are-Synchronous-Mutation은-동기적이다"><a href="#원칙-3-Mutations-are-Synchronous-Mutation은-동기적이다" class="headerlink" title="원칙 3 : Mutations are Synchronous(Mutation은 동기적이다)"></a>원칙 3 : Mutations are Synchronous(Mutation은 동기적이다)</h3><p>위에 두 가지 원칙을 지키는 애플리케이션에서 데이터를 디버그 하는 것이 훨씬 쉽다. mutation의 commit을 기록하고 응답 상태가 어떻게 변경되는지 관찰할 수 있다.(Vue Devtools에서 Vuex를 사용할 때 실제로 그렇게 디버그 할 수 있다.)</p><p>그러나 만약 우리의 “mutation”이 비동기적으로 일어난다면 그런 방식의 디버그는 불가능 할 것이다. commit이 언제 발생했는지는 알 수 있어도, commit 안에 콜백이나 Promise 같은 것들이 들어간다면 추적이 불가능해진다.</p><p>mutation이 동기적으로 일어나는 것, 데이터가 예측할 수 없는 이벤트의 순서와 시간에 종속되지 않도로 보장한다.</p><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex?"></a>Vuex?</h3><p>Vuex는 Vue 애플리케이션에서 Flux 아키텍처를 구현하는 데 도움이 되는 라이브러리이다. 위 원칙 덕분에 Vuex는 여러 컴포넌트에서 데이터를 공유해도 애플리케이션 데이터를 투명하고 예측 가능한 상태로 유지한다.</p><p>Vuex를 구현하기 위해서는 store, mutators 가 포함되며 store에서 데이터를 읽는 모든 컴포넌트를 자동으로 업데이트한다. </p><p>또한 핫 모듈 리로딩(실행 중인 애플리케이션에서 모듈 업데이트) 및 시간 이동 디버깅(버그 추적을 위한 mutation 이벤트 역추적)과 같은 멋진 개발 기능을 제공한다.</p><p><em>출처 : <a href="https://medium.com/@itsnothingg/%EB%8F%84%EB%8C%80%EC%B2%B4-vuex%EA%B0%80-%EB%AD%90%EA%B8%B8%EB%9E%98-ad5bc15f2371" target="_blank" rel="noopener">도대체 Vuex가 뭐길래?</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vuex&lt;/p&gt;
    
    </summary>
    
    
      <category term="VueJS" scheme="http://jbj828.github.io/categories/VueJS/"/>
    
    
      <category term="VueJS" scheme="http://jbj828.github.io/tags/VueJS/"/>
    
  </entry>
  
  <entry>
    <title>The basic of VueJS</title>
    <link href="http://jbj828.github.io/2020/03/25/VueJS-Basic/"/>
    <id>http://jbj828.github.io/2020/03/25/VueJS-Basic/</id>
    <published>2020-03-25T13:46:25.000Z</published>
    <updated>2020-03-25T14:51:37.317Z</updated>
    
    <content type="html"><![CDATA[<p>basic of vueJS</p><a id="more"></a><h3 id="What-is-VueJS"><a href="#What-is-VueJS" class="headerlink" title="What is VueJS?"></a>What is VueJS?</h3><p>MVVM 패턴의 ViewModel 레이어에 해당하는 화면단 라이브러리</p><ul><li>데이터 바인딩과 화면 단위를 컴포넌트 형태로 제공하며, 관련 API를 지원한는 데 궁극적 목적이 있다.</li><li>양방향 데이터 바인딩 제공</li><li>컴포넌트 간 통신은 단방향 데이터 흐름(부모 -&gt; 자식)</li></ul><img src="/2020/03/25/VueJS-Basic/vue.png" class="" width="500" height="300" title="Vue"><h3 id="MVVM-Pattern"><a href="#MVVM-Pattern" class="headerlink" title="MVVM Pattern?"></a>MVVM Pattern?</h3><p>Backend 로직과 Client의 마크업 &amp; 데이터 표현단을 분리하기 위한 구조로 전통적인 MVC 패턴의 방식에서 기인하였다. 간단하게 생각해서 화면 앞단의 화면 동작 관련 로직과 뒷단의 DB 데이터 처리 및 서버 로직을 분리하고, 뒷단에서 넘어온 데이터를 Model에 담아 View로 넘겨주는 중간 지점이라고 보면 된다.</p><h4 id="Steps-for-Passing-Props"><a href="#Steps-for-Passing-Props" class="headerlink" title="Steps for Passing Props"></a>Steps for Passing Props</h4><ol><li>Add the prop to the parent component’s template with a v-bind expression</li><li>Tell the child component about the props it should expect to get</li></ol><p>출처 : <a href="https://joshua1988.github.io/" target="_blank" rel="noopener">Captain Pangyo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;basic of vueJS&lt;/p&gt;
    
    </summary>
    
    
      <category term="VueJS" scheme="http://jbj828.github.io/categories/VueJS/"/>
    
    
      <category term="VueJS" scheme="http://jbj828.github.io/tags/VueJS/"/>
    
  </entry>
  
  <entry>
    <title>Filtering Data</title>
    <link href="http://jbj828.github.io/2020/03/23/NodeJS-filtering-data/"/>
    <id>http://jbj828.github.io/2020/03/23/NodeJS-filtering-data/</id>
    <published>2020-03-23T01:46:25.000Z</published>
    <updated>2020-03-23T01:56:14.783Z</updated>
    
    <content type="html"><![CDATA[<p>filtering data </p><a id="more"></a><p>For data filtering, we’ll use query parameters. This will allow clients to fetch all tasks, just the complete tasks, or just the incomplete tasks.</p><h3 id="Filtering-Data"><a href="#Filtering-Data" class="headerlink" title="Filtering Data"></a>Filtering Data</h3><p>The <code>completed</code> query parameter is on the task documents of MongoDB. This query parameter can be set to <code>true</code> or <code>false</code>. This will prevent clients from fetching unnecessary data tha they don’t plan on using.</p><p>First up, create an object to store the search criteria.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const match &#x3D; &#123;&#125;</span><br></pre></td></tr></table></figure><p>From there, check if the query parameter was provided. The provided value should be parsed into a boolean and stored on <code>match.completed</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (req.query.completed) &#123;</span><br><span class="line">  match.completed &#x3D; req.query.completed &#x3D;&#x3D;&#x3D; &#39;true&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Last up, <code>match</code> can be added onto <code>populate</code> to fetch just the users that match the search criteria.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">await req.user.populate(&#123;</span><br><span class="line">  path: &#39;tasks&#39;,</span><br><span class="line">  match</span><br><span class="line">&#125;).exexPopulate()</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; READ USER&#39;S TASKS</span><br><span class="line">&#x2F;&#x2F; GET &#x2F;tasks?completed&#x3D;true</span><br><span class="line">&#x2F;&#x2F; GET &#x2F;tasks?limit&#x3D;10&amp;skip&#x3D;10</span><br><span class="line">&#x2F;&#x2F; GET &#x2F;tasks?sortBy&#x3D;createdAt:desc</span><br><span class="line">router.get(&#39;&#x2F;tasks&#39;, auth, async (req, res) &#x3D;&gt; &#123;</span><br><span class="line">    const match &#x3D; &#123;&#125;</span><br><span class="line">    const sort &#x3D; &#123;&#125;</span><br><span class="line"></span><br><span class="line">    if (req.query.completed) &#123;</span><br><span class="line">        match.completed &#x3D; req.query.completed &#x3D;&#x3D;&#x3D; &#39;true&#39;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (req.query.sortBy) &#123;</span><br><span class="line">        const parts &#x3D; req.query.sortBy.split(&#39;:&#39;)</span><br><span class="line">        sort[parts[0]] &#x3D; parts[1] &#x3D;&#x3D;&#x3D; &#39;desc&#39; ? -1 : 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        await req.user.populate(&#123;</span><br><span class="line">            path: &#39;tasks&#39;,</span><br><span class="line">            match,</span><br><span class="line">            options: &#123;</span><br><span class="line">                limit: parseInt(req.query.limit),</span><br><span class="line">                skip: parseInt(req.query.skip),</span><br><span class="line">                sort</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).execPopulate();</span><br><span class="line">        res.send(req.user.tasks);</span><br><span class="line"></span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">        res.status(500).send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>출처 : NodeJS course on Udemy by Andrew Mead</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;filtering data &lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Populate, Virtual</title>
    <link href="http://jbj828.github.io/2020/03/21/MongoDB-populate/"/>
    <id>http://jbj828.github.io/2020/03/21/MongoDB-populate/</id>
    <published>2020-03-21T06:46:25.000Z</published>
    <updated>2020-03-21T11:25:37.079Z</updated>
    
    <content type="html"><![CDATA[<p>populate</p><a id="more"></a><h3 id="Populate"><a href="#Populate" class="headerlink" title="Populate"></a>Populate</h3><ul><li>몽구스의 편리한 기능 중 하나인 populate</li><li>몽고DB를 사용하다보면 하나의 다큐먼트가 다른 다큐먼트의 ObjectId를 쓰는 경우가 있다. 그럴 때 그 ObjectId를 실제 객체로 치환하는 작업이 필요하다.</li><li>즉 populate는 ObjectId에 해당하는 값과 객체를 치환해주는 역할을 해준다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const Task &#x3D; mongoose.model(&#39;Task&#39;, &#123;</span><br><span class="line"> owner: &#123;</span><br><span class="line"> type: mongoose.Schema.Types.ObjectId,</span><br><span class="line"> required: true,</span><br><span class="line"> ref: &#39;User&#39;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>ref</code>에 해당 ObjectId가 속해있는 모델을 넣어준다. 자기자신을 가리켜도 되고 다른 컬렉션 모델이어도 상관없다.</p><p>You can fetch the owner of a given task.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const task &#x3D; await Task.findById(&#39;5c2e505a3253e18a43e612e6&#39;)</span><br><span class="line">await task.populate(&#39;owner&#39;).execPopulate()</span><br><span class="line">console.log(task.owner)</span><br></pre></td></tr></table></figure><p>결과적으로 <strong>ObjectId가 실제 객체로 치환</strong>된다.</p><p> populate는 자바스크립트 단에서 합쳐주는 것이지 JOIN처럼 DB 자체에서 합쳐주는 것이 아니다. 따라서 성능이 그렇게 좋지는 않습니다. 특히 populate가 중첩되면 성능 문제가 생길 확률이 커집니다.</p><br><h3 id="Virtual"><a href="#Virtual" class="headerlink" title="Virtual"></a>Virtual</h3><p>다큐먼트에는 없지만 객체에는 있는 가상의 필드를 만들어준다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">userSchema.virtual(&#39;detail&#39;).get(function()&#123;</span><br><span class="line">  return &#96;I am $&#123;this.nickname&#125; and birthday is $&#123;this.birth.toLocaleString()&#125;.&#96;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>스키마에 virtual를 붙이면 users 컬렉션을 조회할 때 <code>{email: ..., password: ...., detail: ...}</code> 처럼 detail 필드가 생긴다. 그리고 get 메소드 안에 넣어준 함수의 return 값이 들어있다. 기존 필드들을 활용해서 새로운 가상 필드를 만드는 것이다.</p><p> 출처 : <a href="https://www.zerocho.com/category/MongoDB/post/59a66f8372262500184b5363" target="_blank" rel="noopener">zeroCho TV</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;populate&lt;/p&gt;
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://jbj828.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://jbj828.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Making Model Method(mongoose)</title>
    <link href="http://jbj828.github.io/2020/03/20/MongoDB-Making-model-method/"/>
    <id>http://jbj828.github.io/2020/03/20/MongoDB-Making-model-method/</id>
    <published>2020-03-20T06:46:25.000Z</published>
    <updated>2020-03-20T04:48:21.771Z</updated>
    
    <content type="html"><![CDATA[<p>Making model method</p><a id="more"></a><p>보통 API 컨트롤러 파일에서 데이터 모델의 내장함수들에 직접 접근하여 데이터를 생성하고 조회를 한다.</p><p>이번엔 데이터 모델에 임의 메소드, 쿼리 헬퍼를 만들어서 데이터 작업을 좀 더 용이하게 하는 방법을 알아본다.</p><p>모델 메소드는 두 종류로 만들 수 있다. <code>.statics</code> 와 <code>.methods</code> 이다. 각 종류는 서로 가리키는 <code>this</code> 값이 다르다. 전자의 경우 모델 자체를 가리키고, 후자의 경우 데이터 인스턴스를 가리킨다. </p><h3 id="static-메소드"><a href="#static-메소드" class="headerlink" title="static 메소드"></a>static 메소드</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Check the user&#39;s email and password</span><br><span class="line">userSchema.statics.findByCredentials &#x3D; async function (email, password) &#123;</span><br><span class="line">    const user &#x3D; await User.findOne(&#123; email &#125;)</span><br><span class="line"></span><br><span class="line">    if (!user) &#123;</span><br><span class="line">        throw new Error(&#39;Unable to login&#39;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const isMatch &#x3D; await bcrypt.compare(password, user.password)</span><br><span class="line"></span><br><span class="line">    if (!isMatch) &#123;</span><br><span class="line">        throw new Error(&#39;Unable to login&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="인스턴스-메소드"><a href="#인스턴스-메소드" class="headerlink" title="인스턴스 메소드"></a>인스턴스 메소드</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Generate the token and save on the database</span><br><span class="line">userSchema.methods.generateAuthToken &#x3D; async function () &#123;</span><br><span class="line">    const user &#x3D; this</span><br><span class="line">    const token &#x3D; jwt.sign(&#123; _id: user._id.toString &#125;, &#39;studyNodeJs&#39;)</span><br><span class="line"></span><br><span class="line">    user.tokens &#x3D; user.tokens.concat(&#123; token &#125;)</span><br><span class="line">    await user.save();</span><br><span class="line"></span><br><span class="line">    return token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>메소드를 만들 땐, 스키마를 모델화 하기 전에, <code>.statics</code> 혹은 <code>.methods</code>를 사용하여 정의를 해주어야 한다.</p><p>이렇게 메소드를 만들면, 우리가 원하는 작업마다 이름을 붙여줄 수 있게 되고 코드를 분리시킬 수 있어 가독성도 높아진다. 쿼리를 작성할 때 데이터 구조를 확인하기 위하여 컨트롤러 파일과 모델 파일을 동시에 볼 필요도 없어서 편해진다. </p><p>출처 : <a href="https://backend-intro.vlpt.us/" target="_blank" rel="noopener">backend</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Making model method&lt;/p&gt;
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://jbj828.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://jbj828.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>JSON Web Token</title>
    <link href="http://jbj828.github.io/2020/03/20/NodeJS-json-web-token/"/>
    <id>http://jbj828.github.io/2020/03/20/NodeJS-json-web-token/</id>
    <published>2020-03-20T04:46:25.000Z</published>
    <updated>2020-03-20T04:23:29.009Z</updated>
    
    <content type="html"><![CDATA[<p>token</p><a id="more"></a><h3 id="Token-기반-인증에-대한-소개"><a href="#Token-기반-인증에-대한-소개" class="headerlink" title="Token 기반 인증에 대한 소개"></a>Token 기반 인증에 대한 소개</h3><ol><li><p><strong>Stateless</strong> Server<br>상태를 유지하지 않음. 상태 정보를 저장하지 않으면 서버는 클라이언트 측에서 들어오는 요청만으로만 작업을 처리한다.이렇게 상태가 없는 경우 클라이언트와 서버의 연결고리가 없기 때문에 서버의 확장성(Scalability)가 높아진다.</p></li><li><p>Best for Mobile Application<br> Android/iOS 모바일 어플리케이션을 개발한다면, 안전한 API를 만들기 위해서 쿠키 같은 인증 시스템은 이상적이지 않다(쿠키 컨테이너를 사용해야 함). 토큰 기반 인증 도입하면, 간단하게 이 번거로움을 해결 할 수 있다</p></li><li><p>인증정보를 다른 어플리케이션으로 전달<br> 대표적 예로 OAuth가 있다. 페이스북/구글 같은 소셜 계정들을 이용하여 다른 웹 서비스에서도 로그인 할 수 있게 할 수 있다.</p></li><li><p>보안<br> 토큰 기반 인증 시스템을 사용하여 어플리케이션 보안 높일 수 있다.</p></li></ol><h3 id="토큰-기반-시스템의-작동-원리"><a href="#토큰-기반-시스템의-작동-원리" class="headerlink" title="토큰 기반 시스템의 작동 원리"></a>토큰 기반 시스템의 작동 원리</h3><ol><li>유저가 아이디와 비밀번호로 <code>로그인</code></li><li>서버측에서 해당 <code>계정정보를 검증</code></li><li>계정정보가 정확하다면, 서버측에서 유저에게 <code>signed토큰을 발급</code>(signed의 의미는 해당 토큰이 서버에서 정상적으로 발급된 토큰임을 증명하는 signature를 지니고 있다는 것)</li><li>클라이언트 측에서 전달받은 <code>토큰을 저장</code>해두고, 서버에 요청을 할 때마다, 해당 <code>토큰을 함께 서버에 전달</code></li><li>서버는 <code>토큰 검증</code>하고, <code>요청에 응답</code></li></ol><h2 id="JSON-Web-Token"><a href="#JSON-Web-Token" class="headerlink" title="JSON Web Token"></a>JSON Web Token</h2><p>JWT은 웹표준으로서 두 개체에서 JSON 객체를 사용하여 가볍고 자가수용적인(self-contained)방식으로 정보를 안전성 있게 전달해줍니다.</p><p><strong>자가 수용적(self contained)</strong><br>  JWT는 필요한 모든 정보를 자체적으로 지니고 있다. JWT 시스템에서 발급된 토큰은, 토큰에 대한 기본 정보, 전달 할 정보(로그인 시스템에서는 유저 정보) 그리고 토큰이 검증 됐다는 것을 증명해주는 signature를 포함하고 있다.</p><h4 id="JWT의-생김새"><a href="#JWT의-생김새" class="headerlink" title="JWT의 생김새"></a>JWT의 생김새</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaaaaaa.bbbbbbbbbbbbbbb.cccccccccccccccc</span><br><span class="line"> header(헤더)      payload(내용)   signature(서명)</span><br></pre></td></tr></table></figure><p>출처 : <a href="https://velopert.com/" target="_blank" rel="noopener">Veloplert.Log</a> - 공부목적으로 사용했습니다</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;token&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Async/Await</title>
    <link href="http://jbj828.github.io/2020/03/17/NodeJS-async-await/"/>
    <id>http://jbj828.github.io/2020/03/17/NodeJS-async-await/</id>
    <published>2020-03-17T11:46:25.000Z</published>
    <updated>2020-03-17T13:29:58.883Z</updated>
    
    <content type="html"><![CDATA[<p>async/await</p><a id="more"></a><p>These provide an improved syntax for working with promises. You’ll be able to write complex asynchronous code that looks like normal synchronous code. This makes it much easier to write and maintain asynchronous code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const add &#x3D; (a, b) &#x3D;&gt; &#123;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            if (a &lt; 0 || b &lt; 0) &#123;</span><br><span class="line">                return reject(&#39;Numbers must be non-negative&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">            resolve(a + b);</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const doWork &#x3D; async () &#x3D;&gt; &#123;</span><br><span class="line">    const sum &#x3D; await add(1, 99)</span><br><span class="line">    const sum2 &#x3D; await add(sum, 50)</span><br><span class="line">    const sum3 &#x3D; await add(sum2, -10)</span><br><span class="line">    return sum3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doWork().then((result) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;result&#39;, result)</span><br><span class="line">&#125;).catch((e) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;e&#39;, e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;async/await&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
</feed>
