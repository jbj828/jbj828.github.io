<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Developer Javit</title>
  
  <subtitle>Slowly and Steadily</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jbj828.github.io/"/>
  <updated>2020-05-13T13:16:30.229Z</updated>
  <id>http://jbj828.github.io/</id>
  
  <author>
    <name>Jay Chung</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Functional Programming on JS</title>
    <link href="http://jbj828.github.io/2020/05/13/JS-Functional-Programming/"/>
    <id>http://jbj828.github.io/2020/05/13/JS-Functional-Programming/</id>
    <published>2020-05-13T13:46:25.000Z</published>
    <updated>2020-05-13T13:16:30.229Z</updated>
    
    <content type="html"><![CDATA[<p>Functional Programming on JS</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Fibonachi with Functional Programming</span><br><span class="line">var fibo &#x3D; (function () &#123;</span><br><span class="line">  var cache &#x3D; &#123; &quot;0&quot;: 0, &quot;1&quot;: 1 &#125;;</span><br><span class="line"></span><br><span class="line">  var func &#x3D; function (n) &#123;</span><br><span class="line">    if (typeof cache[n] &#x3D;&#x3D;&#x3D; &quot;number&quot;) &#123;</span><br><span class="line">      result &#x3D; cache[n];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      result &#x3D; cache[n] &#x3D; func(n - 1) + func(n - 2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">  &#125;;</span><br><span class="line">  return func;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">console.log(fibo(10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Another way, defining cacher first</span><br><span class="line">&#x2F;&#x2F; and then put factorial or fibonacci</span><br><span class="line">var cacher &#x3D; function (cache, func) &#123;</span><br><span class="line">  var calculate &#x3D; function (n) &#123;</span><br><span class="line">    if (typeof cache[n] &#x3D;&#x3D;&#x3D; &quot;number&quot;) &#123;</span><br><span class="line">      result &#x3D; cache[n];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      result &#x3D; cache[n] &#x3D; func(calculate, n);</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">  &#125;;</span><br><span class="line">  return calculate;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var fact &#x3D; cacher(&#123; &quot;0&quot;: 1 &#125;, function (func, n) &#123;</span><br><span class="line">  return n * func(n - 1);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var fibo &#x3D; cacher(&#123; &quot;0&quot;: 0, &quot;1&quot;: 1 &#125;, function (func, n) &#123;</span><br><span class="line">  return func(n - 1) + func(n - 2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(fact(10));</span><br><span class="line">console.log(fibo(10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; call method</span><br><span class="line">function example() &#123;</span><br><span class="line">  console.log(Array.prototype.join.call(arguments));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">example(1, &quot;string&quot;, true); &#x2F;&#x2F; &quot;1,string,true&quot;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Currying</span><br><span class="line">function calculate(a, b, c) &#123;</span><br><span class="line">  return a * b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function curry(func) &#123;</span><br><span class="line">  var args &#x3D; Array.prototype.slice.call(arguments, 1);</span><br><span class="line"></span><br><span class="line">  return function () &#123;</span><br><span class="line">    return func.apply(null, args.concat(Array.prototype.slice.call(arguments)));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var new_func1 &#x3D; curry(calculate, 1);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Functional Programming on JS&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://jbj828.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://jbj828.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Socket.io Events</title>
    <link href="http://jbj828.github.io/2020/04/21/NodeJS-socket-events/"/>
    <id>http://jbj828.github.io/2020/04/21/NodeJS-socket-events/</id>
    <published>2020-04-21T11:30:25.000Z</published>
    <updated>2020-04-21T11:11:43.961Z</updated>
    
    <content type="html"><![CDATA[<p>Socket.io Events</p><a id="more"></a><p>Events allow you to transfer data from the client to the server or from the server to the client.</p><h3 id="Working-with-Events"><a href="#Working-with-Events" class="headerlink" title="Working with Events"></a>Working with Events</h3><p>There are two sides to every event, the sender and the receiver. If the server is the sender, then the client is the receiver.</p><p>Events can be sent from the sender using <code>emit</code>. Events can be received by the receiver using <code>on</code>. The example below shows how this pattern can be used to create a simple counter application. The following snippet contains the client-side Javascript code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const socket &#x3D; io()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Listen for &quot;countUpdated&quot;</span><br><span class="line">socket.on(&#39;countUpdated&#39;, (count) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;The count has been updated!&#39;, count)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">document.querySelector(&#39;#increment&#39;).addEventListener(&#39;click&#39;, ()&#x3D;&gt;&#123;</span><br><span class="line">  &#x2F;&#x2F; Emit &#39;increment&#39;</span><br><span class="line">  socket.emit(&#39;increment&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The client-side code uses <code>on</code> to listen for the <code>countUpdated</code> event. A message will be logged with the current count when that event is received. The client-side code also uses <code>emit</code> to send the <code>increment</code> event. This occurs when a button on the screen is clicked. </p><p>The server-side code for this example is below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let count &#x3D; 0</span><br><span class="line"></span><br><span class="line">io.on(&#39;connection&#39;, (socket)&#x3D;&gt;&#123;</span><br><span class="line">  console.log(&#39;New WebSocket connection&#39;)</span><br><span class="line"></span><br><span class="line">  socket.emit(&#39;countUpdated&#39;, count)</span><br><span class="line"></span><br><span class="line">  socket.on(&#39;increment&#39;, ()&#x3D;&gt;&#123;</span><br><span class="line">    count++</span><br><span class="line">    io.emit(&#39;countUpdated&#39;, count)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The server above is responsible for emitting <code>countUpdated</code> and listening for <code>increment</code>. New users get the current count right after they connect to the server. If a client sends <code>increment</code> to the server, the count is incremented and all connected clients are notified of the change.</p><p>On the client, <code>socket.emit</code> emits an event to the server. On the server, both <code>socket.emit</code> and <code>io.emit</code> can be used. <code>socket.emit</code> sends an event to that specific client, while <code>io.emit</code> sends an event to all connected clients.</p><p>Ref : The Complete Node.js Dev Course by Andrew Mead</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Socket.io Events&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket</title>
    <link href="http://jbj828.github.io/2020/04/20/NodeJS-Websocket/"/>
    <id>http://jbj828.github.io/2020/04/20/NodeJS-Websocket/</id>
    <published>2020-04-20T14:30:25.000Z</published>
    <updated>2020-04-21T09:26:15.140Z</updated>
    
    <content type="html"><![CDATA[<p>WebSocket</p><a id="more"></a><h3 id="The-WebSocket-Protocol"><a href="#The-WebSocket-Protocol" class="headerlink" title="The WebSocket Protocol"></a>The WebSocket Protocol</h3><ul><li>WebSockets allow for full-duplex communication.</li><li>WebSocket is a seperate protocol from HTTP</li><li>Persistent connection between client and server.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i socket.io</span><br></pre></td></tr></table></figure><p>Socket.io can be used on its own or with Express. Since the chat application will be serving up client-sied assets, both Express and Socket.io will get set up. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;)</span><br><span class="line">const http &#x3D; require(&#39;http&#39;)</span><br><span class="line">const express &#x3D; require(&#39;express&#39;)</span><br><span class="line">const socketio &#x3D; require(&#39;socket.io&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Create the Express application</span><br><span class="line">const app &#x3D; express()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Create the HTTP server using the Express app</span><br><span class="line">const server &#x3D; http.createServer(app)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Connect socket.io to the HTTP server</span><br><span class="line">const io &#x3D; socketio(server)</span><br><span class="line"></span><br><span class="line">const port &#x3D; process.env.PORT || 3000</span><br><span class="line">const publicDirectoryPath &#x3D; path.join(__dirname, &#39;..&#x2F;public&#39;)</span><br><span class="line">app.use(express.static(publicDirectoryPath))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Listen for new connections to Socket.io</span><br><span class="line">io.on(&#39;connection&#39;, () &#x3D;&gt; &#123;</span><br><span class="line"> console.log(&#39;New WebSocket connection&#39;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(port, () &#x3D;&gt; &#123;</span><br><span class="line"> console.log(&#96;Server is up on port $&#123;port&#125;!&#96;)</span><br></pre></td></tr></table></figure><p>The server above uses <code>io.on</code> which is provided by Socket.io. <code>on</code> allows the server to listen for an event and respond to it. In the example above, the server listens for <code>connection</code> which allows it to run some code when a client connects to the WebSocket server.</p><p><strong>Socket.io on the Client</strong></p><p>Socket.io is also used on the client to connect to the server. Socket.io automatically serves up <code>/socket.io/socket.io.js</code> which contains the client-side code. The script tags below load in the client-side library followed by a custom Javascript file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;&#x2F;socket.io&#x2F;socket.io.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;&#x2F;js&#x2F;chat.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>Your client-side JavaScript can then connect to the Socket.io server by calling <code>io</code>. <code>io</code> is provided by the client-side Socket.io library. Calling this function will set up the connection, and it’ll cause the server’s <code>connection</code> event handler to run.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">io()</span><br></pre></td></tr></table></figure><p>Ref : The Complete Node.js Dev Course by Andrew Mead</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WebSocket&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Coding Test - Code Signal Intro 3</title>
    <link href="http://jbj828.github.io/2020/04/18/CT-codeSignalIntro3/"/>
    <id>http://jbj828.github.io/2020/04/18/CT-codeSignalIntro3/</id>
    <published>2020-04-18T14:30:25.000Z</published>
    <updated>2020-04-18T14:59:03.068Z</updated>
    
    <content type="html"><![CDATA[<p>Coding Test - Code Signal Intro 3</p><a id="more"></a><h3 id="Add-Border"><a href="#Add-Border" class="headerlink" title="Add Border"></a>Add Border</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function addBorder(picture) &#123;</span><br><span class="line">    var width &#x3D; picture[0].length + 2</span><br><span class="line"></span><br><span class="line">    return [</span><br><span class="line">        &#39;*&#39;.repeat(width),</span><br><span class="line">        ...picture.map(line &#x3D;&gt; &#96;*$&#123;line&#125;*&#96;),</span><br><span class="line">        &#39;*&#39;.repeat(width)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Are-Similar"><a href="#Are-Similar" class="headerlink" title="Are Similar"></a>Are Similar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function areSimilar(a,b)&#123;</span><br><span class="line">    const aDiff &#x3D; a.filter((v,i) &#x3D;&gt; v !&#x3D; b[i])</span><br><span class="line">    const bDiff &#x3D; b.filter((v,i) &#x3D;&gt; v !&#x3D; a[i])</span><br><span class="line">    return aDiff.length &#x3D;&#x3D; 0 || aDiff.length &#x3D;&#x3D; 2 &amp;&amp; aDiff.join(&#39;&#39;) &#x3D;&#x3D; bDiff.reverse().join(&#39;&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Coding Test - Code Signal Intro 3&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/categories/Coding-Test/"/>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/tags/Coding-Test/"/>
    
  </entry>
  
  <entry>
    <title>Coding Test - Code Signal Intro 2</title>
    <link href="http://jbj828.github.io/2020/04/17/CT-codeSignal2/"/>
    <id>http://jbj828.github.io/2020/04/17/CT-codeSignal2/</id>
    <published>2020-04-17T09:30:25.000Z</published>
    <updated>2020-04-18T13:29:50.739Z</updated>
    
    <content type="html"><![CDATA[<p>Coding Test - Code Signal Intro2</p><a id="more"></a><h3 id="All-Longest-Strings"><a href="#All-Longest-Strings" class="headerlink" title="All Longest Strings"></a>All Longest Strings</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function allLongestStrings(inputArray) &#123;</span><br><span class="line">    &#39;use strict&#39;;</span><br><span class="line">    let maxSize &#x3D; Math.max(...inputArray.map(x &#x3D;&gt; x.length));</span><br><span class="line">    return inputArray.filter(x &#x3D;&gt; x.length &#x3D;&#x3D;&#x3D; maxSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="commonCharacterCount"><a href="#commonCharacterCount" class="headerlink" title="commonCharacterCount"></a>commonCharacterCount</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function commonCharacterCount(s1, s2) &#123;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; s1.length; i++) &#123;</span><br><span class="line">        s2 &#x3D; s2.replace(s1[i], &quot;!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return s2.replace(&#x2F;[^!]&#x2F;g, &quot;&quot;).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isLucky"><a href="#isLucky" class="headerlink" title="isLucky"></a>isLucky</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function isLucky(n) &#123;</span><br><span class="line">    var count &#x3D; 0;</span><br><span class="line">    n &#x3D; String(n).split(&#39;&#39;).map(t &#x3D;&gt; parseInt(t));</span><br><span class="line">    n.forEach((el, i) &#x3D;&gt; (i &lt; n.length &#x2F; 2) ? count +&#x3D; el : count -&#x3D; el)</span><br><span class="line">    return count &#x3D;&#x3D; 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sort-by-Height"><a href="#Sort-by-Height" class="headerlink" title="Sort by Height"></a>Sort by Height</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function sortByHeight(a) &#123;</span><br><span class="line"></span><br><span class="line">    var people &#x3D; a.filter(el &#x3D;&gt; el &gt; 0)</span><br><span class="line">    people.sort((a, b) &#x3D;&gt; a - b)</span><br><span class="line"></span><br><span class="line">    for (let i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">        if (a[i] !&#x3D;&#x3D; -1) &#123;</span><br><span class="line">            a[i] &#x3D; people.shift()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reverseInParentheses"><a href="#reverseInParentheses" class="headerlink" title="reverseInParentheses"></a>reverseInParentheses</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function reverseInParentheses(inputString) &#123;</span><br><span class="line">    while (inputString.includes(&#39;(&#39;)) &#123;</span><br><span class="line">        inputString &#x3D; inputString.replace(&#x2F;\(([^()]*)\)&#x2F;, (_, str) &#x3D;&gt; [...str].reverse().join(&#39;&#39;));</span><br><span class="line">    &#125;</span><br><span class="line">    return inputString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="alternatingSums"><a href="#alternatingSums" class="headerlink" title="alternatingSums"></a>alternatingSums</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function alternatingSums(a) &#123;</span><br><span class="line">    let teamA &#x3D; []</span><br><span class="line">    let teamB &#x3D; []</span><br><span class="line">    let result &#x3D; []</span><br><span class="line"></span><br><span class="line">    teamA &#x3D; a.filter((e, i) &#x3D;&gt; i % 2 &#x3D;&#x3D;&#x3D; 0)</span><br><span class="line">    teamB &#x3D; a.filter((e, i) &#x3D;&gt; i % 2 &#x3D;&#x3D;&#x3D; 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    result.push(teamA.reduce((a, b) &#x3D;&gt; a + b , 0))</span><br><span class="line">    result.push(teamB.reduce((a, b) &#x3D;&gt; a + b , 0))</span><br><span class="line"></span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Coding Test - Code Signal Intro2&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/categories/Coding-Test/"/>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/tags/Coding-Test/"/>
    
  </entry>
  
  <entry>
    <title>Coding Test - Code Signal Intro 1</title>
    <link href="http://jbj828.github.io/2020/04/16/CT-level2-day2/"/>
    <id>http://jbj828.github.io/2020/04/16/CT-level2-day2/</id>
    <published>2020-04-16T09:30:25.000Z</published>
    <updated>2020-04-18T13:29:52.682Z</updated>
    
    <content type="html"><![CDATA[<p>Coding Test </p><a id="more"></a><h3 id="쇠막대기"><a href="#쇠막대기" class="headerlink" title="쇠막대기"></a>쇠막대기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function solution(arrangement) &#123;</span><br><span class="line"></span><br><span class="line">    var answer &#x3D; 0;</span><br><span class="line">    var stack &#x3D; 0;</span><br><span class="line">    for (let i &#x3D; 0; i &lt; arrangement.length; i++) &#123;</span><br><span class="line">        if (arrangement[i] &#x3D;&#x3D;&#x3D; &#39;(&#39; &amp;&amp; arrangement[i + 1] &#x3D;&#x3D;&#x3D; &#39;)&#39;) &#123;</span><br><span class="line">            answer +&#x3D; stack;</span><br><span class="line">            i++</span><br><span class="line">        &#125; else if (arrangement[i] &#x3D;&#x3D;&#x3D; &#39;(&#39;) &#123;</span><br><span class="line">            stack++</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            stack--</span><br><span class="line">            answer +&#x3D; 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return answer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="centuryFromYear"><a href="#centuryFromYear" class="headerlink" title="centuryFromYear"></a>centuryFromYear</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function centuryFromYear(year) &#123;</span><br><span class="line">    return Math.ceil(year &#x2F; 100)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="checkPalindrome"><a href="#checkPalindrome" class="headerlink" title="checkPalindrome"></a>checkPalindrome</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function checkPalindrome(inputString) &#123;</span><br><span class="line">    return inputString &#x3D;&#x3D; inputString.split(&#39;&#39;).reverse().join(&#39;&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="adjacentElementsProduct"><a href="#adjacentElementsProduct" class="headerlink" title="adjacentElementsProduct"></a>adjacentElementsProduct</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function adjacentElementsProduct(arr) &#123;</span><br><span class="line">    return Math.max(...arr.slice(1).map((x, i) &#x3D;&gt; [x * arr[i]]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shapeArea"><a href="#shapeArea" class="headerlink" title="shapeArea"></a>shapeArea</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function shapeArea(n) &#123;</span><br><span class="line">    return n*n + (n-1)*(n-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Make-array-consecutive-2"><a href="#Make-array-consecutive-2" class="headerlink" title="Make array consecutive 2"></a>Make array consecutive 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function makeArrayConsecutive2(statues) &#123;</span><br><span class="line">    return Math.max(...statues) - Math.min(...statues) + 1 - statues.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="almostIncreasingSequence"><a href="#almostIncreasingSequence" class="headerlink" title="almostIncreasingSequence"></a>almostIncreasingSequence</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function almostIncreasingSequence(seq) &#123;</span><br><span class="line">    var bad &#x3D; 0</span><br><span class="line">    for (var i &#x3D; 1; i &lt; seq.length; i++) if (seq[i] &lt;&#x3D; seq[i - 1]) &#123;</span><br><span class="line">        bad++</span><br><span class="line">        if (bad &gt; 1) return false</span><br><span class="line">        if (seq[i] &lt;&#x3D; seq[i - 2] &amp;&amp; seq[i + 1] &lt;&#x3D; seq[i - 1]) return false</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="matrixElementsSum"><a href="#matrixElementsSum" class="headerlink" title="matrixElementsSum"></a>matrixElementsSum</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function matrixElementsSum(matrix) &#123;</span><br><span class="line">    var total &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    for (j &#x3D; 0; j &lt; matrix[0].length; j++) &#123;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; matrix.length; i++) &#123;</span><br><span class="line">            if (matrix[i][j] &#x3D;&#x3D;&#x3D; 0) break</span><br><span class="line">            else total +&#x3D; matrix[i][j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Coding Test &lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/categories/Coding-Test/"/>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/tags/Coding-Test/"/>
    
  </entry>
  
  <entry>
    <title>Coding Test - Level2 / Day1</title>
    <link href="http://jbj828.github.io/2020/04/15/CT-greedy/"/>
    <id>http://jbj828.github.io/2020/04/15/CT-greedy/</id>
    <published>2020-04-15T09:30:25.000Z</published>
    <updated>2020-04-15T14:29:56.437Z</updated>
    
    <content type="html"><![CDATA[<p>Coding Test - Level 2</p><a id="more"></a><h3 id="백준-그리디-알고리즘-1번-문제-Greedy"><a href="#백준-그리디-알고리즘-1번-문제-Greedy" class="headerlink" title="백준 그리디 알고리즘 1번 문제(Greedy)"></a>백준 그리디 알고리즘 1번 문제(Greedy)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function atm(n, time) &#123;</span><br><span class="line">    time.sort((a, b) &#x3D;&gt; a - b)</span><br><span class="line">    let totalTime &#x3D; []</span><br><span class="line"></span><br><span class="line">    let sum &#x3D; 0;</span><br><span class="line">    for (let i &#x3D; 0; i &lt; time.length; i++) &#123;</span><br><span class="line">        sum +&#x3D; time[i];</span><br><span class="line">        totalTime.push(sum)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return totalTime.reduce((a, b) &#x3D;&gt; a + b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="탑-Queue"><a href="#탑-Queue" class="headerlink" title="탑(Queue)"></a>탑(Queue)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function solution(heights)&#123;</span><br><span class="line">  return heights.map((v, i)&#x3D;&gt;&#123;</span><br><span class="line">    while(i)&#123;</span><br><span class="line">      i--</span><br><span class="line">      if(heights[i] &gt; v)&#123;</span><br><span class="line">          return i+1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="프린터-Queue"><a href="#프린터-Queue" class="headerlink" title="프린터(Queue)"></a>프린터(Queue)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function solution(priorities, location) &#123;</span><br><span class="line">    var arr &#x3D; priorities.map((priority, index) &#x3D;&gt; &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            index: index,</span><br><span class="line">            priority: priority</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var queue &#x3D; []</span><br><span class="line"></span><br><span class="line">    while (arr.length &gt; 0) &#123;</span><br><span class="line">        var firstEle &#x3D; arr.shift()</span><br><span class="line">        var hasHigherElement &#x3D; arr.some(ele &#x3D;&gt; ele.priority &gt; firstEle.priority)</span><br><span class="line"></span><br><span class="line">        if (hasHigherElement) &#123;</span><br><span class="line">            arr.push(firstEle)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            queue.push(firstEle)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return queue.findIndex(queueEle &#x3D;&gt; queueEle.index &#x3D;&#x3D;&#x3D; location) + 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Coding Test - Level 2&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/categories/Coding-Test/"/>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/tags/Coding-Test/"/>
    
  </entry>
  
  <entry>
    <title>Coding Test Level1 - Day5, 6</title>
    <link href="http://jbj828.github.io/2020/04/14/CT-level1-day5/"/>
    <id>http://jbj828.github.io/2020/04/14/CT-level1-day5/</id>
    <published>2020-04-14T09:30:25.000Z</published>
    <updated>2020-04-14T14:35:53.050Z</updated>
    
    <content type="html"><![CDATA[<p>Coding Test Level1 - Day5, 6</p><a id="more"></a><h3 id="하샤드-수"><a href="#하샤드-수" class="headerlink" title="하샤드 수"></a>하샤드 수</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function solution(n)&#123;</span><br><span class="line">    return !(n % (n+ &quot;&quot;).split(&quot;&quot;).reduce((a,b) &#x3D;&gt; +b + +a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="핸드폰-번호-가리기"><a href="#핸드폰-번호-가리기" class="headerlink" title="핸드폰 번호 가리기"></a>핸드폰 번호 가리기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function solution(s) &#123;</span><br><span class="line">    var result &#x3D; &quot;*&quot;.repeat(s.length - 4) + s.slice(-4)</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>repeat()</code> 메서드는 문자열을 주어진 횟수만큼 반복해 붙인 새로운 문자열을 반환합니다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.repeat(count);</span><br></pre></td></tr></table></figure><h3 id="행렬의-덧셈"><a href="#행렬의-덧셈" class="headerlink" title="행렬의 덧셈"></a>행렬의 덧셈</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function solution(A, B) &#123;</span><br><span class="line">    return A.map((a, i) &#x3D;&gt; a.map((b, j) &#x3D;&gt; b + B[i][j]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>map()</code> 메서드는 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환합니다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.map(callback(currentValue[, index[, array]])[,thisArg])</span><br></pre></td></tr></table></figure><h3 id="Summer-Windter-Coding-2018"><a href="#Summer-Windter-Coding-2018" class="headerlink" title="Summer/Windter Coding(~2018)"></a>Summer/Windter Coding(~2018)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function solution(d, budget) &#123;</span><br><span class="line">    d.sort((a, b) &#x3D;&gt; a - b)</span><br><span class="line"></span><br><span class="line">    while (d.reduce((a, b) &#x3D;&gt; (a + b), 0) &gt; budget) d.pop()</span><br><span class="line"></span><br><span class="line">    return d.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="완주하지-못한-선수"><a href="#완주하지-못한-선수" class="headerlink" title="완주하지 못한 선수"></a>완주하지 못한 선수</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function solution(participant, completion) &#123;</span><br><span class="line">    participant.sort()</span><br><span class="line">    completion.sort()</span><br><span class="line"></span><br><span class="line">    for(let i in participant)&#123;</span><br><span class="line">        if(participant[i] !&#x3D;&#x3D; completion[i]) return participant[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="모의고사"><a href="#모의고사" class="headerlink" title="모의고사"></a>모의고사</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function solution(answers) &#123;</span><br><span class="line">    let answer &#x3D; []</span><br><span class="line">    const a1 &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">    const a2 &#x3D; [2, 1, 2, 3, 2, 4, 2, 5]</span><br><span class="line">    const a3 &#x3D; [3, 3, 1, 1, 2, 2, 4, 4, 5, 5]</span><br><span class="line"></span><br><span class="line">    let a1c &#x3D; anwsers.filter((a, i) &#x3D;&gt; a &#x3D;&#x3D;&#x3D; a1[i % a1.length]).length</span><br><span class="line">    let a2c &#x3D; anwsers.filter((a, i) &#x3D;&gt; a &#x3D;&#x3D;&#x3D; a2[i % a2.length]).length</span><br><span class="line">    let a3c &#x3D; anwsers.filter((a, i) &#x3D;&gt; a &#x3D;&#x3D;&#x3D; a3[i % a3.length]).length</span><br><span class="line"></span><br><span class="line">    const max &#x3D; Math.max(a1c, a2c, a3c)</span><br><span class="line"></span><br><span class="line">    if (a1c &#x3D;&#x3D;&#x3D; max) answer.push(1)</span><br><span class="line">    if (a2c &#x3D;&#x3D;&#x3D; max) answer.push(2)</span><br><span class="line">    if (a3c &#x3D;&#x3D;&#x3D; max) answer.push(3)</span><br><span class="line"></span><br><span class="line">    return answer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="체육복"><a href="#체육복" class="headerlink" title="체육복"></a>체육복</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function solution(n, lost, reserve) &#123;</span><br><span class="line">    let answer &#x3D; n;</span><br><span class="line"></span><br><span class="line">    for (let i &#x3D; 0; i &lt; reserve.length; i++) &#123;</span><br><span class="line">        if (lost.includes(reserve[i])) &#123;</span><br><span class="line">            lost.splice(lost.indexOf(reserve[i]), 1)</span><br><span class="line">            reserve.splice(i, 1)</span><br><span class="line">            i--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (let i &#x3D; 0; i &lt; reserve.length; i++) &#123;</span><br><span class="line">        if (lost.includes(reserve[i] - 1)) &#123;</span><br><span class="line">            lost.splice(lost.indexOf(reserve[i] - 1), 1)</span><br><span class="line">            reserve.splice(i, 1)</span><br><span class="line">            i--;</span><br><span class="line">        &#125; else if (lost.includes(reserve[i] + 1)) &#123;</span><br><span class="line">            lost.splice(lost.indexOf(reserve[i] + 1), 1)</span><br><span class="line">            reserve.splice(i, 1)</span><br><span class="line">            i--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    answer &#x3D; n - lost.length;</span><br><span class="line">    return answer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Coding Test Level1 - Day5, 6&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/categories/Coding-Test/"/>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/tags/Coding-Test/"/>
    
  </entry>
  
  <entry>
    <title>Using VueJS to Interact with DOM</title>
    <link href="http://jbj828.github.io/2020/04/13/VueJS-Basic-Again/"/>
    <id>http://jbj828.github.io/2020/04/13/VueJS-Basic-Again/</id>
    <published>2020-04-13T06:46:25.000Z</published>
    <updated>2020-04-13T09:14:42.951Z</updated>
    
    <content type="html"><![CDATA[<p>Using VueJS to Interact with DOM</p><a id="more"></a><h4 id="Modifying-an-Event-with-Event-Modifiers"><a href="#Modifying-an-Event-with-Event-Modifiers" class="headerlink" title="Modifying an Event with Event Modifiers"></a>Modifying an Event with Event Modifiers</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-on:mousemove&#x3D;&quot;updateCoordinates&quot;&gt;</span><br><span class="line">  Coordinates : &#123;&#123; x &#125;&#125; &#x2F; &#123;&#123; y &#125;&#125;</span><br><span class="line">   - &lt;span v-on:mousemove.stop&#x3D;&quot;&quot;&gt;Dead Spot&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>Using <code>.stop</code>, we have same effect like <code>event.preventDefault()</code> or <code>event.stopPropagation()</code></p><h4 id="Listening-to-KeyBoard-Events"><a href="#Listening-to-KeyBoard-Events" class="headerlink" title="Listening to KeyBoard Events"></a>Listening to KeyBoard Events</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-on:keyup.enter.space&#x3D;&quot;alertMe&quot;&gt;</span><br></pre></td></tr></table></figure><p>You’ll get the Alert Message when press the keyboard <code>enter</code> or <code>space</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-on:keydown&#x3D;&quot;value &#x3D; $event.target.value&quot;&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; value &#125;&#125;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><h4 id="Two-way-Binding"><a href="#Two-way-Binding" class="headerlink" title="Two-way Binding"></a>Two-way Binding</h4><p><code>v-model</code></p><p>데이터가 양방향으로 흐르게 해주는 것. 즉, 데이터에 있는 값이 뷰에 나타나고, 이 뷰의 값이 바뀌면 데이터의 값도 바뀐다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;name&quot;&gt;</span><br><span class="line"> &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><h4 id="Computed-Properties"><a href="#Computed-Properties" class="headerlink" title="Computed Properties"></a>Computed Properties</h4><p>computed 속성 대신 메소드와 같은 함수를 정의할 수 있다. 최종 결과는 두 가지 접근 방식이 동일하다. 차이점은 computed 속성은 종속 대상을 따라 저장(캐싱)<br>된다. computed 속성은 해당 속성이 종속된 대상이 변경될 때만 함수를 실행한다. 즉 <code>message</code>가 변경되지 않는 한, computed 속성을 여러 번 요청해도 계산을 다시 하지 않고 계산되어 있던 결과를 즉시 반환한다.</p><p>이에 비해 메소드를 호출하면 렌더링을 할 때마다 함수를 실행한다.</p><p>캐싱이 왜 필요할까? 계산에 시간이 많이 걸리는 computed 속성인 A가 있다고 가정하자. 여기에 더해 A에 의존하는 다른 computed 속성값도 있을 수 있다. 캐싱을 하지 않으면 A의 getter 함수를 꼭 필요한 것보다 더 많이 실행하게 된다. 캐싱을 원하지 않을 경우 메소드를 사용하면 된다.</p><h4 id="Watch-Properties"><a href="#Watch-Properties" class="headerlink" title="Watch Properties"></a>Watch Properties</h4><p><code>watch</code> 옵션은 데이터 변경에 반응하는 보다 일반적인 방법을 제공한다. 데이터 변경에 대한 응답으로 비동기식 또는 시간이 많이 소요되는 조작을 수행하려는 경우에 가장 유용하다.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Using VueJS to Interact with DOM&lt;/p&gt;
    
    </summary>
    
    
      <category term="VueJS" scheme="http://jbj828.github.io/categories/VueJS/"/>
    
    
      <category term="VueJS" scheme="http://jbj828.github.io/tags/VueJS/"/>
    
  </entry>
  
  <entry>
    <title>Coding Test Level1 - Day3, 4</title>
    <link href="http://jbj828.github.io/2020/04/11/CT-level1-day3/"/>
    <id>http://jbj828.github.io/2020/04/11/CT-level1-day3/</id>
    <published>2020-04-11T14:30:25.000Z</published>
    <updated>2020-04-11T11:51:01.186Z</updated>
    
    <content type="html"><![CDATA[<p>Coding Test Level1 - Day3</p><a id="more"></a><h3 id="시저-암호"><a href="#시저-암호" class="headerlink" title="시저 암호"></a>시저 암호</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function solution(s, n) &#123;</span><br><span class="line">    var result &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    for (var i &#x3D; 0; i &lt; s.length; i++) &#123;</span><br><span class="line">        if (s[i] &#x3D;&#x3D; &quot; &quot;) result +&#x3D; &quot; &quot;</span><br><span class="line">        else</span><br><span class="line">            result +&#x3D; String.fromCharCode((s.charCodeAt(i) &gt; 90) ?</span><br><span class="line">                (s.charCodeAt(i) + n - 97) % 26 + 97 : (s.charCodeAt(i) + n - 65) % 26 + 65</span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="약수의-합"><a href="#약수의-합" class="headerlink" title="약수의 합"></a>약수의 합</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function solution(num) &#123;</span><br><span class="line">    let sum &#x3D; 0;</span><br><span class="line">    for (let i &#x3D; 1; i &lt;&#x3D; num; i++) &#123;</span><br><span class="line">        if (num % i &#x3D;&#x3D;&#x3D; 0) sum +&#x3D; i</span><br><span class="line">    &#125;</span><br><span class="line">    return sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="이상한-문자-만들기"><a href="#이상한-문자-만들기" class="headerlink" title="이상한 문자 만들기"></a>이상한 문자 만들기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function solution(s)&#123;</span><br><span class="line">    var result &#x3D; &quot;&quot;;</span><br><span class="line">    var num &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    for(var i &#x3D; 0; i &lt; s.length; i++)&#123;</span><br><span class="line">        if(s.charAt(i) &#x3D;&#x3D; &quot; &quot;)&#123;</span><br><span class="line">            num &#x3D; 0</span><br><span class="line">            result +&#x3D; &quot; &quot;</span><br><span class="line">        &#125; else if(num % 2 &#x3D;&#x3D;&#x3D; 0)&#123;</span><br><span class="line">            result +&#x3D; (s.charAt(i)).toUpperCase()</span><br><span class="line">            num++</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result +&#x3D; (s.charAt(i)).toLowerCase()</span><br><span class="line">            num++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="자릿수-더하기"><a href="#자릿수-더하기" class="headerlink" title="자릿수 더하기"></a>자릿수 더하기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function solution(num) &#123;</span><br><span class="line">    let sum &#x3D; 0;</span><br><span class="line">    let str &#x3D; num + &quot;0&quot;</span><br><span class="line">    let i &#x3D; 0;</span><br><span class="line">    while (i &lt; str.length - 1) &#123;</span><br><span class="line">        sum +&#x3D; str[i] &#x2F; 1</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="자연수-뒤집어-배열로-만들기"><a href="#자연수-뒤집어-배열로-만들기" class="headerlink" title="자연수 뒤집어 배열로 만들기"></a>자연수 뒤집어 배열로 만들기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function solution(n)&#123;</span><br><span class="line">    var arr &#x3D; []</span><br><span class="line"></span><br><span class="line">    do &#123;</span><br><span class="line">        arr.push(n%10)</span><br><span class="line">        n &#x3D; Math.floor(n&#x2F;10)</span><br><span class="line">    &#125; while(n &gt; 0)</span><br><span class="line"></span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="정수-내림차순으로-배치하기"><a href="#정수-내림차순으로-배치하기" class="headerlink" title="정수 내림차순으로 배치하기"></a>정수 내림차순으로 배치하기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function solution(n)&#123;</span><br><span class="line">    const newN &#x3D; n + &quot;&quot;;</span><br><span class="line">    const newArr &#x3D; newN</span><br><span class="line">        .split(&quot;&quot;)</span><br><span class="line">        .sort()</span><br><span class="line">        .reverse()</span><br><span class="line">        .join(&quot;&quot;);</span><br><span class="line"></span><br><span class="line">        return +newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="정수-제곱근-판별"><a href="#정수-제곱근-판별" class="headerlink" title="정수 제곱근 판별"></a>정수 제곱근 판별</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function solution(n) &#123;</span><br><span class="line"></span><br><span class="line">    let x &#x3D; Math.sqrt(n)</span><br><span class="line">    if (Math.floor(x) &#x3D;&#x3D;&#x3D; x) &#123;</span><br><span class="line">        return Math.pow(x + 1, 2)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return -1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="제일-작은-수-제거하기"><a href="#제일-작은-수-제거하기" class="headerlink" title="제일 작은 수 제거하기"></a>제일 작은 수 제거하기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function solution(arr)&#123;</span><br><span class="line">    arr.splice(arr.indexOf(Math.min(...arr)), 1);</span><br><span class="line">    if(arr.length &lt; 1) return [-1];</span><br><span class="line"></span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="짝수와-홀수"><a href="#짝수와-홀수" class="headerlink" title="짝수와 홀수"></a>짝수와 홀수</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function solution(num)&#123;</span><br><span class="line">    return num % 2 ? &quot;Odd&quot; : &quot;Even&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="콜라츠-추측"><a href="#콜라츠-추측" class="headerlink" title="콜라츠 추측"></a>콜라츠 추측</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function solution(num, count &#x3D; 0) &#123;</span><br><span class="line">    return num &#x3D;&#x3D; 1 ?</span><br><span class="line">        (count &gt;&#x3D; 500 ? -1 : count) :</span><br><span class="line">        solution(num % 2 &#x3D;&#x3D; 0 ? num &#x2F; 2 : num * 3 + 1, ++count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="평균-구하기"><a href="#평균-구하기" class="headerlink" title="평균 구하기"></a>평균 구하기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function solution(arr)&#123;</span><br><span class="line">    return arr.reduce((a,b) &#x3D;&gt; a+b) &#x2F; arr.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Coding Test Level1 - Day3&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/categories/Coding-Test/"/>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/tags/Coding-Test/"/>
    
  </entry>
  
  <entry>
    <title>Jest - Testing an Express Application</title>
    <link href="http://jbj828.github.io/2020/04/09/NodeJS-testing-an-express-app/"/>
    <id>http://jbj828.github.io/2020/04/09/NodeJS-testing-an-express-app/</id>
    <published>2020-04-09T09:30:25.000Z</published>
    <updated>2020-04-09T08:40:47.118Z</updated>
    
    <content type="html"><![CDATA[<p>Jest - Testing an Express Application</p><a id="more"></a><p>We will set up the Express API to be easily testable. This involves settings up a test environment as well as configuring Jest to work with Node.</p><h3 id="Creating-a-Test-Environment"><a href="#Creating-a-Test-Environment" class="headerlink" title="Creating a Test Environment"></a>Creating a Test Environment</h3><p>Creating the test environment requires <code>test.env</code> to be added to the <code>config</code> directory. The contents will be identical to <code>dev.env</code>, with the exception of the MongoDB connection string. The test environment should use a separate database such as <code>task-manager-api-test</code>. This will prevent the test cases from messing with development data.</p><p>With the environment in place, update the <code>test</code> script to load the enviroment file in. That would be <code>env-cmd ./config/test.env jest --watch</code>.</p><h3 id="Configuring-Jest"><a href="#Configuring-Jest" class="headerlink" title="Configuring Jest"></a>Configuring Jest</h3><p>By default, Jest is expecting to run in the browser. You can use Jest with Node, but you’ll need to configure Jest to enable support. Jest can be configured by adding a <code>jest</code> property in <code>pacakage.json</code>. The configuration below sets <code>testEnvironment</code> to <code>node</code> to ensure that Jest runs correctly in Node.js.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;jest&quot;: &#123;</span><br><span class="line">      &quot;testEnvironment&quot;: &quot;node&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, we’ll add tests for the Express API. Each test case will focus on testing a specific endpoint, making assertions about the response from the server.</p><h3 id="Testing-with-Supertest"><a href="#Testing-with-Supertest" class="headerlink" title="Testing with Supertest"></a>Testing with Supertest</h3><p>Supertest allows you to easily test Express apps.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i supertest --save-dev</span><br></pre></td></tr></table></figure><p>Now, supertest can be used to test an endpoint. The test case below tests that new users can sign up for accounts. All the account data provided is valid, so a new account should be created.</p><p>Step one is to pass the express <code>app</code> to <code>request</code>. Next, supertest methods can be chained together to fit the needs of your tests. <code>post</code> is used to make an HTTP POST request to <code>/users</code>. <code>send</code> is used to send the correct JSON data to the server. <code>expect</code> is used to assert that the response status code is correct. In this case, a successful signup should result in a 201 status code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const request &#x3D; require(&#39;supertest&#39;)</span><br><span class="line">const app &#x3D; require(&#39;..&#x2F;src&#x2F;app&#39;)</span><br><span class="line"></span><br><span class="line">test(&#39;Should signup a new user&#39;, async () &#x3D;&gt; &#123;</span><br><span class="line">    await request(app).post(&#39;&#x2F;users&#39;).send(&#123;</span><br><span class="line">        name: &quot;Jay&quot;,</span><br><span class="line">        email: &quot;jay@exaple.com&quot;,</span><br><span class="line">        password: &#39;MyPass777!&#39;</span><br><span class="line">    &#125;).expect(201)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Ref : The Complete Node.js Dev Course by Andrew Mead</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jest - Testing an Express Application&lt;/p&gt;
    
    </summary>
    
    
      <category term="Test" scheme="http://jbj828.github.io/categories/Test/"/>
    
    
      <category term="Test" scheme="http://jbj828.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Jest - Testing Asychronous Code</title>
    <link href="http://jbj828.github.io/2020/04/09/NodeJS-jest-handle-async/"/>
    <id>http://jbj828.github.io/2020/04/09/NodeJS-jest-handle-async/</id>
    <published>2020-04-09T03:30:25.000Z</published>
    <updated>2020-04-09T08:14:05.477Z</updated>
    
    <content type="html"><![CDATA[<p>Jest - Testing Asychronous Code</p><a id="more"></a><h3 id="Testing-Asychronous-Code"><a href="#Testing-Asychronous-Code" class="headerlink" title="Testing Asychronous Code"></a>Testing Asychronous Code</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const add &#x3D; (a, b) &#x3D;&gt; &#123;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            if (a &lt; 0 || b &lt; 0) &#123;</span><br><span class="line">                return reject(&#39;Numbers must be non-negative&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">            resolve(a + b);</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The callback function for the first test case accepts a <code>done</code> parameter. This lets Jest know that the test function contains asynchronous code. Jest won’t determine if the test passed or failed until <code>done</code> is called. In the example below, <code>then</code> is called to run some code after the numbers are added. This is where the assertion is added and it’s where <code>done</code> is called.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test(&#39;Should add two numbers&#39;, (done)&#x3D;&gt;&#123;</span><br><span class="line">  add(2,3).then((sum)&#x3D;&gt;&#123;</span><br><span class="line">    expect(sum).toBe(5)</span><br><span class="line">    done()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Using <code>async/await</code> is also possible.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test(&#39;Should add two numbers async&#x2F;await&#39;, async()&#x3D;&gt;&#123;</span><br><span class="line">  const sum &#x3D; await add(2,3)</span><br><span class="line">  expect(sum).toBe(5)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Ref : The Complete Node.js Dev Course by Andrew Mead</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jest - Testing Asychronous Code&lt;/p&gt;
    
    </summary>
    
    
      <category term="Test" scheme="http://jbj828.github.io/categories/Test/"/>
    
    
      <category term="Test" scheme="http://jbj828.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>ES6 - Set</title>
    <link href="http://jbj828.github.io/2020/04/08/JS-set/"/>
    <id>http://jbj828.github.io/2020/04/08/JS-set/</id>
    <published>2020-04-08T11:30:25.000Z</published>
    <updated>2020-04-08T09:20:00.630Z</updated>
    
    <content type="html"><![CDATA[<p>es6 -set</p><a id="more"></a><p>Set은 데이터 타입 중 하나이며 <strong>중복되는 값을 가지지 않는 값들의 리스트</strong>이다. 이 때 값에는 순서가 존재하지 않다. </p><h3 id="구성자-Constructor"><a href="#구성자-Constructor" class="headerlink" title="구성자(Constructor)"></a>구성자(Constructor)</h3><p>새로운 set을 만들 때 <code>new Set()</code>을 활용한다. 이 때 구성자에 반복자(iterator)를 작성할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const foo &#x3D; new Set();</span><br><span class="line">console.log(foo) &#x2F;&#x2F; Set &#123;&#125;</span><br><span class="line"></span><br><span class="line">const bar &#x3D; new Set([1,2,3]);</span><br><span class="line">console.log(bar) &#x2F;&#x2F; Set &#123;1,2,3&#125;</span><br></pre></td></tr></table></figure><p>set을 만들 때 중복되는 값을 가진 반복자를 넘기면, <code>Set</code>이 알아서 중복되는 값들 중 맨 앞의 값만 남기고 무시한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const foo &#x3D; new Set([1,2,2,3,4,5,5,6])</span><br><span class="line">console.log(foo) &#x2F;&#x2F; Set &#123;1,2,3,4,5,6&#125;</span><br></pre></td></tr></table></figure><h3 id="객체-Set을-진짜-Set으로"><a href="#객체-Set을-진짜-Set으로" class="headerlink" title="객체 Set을 진짜 Set으로"></a>객체 Set을 진짜 Set으로</h3><p><code>Set</code>이 존재하기 이전에는 일반 객체를 활용해서 set을 구현해야 했다. 하지만 문자열(string)만이 객체의 속성으로 쓰일 수 있기 때문에 몇 가지 문제점이 나타났다. 예를 들면, <code>5</code>는 <code>&quot;5&quot;</code>로 형 강제 변환(coercion)이 일어나고, <code>{}</code>는 <code>[object Object]</code>가 되었다. 하지만 <code>Set</code>은 값의 타입을 강제로 변환하지 않는다. <code>5</code>와 <code>&quot;5&quot;</code>는 두 개의 다른 값이 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const foo &#x3D; new Set();</span><br><span class="line"></span><br><span class="line">foo.add(&#123;&#125;)  &#x2F;&#x2F; 빈 객체 추가</span><br><span class="line">foo.add(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">console.log(foo.size) &#x2F;&#x2F; 2</span><br><span class="line">console.log(foo) &#x2F;&#x2F; Set &#123; &#123;&#125;, &#123;&#125; &#125;</span><br><span class="line"></span><br><span class="line">foo.add(10);</span><br><span class="line">foo.add(&quot;10&quot;);</span><br><span class="line">foo.add(10); &#x2F;&#x2F; 이미 10이 있기 때문에 무시된다</span><br><span class="line"></span><br><span class="line">console.log(foo); &#x2F;&#x2F; Set &#123; &#123;&#125;, &#123;&#125;, 10, &quot;10&quot; &#125;</span><br></pre></td></tr></table></figure><p>이와 같이 여러 개의 서로 다른 객체들을 set에 추가할 수 있다. 이 때 <code>Set</code>은 값을 추가할 때, <code>Object.is()</code>메소드를 이용해서 두 값을 비교한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object.is(10,10) &#x2F;&#x2F; true</span><br><span class="line">Object.is(10, &#39;10&#39;) &#x2F;&#x2F; false</span><br><span class="line">Object.is(&#123;&#125;, &#123;&#125;) &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><h3 id="Set을-배열로-바꾸기"><a href="#Set을-배열로-바꾸기" class="headerlink" title="Set을 배열로 바꾸기"></a>Set을 배열로 바꾸기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const foo &#x3D; new Set([&#39;Iphone&#39;, &#39;Galaxy&#39;])</span><br><span class="line">const fooInArray &#x3D; [ ...foo ];</span><br><span class="line">console.log(fooInArray) &#x2F;&#x2F; [&#39;Iphone&#39;, &#39;Galaxy&#39;]</span><br></pre></td></tr></table></figure><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><ul><li>add</li><li>size</li><li>has : set에 값이 존재하는지 확인. true / false 반환</li><li>delete(값) : set에서 값 제거</li><li>clear() : set에서 모든 값을 제거</li></ul><p>만약 add를 통해 값을 추가할 때, 이미 그 값이 존재한다면 무시된다.</p><p>출처 : <a href="https://medium.com/@khwsc1/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-es6-set%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90-9b7294dfba99" target="_blank" rel="noopener">HyeoKoo Alex Kwon</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;es6 -set&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://jbj828.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://jbj828.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Coding Test Level1 - Day2</title>
    <link href="http://jbj828.github.io/2020/04/08/CT-level1-day2/"/>
    <id>http://jbj828.github.io/2020/04/08/CT-level1-day2/</id>
    <published>2020-04-08T06:30:25.000Z</published>
    <updated>2020-04-08T10:18:23.537Z</updated>
    
    <content type="html"><![CDATA[<p>coding test level1</p><a id="more"></a><h4 id="문자열-내림차순으로-배치하기"><a href="#문자열-내림차순으로-배치하기" class="headerlink" title="문자열 내림차순으로 배치하기"></a>문자열 내림차순으로 배치하기</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function solution(s)&#123;</span><br><span class="line">  return s.split(&#39;&#39;).sort().reverse().join(&#39;&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="문자열-다루기-기본"><a href="#문자열-다루기-기본" class="headerlink" title="문자열 다루기 기본"></a>문자열 다루기 기본</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function solution(s)&#123;</span><br><span class="line">  var regex &#x3D; &#x2F;^\d&#123;6&#125;$|^\d&#123;4&#125;$&#x2F;;</span><br><span class="line">  return regex.test(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="서울에서-김서방-찾기"><a href="#서울에서-김서방-찾기" class="headerlink" title="서울에서 김서방 찾기"></a>서울에서 김서방 찾기</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function findKim(seoul)&#123;</span><br><span class="line">  var idx &#x3D; seoul.indexOf(&quot;Kim&quot;);</span><br><span class="line">  return &#96;김서방은 $&#123;idx&#125;에 있다&#96;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="소수-찾기"><a href="#소수-찾기" class="headerlink" title="소수 찾기"></a>소수 찾기</h4><p> <em>Failed</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function solution(n) &#123;</span><br><span class="line">    const s &#x3D; new Set();</span><br><span class="line">    for (let i &#x3D; 1; i &lt;&#x3D; n; i +&#x3D; 2) &#123;</span><br><span class="line">        s.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    s.delete(1);</span><br><span class="line">    s.add(2);</span><br><span class="line">    for (let j &#x3D; 3; j &lt; Math.sqrt(n); j++) &#123;</span><br><span class="line">        if (s.has(j)) &#123;</span><br><span class="line">            for (let k &#x3D; j * 2; k &lt;&#x3D; n; k +&#x3D; j) &#123;</span><br><span class="line">                s.delete(k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return s.size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="수박수박수박수…"><a href="#수박수박수박수…" class="headerlink" title="수박수박수박수…"></a>수박수박수박수…</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function solution(n)&#123;</span><br><span class="line">  let result &#x3D; &quot;수박&quot;</span><br><span class="line"></span><br><span class="line">  result &#x3D; result.repeat(n-1).substring(0,n);</span><br><span class="line"></span><br><span class="line">  return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="문자열을-정수로-바꾸기"><a href="#문자열을-정수로-바꾸기" class="headerlink" title="문자열을 정수로 바꾸기"></a>문자열을 정수로 바꾸기</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function solution(str)&#123;</span><br><span class="line">  return str&#x2F;1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;coding test level1&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/categories/Coding-Test/"/>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/tags/Coding-Test/"/>
    
  </entry>
  
  <entry>
    <title>Jest Testing Framework</title>
    <link href="http://jbj828.github.io/2020/04/08/Test-jest/"/>
    <id>http://jbj828.github.io/2020/04/08/Test-jest/</id>
    <published>2020-04-08T03:30:25.000Z</published>
    <updated>2020-04-09T08:13:59.474Z</updated>
    
    <content type="html"><![CDATA[<p>Jest Testing Framework</p><a id="more"></a><h4 id="Setting-up-Jest"><a href="#Setting-up-Jest" class="headerlink" title="Setting up Jest"></a>Setting up Jest</h4><p><code>npm i jest --save-dev</code></p><p>Next, create a <code>test</code> script in <code>package.json</code>. The script itself is <code>jest</code>. This allows you to use <code>npm test</code> to run the Jest test suite.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;node src&#x2F;index.js&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;env-cmd -f .&#x2F;config&#x2F;dev.env nodemon src&#x2F;index.js&quot;,</span><br><span class="line">    &quot;test&quot;: &quot;jest&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>Now, you’ll need to create a test suite. This is a file in your project that ends with <code>.test.js</code>. The file extension allows Jest to find and run the test suites for your project.</p><h4 id="Creating-a-Test-Case"><a href="#Creating-a-Test-Case" class="headerlink" title="Creating a Test Case"></a>Creating a Test Case</h4><p>You can add a test case to a test suite using the <code>test</code> function. Jest provides various functions as global variables in your test suite files. <code>test</code> is one of them. The first argument to <code>test</code> is the name of your test case. The second argument to <code>test</code> is the test function itself.</p><p>If the test function throws an error, the test cast will fail. If the test function doesn’t throw an error, the test case will pass.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test(&#39;Hello World&#39;, ()&#x3D;&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(&#39;This should fail&#39;, ()&#x3D;&gt;&#123;</span><br><span class="line">  throw new Error(&quot;Failure!&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Ref : The Complete Node.js Dev Course by Andrew Mead</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jest Testing Framework&lt;/p&gt;
    
    </summary>
    
    
      <category term="Test" scheme="http://jbj828.github.io/categories/Test/"/>
    
    
      <category term="Test" scheme="http://jbj828.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Coding Test Level1 - Day1</title>
    <link href="http://jbj828.github.io/2020/04/07/Al-PS1/"/>
    <id>http://jbj828.github.io/2020/04/07/Al-PS1/</id>
    <published>2020-04-07T03:30:25.000Z</published>
    <updated>2020-04-08T06:30:10.404Z</updated>
    
    <content type="html"><![CDATA[<p>coding test level1</p><a id="more"></a><h4 id="2016년-a월-b일의-요일을-구하시오"><a href="#2016년-a월-b일의-요일을-구하시오" class="headerlink" title="2016년 a월 b일의 요일을 구하시오"></a>2016년 a월 b일의 요일을 구하시오</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function getDayName(a, b)&#123;</span><br><span class="line">  let dayName &#x3D; new Date(2016, a-1, b).toString().slice(0,3).toUpperCase()</span><br><span class="line"></span><br><span class="line">  return dayName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="단어-s의-가운데-글자를-반환하는-함수-구하기-단어의-길이가-짝수라면-가운데-두글자를-반환"><a href="#단어-s의-가운데-글자를-반환하는-함수-구하기-단어의-길이가-짝수라면-가운데-두글자를-반환" class="headerlink" title="단어 s의 가운데 글자를 반환하는 함수 구하기. 단어의 길이가 짝수라면 가운데 두글자를 반환."></a>단어 s의 가운데 글자를 반환하는 함수 구하기. 단어의 길이가 짝수라면 가운데 두글자를 반환.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function solution(s)&#123;</span><br><span class="line">    const wordLength &#x3D; s.length;</span><br><span class="line">    const middlePoint &#x3D; Math.floor(wordLength &#x2F; 2 );</span><br><span class="line"></span><br><span class="line">    if(wordLength % 2 &#x3D;&#x3D;&#x3D; 0)&#123;</span><br><span class="line">        return s[middlePoint-1].concat(s[middlePoint]);</span><br><span class="line">    &#125; else if(wordLength % 2 &#x3D;&#x3D;&#x3D; 1)&#123;</span><br><span class="line">        return s[middlePoint];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="같은-숫자는-싫어"><a href="#같은-숫자는-싫어" class="headerlink" title="같은 숫자는 싫어"></a>같은 숫자는 싫어</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function solution(arr)&#123;</span><br><span class="line">  return arr.filter((val, index) &#x3D;&gt; val !&#x3D;&#x3D; arr[index +1])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="나누어-떨어지는-숫자-배열"><a href="#나누어-떨어지는-숫자-배열" class="headerlink" title="나누어 떨어지는 숫자 배열"></a>나누어 떨어지는 숫자 배열</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function solution(arr, divisor)&#123;</span><br><span class="line">  var answer &#x3D; [];</span><br><span class="line"></span><br><span class="line">  arr.map((o) &#x3D;&gt; &#123;</span><br><span class="line">    o % divisor &#x3D;&#x3D;&#x3D; 0 &amp;&amp; answer.push(o)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return answer.length ? answer.sort((a,b) &#x3D;&gt; a-b) : [-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="두-정수의-합"><a href="#두-정수의-합" class="headerlink" title="두 정수의 합"></a>두 정수의 합</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function adder(a, b)&#123;</span><br><span class="line">  let result &#x3D; 0;</span><br><span class="line"></span><br><span class="line">  return (a+b)*(Math.abs(b-a)+1)&#x2F;2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="문자열-내-마음대로-정렬하기"><a href="#문자열-내-마음대로-정렬하기" class="headerlink" title="문자열 내 마음대로 정렬하기"></a>문자열 내 마음대로 정렬하기</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function solution(strings, n) &#123;</span><br><span class="line"></span><br><span class="line">    return strings.sort((s1, s2) &#x3D;&gt; s1[n] &#x3D;&#x3D;&#x3D; s2[n] ? s1.localeCompare(s2) : s1[n].localeCompare(s2[n]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="문자열-내-p와-y의-개수"><a href="#문자열-내-p와-y의-개수" class="headerlink" title="문자열 내 p와 y의 개수"></a>문자열 내 p와 y의 개수</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function numPY(s)&#123;</span><br><span class="line">  return s.match(&#x2F;p&#x2F;ig).length &#x3D;&#x3D; s.match(&#x2F;y&#x2F;ig).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>match()</code> 메서드는 문자열이 정규식과 매치되는 부분을 검색한다.</li><li><code>str.match(regexp)</code></li><li>문자열이 정규식과 일치하면, 일치하는 전체 문자열을 첫 번째 요소로 포함하는 <code>Array</code>를 반환한 다음 괄호 안에 캡처된 결과가 온다. 일치하는 것이 없으면 <code>null</code>이 반환.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;coding test level1&lt;/p&gt;
    
    </summary>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/categories/Coding-Test/"/>
    
    
      <category term="Coding Test" scheme="http://jbj828.github.io/tags/Coding-Test/"/>
    
  </entry>
  
  <entry>
    <title>Greedy Algorithm &amp; Divide and Conquer</title>
    <link href="http://jbj828.github.io/2020/04/06/Al-greedy-algorithm/"/>
    <id>http://jbj828.github.io/2020/04/06/Al-greedy-algorithm/</id>
    <published>2020-04-06T09:30:25.000Z</published>
    <updated>2020-04-06T13:43:15.886Z</updated>
    
    <content type="html"><![CDATA[<p>Greedy Algorithm &amp; Divide and Conquer</p><a id="more"></a><h2 id="Magic-Framework"><a href="#Magic-Framework" class="headerlink" title="Magic Framework"></a>Magic Framework</h2><img src="/2020/04/06/Al-greedy-algorithm/magicFramework.PNG" class="" width="500" height="400" title="magicFramework"><h2 id="Greedy-Algorithm"><a href="#Greedy-Algorithm" class="headerlink" title="Greedy Algorithm"></a>Greedy Algorithm</h2><ul><li>Greedy Algorithm is an algorithmic paradigm that builds up a solution piece by piece.</li><li>It always chooses the next piece that offers <code>the most obvious and immediate benefit</code>.</li><li>Greedy fits perfectly for those solutions in which choosing a locally optimal solution also leads to global optimal solution(aka ‘Greedy Choice’).</li></ul><h2 id="Divide-amp-Conquer"><a href="#Divide-amp-Conquer" class="headerlink" title="Divide &amp; Conquer"></a>Divide &amp; Conquer</h2><ul><li>Divide &amp; Conquer is an algorithm design paradigm which works by recursively breaking down a problem into sub-problems of similar type, until these become simple enough to be solved directly. The solutions to the sub-problems are then combined to give a solution to the original problem.</li></ul><p>출처 : “Data Structures &amp; Algorithms” by DS GUY</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Greedy Algorithm &amp;amp; Divide and Conquer&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Adding Images to the User Profile &amp; Serving up Files</title>
    <link href="http://jbj828.github.io/2020/04/06/NodeJS-add-image/"/>
    <id>http://jbj828.github.io/2020/04/06/NodeJS-add-image/</id>
    <published>2020-04-06T03:46:25.000Z</published>
    <updated>2020-04-06T02:55:51.533Z</updated>
    
    <content type="html"><![CDATA[<p>Adding Images to the User Profile &amp; Serving up Files</p><a id="more"></a><h2 id="Adding-Images-to-the-User-Profile"><a href="#Adding-Images-to-the-User-Profile" class="headerlink" title="Adding Images to the User Profile"></a>Adding Images to the User Profile</h2><p>A new field needs to be added to the user model to store the avatar image data. The snippet below adds <code>avatar</code> on the user with the type of <code>Buffer</code>. The <code>Buffer</code> type should be used when storing binary data, which is exactly the type of data that multer provides.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const userSchema &#x3D; new mongoose.Schema(&#123;</span><br><span class="line">  avatar : &#123;</span><br><span class="line">    type : Buffer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The avatar upload route will be able to change the user profile data, so the route should be put behind authentication. The handler function grabs the binary data and stores it on the <code>avatar</code> field. Finally, the changes are saved.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.post(&#39;&#x2F;users&#x2F;me&#x2F;avatar&#39;, auth, uploda.single(&#39;upload&#39;), async (req, res) &#x3D;&gt; &#123;</span><br><span class="line">  req.user.avatar &#x3D; req.file.buffer</span><br><span class="line">  await req.user.save()</span><br><span class="line">  res.send()</span><br><span class="line">&#125;, (error, req, res, next) &#x3D;&gt; &#123;</span><br><span class="line">  res.status(400).send(&#123; error : error.message&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><h2 id="Serving-up-Files"><a href="#Serving-up-Files" class="headerlink" title="Serving up Files"></a>Serving up Files</h2><p>This is how we serve up user profile images. These images will be served as if they were static assets for the application.</p><p>Serving up the user avatars will require two pieces of data from the server. The first is the image data, and the second is the <code>Content-Type</code> header. The image data is stored on the user profile. The header should be set equal to <code>image/png</code> which lets the client know they’re getting a PNG image back.</p><p>The route below fetches the image data and sets the <code>Content-Type</code> header for the response. The URL could be visited to view the profile picture.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">router.get(&#39;&#x2F;users&#x2F;:id&#x2F;avatar&#39;, async (req, res) &#x3D;&gt;&#123;</span><br><span class="line">  try &#123;</span><br><span class="line">      const user &#x3D; await User.findById(req.params.id)</span><br><span class="line"></span><br><span class="line">      if(!user || !user.avatar)&#123;</span><br><span class="line">        throw new Error()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      res.set(&#39;Content-Type&#39;, &#39;image&#x2F;jpg&#39;)</span><br><span class="line">      res.send(user.avatar)</span><br><span class="line">  &#125; catch(e)&#123;</span><br><span class="line">      res.status(404).send()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>출처 : NodeJS course on Udemy by Andrew Mead</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Adding Images to the User Profile &amp;amp; Serving up Files&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Handling Express Errors</title>
    <link href="http://jbj828.github.io/2020/04/05/NodeJS-Express-Errors/"/>
    <id>http://jbj828.github.io/2020/04/05/NodeJS-Express-Errors/</id>
    <published>2020-04-05T13:46:25.000Z</published>
    <updated>2020-04-05T14:07:10.553Z</updated>
    
    <content type="html"><![CDATA[<p>Handling Express Errors</p><a id="more"></a><p>We’ll customize the errors that multer provides. This will give you complete control of what sort of response the client gets when their upload is rejected.</p><h3 id="Handling-Express-Errors"><a href="#Handling-Express-Errors" class="headerlink" title="Handling Express Errors"></a>Handling Express Errors</h3><p>You can handle errors from middleware function by providing a function to Express. As shown below, a new function is passed as the final argument to <code>router.post</code>. This function accepts <code>error, req, res, next</code>. This call signature lets Express know the function is designed to handle errors.</p><p>The function itself sends back a JSON response with the error message from multer.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.post(&#39;&#x2F;users&#x2F;me&#x2F;avatar&#39;, upload.single(&#39;avatar&#39;), (req,res) &#x3D;&gt; &#123;</span><br><span class="line">  res.send()</span><br><span class="line">&#125;, (error, req, res, next) &#x3D;&gt; &#123;</span><br><span class="line">  res.status(400).send(&#123; error : error.message &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Handling Express Errors&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>File Uploads with Multer</title>
    <link href="http://jbj828.github.io/2020/04/05/NodeJS-multer/"/>
    <id>http://jbj828.github.io/2020/04/05/NodeJS-multer/</id>
    <published>2020-04-05T11:46:25.000Z</published>
    <updated>2020-04-05T12:15:23.872Z</updated>
    
    <content type="html"><![CDATA[<p>multer</p><a id="more"></a><h3 id="Multer"><a href="#Multer" class="headerlink" title="Multer"></a>Multer</h3><p>Multer is a library in the Express ecosystem that allows your Express application to easily support file uploads. It couldn’t be easier.</p><p>After install the multer library, multer can then be configured to fit your specific needs. The example below shows off a basic configuration where <code>dest</code> ids set to <code>avatars</code>. This will store all uploaded files in a directory called <code>avatars</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const multer &#x3D; require(&#39;multer&#39;)</span><br><span class="line"></span><br><span class="line">const upload &#x3D; multer(&#123;</span><br><span class="line">  dest : &#39;avatars&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Multer is then added as middleware for the specific endpoint that should allow for file uploads. The route below is expecting a single <code>avatar</code> field on the submitted form.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.post(&#39;&#x2F;users&#x2F;me&#x2F;avatar&#39;, upload.single(&#39;avatar&#39;), (req,res)&#x3D;&gt;&#123;</span><br><span class="line">  res.send()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;multer&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
</feed>
