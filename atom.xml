<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Developer Javit</title>
  
  <subtitle>Slowly and Steadily</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jbj828.github.io/"/>
  <updated>2020-03-17T08:27:45.096Z</updated>
  <id>http://jbj828.github.io/</id>
  
  <author>
    <name>Jay Chung</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Promise</title>
    <link href="http://jbj828.github.io/2020/03/15/NodeJS-Promise/"/>
    <id>http://jbj828.github.io/2020/03/15/NodeJS-Promise/</id>
    <published>2020-03-15T11:46:25.000Z</published>
    <updated>2020-03-17T08:27:45.096Z</updated>
    
    <content type="html"><![CDATA[<p>promise</p><a id="more"></a><p>출처 : <a href="https://joshua1988.github.io/web-development/javascript/promise-for-beginners/" target="_blank" rel="noopener">Captain Pangyo</a><br>공부목적을 위해 이용했습니다.</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul><li><p>“A promise is an object that may produce a single value some time in the future”</p></li><li><p>프로미스는 자바스크립트 비동기 처리에 사용되는 객체입니다. </p></li></ul><h3 id="Why-we-need-it"><a href="#Why-we-need-it" class="headerlink" title="Why we need it?"></a>Why we need it?</h3><ul><li>프로미스는 주로 서버에서 받아온 데이터를 화면에 표시할 때 사용한다. 일반적으로 웹 애플리케이션을 구현할 때 서버에서 데이터를 요청하고 받아오기 위해 사용한다.</li></ul><p>비동기 처리를 위해 콜백 함수를 사용한 경우</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const doWorkCallback &#x3D; (callback) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; callback(&#39;Error&#39;, undefined);</span><br><span class="line">        callback(undefined, [1, 3, 4])</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doWorkCallback((error, result) &#x3D;&gt; &#123;</span><br><span class="line">    if (error) &#123;</span><br><span class="line">        return console.log(error);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log(result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>비동기 처리를 위해 Promise API를 사용한 경우</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const doWorkPromise &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        resolve([2, 3, 4]);</span><br><span class="line">        reject(&#39;Thing went wrong!&#39;)</span><br><span class="line">    &#125;, 2000)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">doWorkPromise.then((result) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;Success&#39;, result)</span><br><span class="line">&#125;).catch((error) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;Error&#39;, error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise의-3가지-상태-states"><a href="#Promise의-3가지-상태-states" class="headerlink" title="Promise의 3가지 상태(states)"></a>Promise의 3가지 상태(states)</h3><p>여기서 말하는 상태란 프로미스의 처리 과정을 의미한다. <code>new Promise()</code>로 프로미스를 생성하고 종료될 때까지 3가지 상태를 갖는다.</p><ul><li>Pending(대기) : 비동기 처리 로직이 아직 완료되지 않은 상태</li><li>Fulfilled(이행) : 비동기 처리가 완료되어 프로미스가 결과 값을 반환해준 상태</li><li>Rejected(실패) : 비동기 처리가 실패하거나 오류가 발생한 상태</li></ul><h4 id="Pending"><a href="#Pending" class="headerlink" title="Pending"></a>Pending</h4><p>먼저 <code>new Promise()</code> 메서드를 호출하면 대기(Pending) 상태가 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Promise();</span><br></pre></td></tr></table></figure><p><code>new Promise()</code> 메서드를 호출할 때 콜백 함수를 선언할 수 있고, 콜백 함수의 인자는 <code>resolve</code>, <code>reject</code>입니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Promise(function(resolve, reject)&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Fulfilled-이행"><a href="#Fulfilled-이행" class="headerlink" title="Fulfilled(이행)"></a>Fulfilled(이행)</h4><p>여기서 콜백 함수의 인자 <code>resolve</code>를 아래와 같이 실행하면 이행(Fulfilled) 상태가 됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Promise(function(resolve, reject)&#123;</span><br><span class="line">  resolve();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>그리고 이행 상태가 되면 아래와 같이 <code>then()</code>을 이용하여 처리 결과 값을 받을 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function getData()&#123;</span><br><span class="line">  return new Promise(function(resolve, reject)&#123;</span><br><span class="line">    var data &#x3D; 100;</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; resolve()의 결과 값 data를 resolveData로 받음</span><br><span class="line">getData().then(function(resolveData)&#123;</span><br><span class="line">  console.log(resolveData); &#x2F;&#x2F; 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Rejected-실패"><a href="#Rejected-실패" class="headerlink" title="Rejected(실패)"></a>Rejected(실패)</h4><p><code>new Promise()</code>로 프로미스 객체를 생성하면 콜백 함수 인자로 <code>resolve</code>와 <code>reject</code>를 사용할 수 있다. 여기서 <code>reject</code>를 아래와 같이 호출하면 실패(Rejected) 상태가 된다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Promise(function(resolve, reject)&#123;</span><br><span class="line">  reject();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>그리고 실패 상태가 되면 실패한 이유(실패 처리의 결과 값)를 <code>catch()</code>로 받을 수 있다.ss</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function getData()&#123;</span><br><span class="line">  return new Promise(function(resolve, reject)&#123;</span><br><span class="line">    reject(new Error(&quot;Request is failed&quot;))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; reject()의 결과 값 Error를 err에 받음</span><br><span class="line">getData().then().catch(function(err)&#123;</span><br><span class="line">  console.log(err); &#x2F;&#x2F; Error: Request is failed</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img src="/2020/03/15/NodeJS-Promise/promise.PNG" class="" width="500" height="300" title="promise"><p>프로미스 처리 흐름(출처 : MDN)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function getData() &#123;</span><br><span class="line">  return new Promise(function(resolve, reject) &#123;</span><br><span class="line">    $.get(&#39;url 주소&#x2F;products&#x2F;1&#39;, function(response) &#123;</span><br><span class="line">      if (response) &#123;</span><br><span class="line">        resolve(response);</span><br><span class="line">      &#125;</span><br><span class="line">      reject(new Error(&quot;Request is failed&quot;));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 위 $.get() 호출 결과에 따라 &#39;response&#39; 또는 &#39;Error&#39; 출력</span><br><span class="line">getData().then(function(data) &#123;</span><br><span class="line">  console.log(data); &#x2F;&#x2F; response 값 출력</span><br><span class="line">&#125;).catch(function(err) &#123;</span><br><span class="line">  console.error(err); &#x2F;&#x2F; Error 출력</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위 코드는 서버에서 제대로 응답을 받아오면 resolve() 메서드를 호출하고, 응답이 없으면 reject() 메서드를 호출하는 예제입니다. 호출된 메서드에 따라 then()이나 catch()로 분기하여 응답 결과 또는 오류를 출력합니다.</p><h3 id="Promise-Chaining"><a href="#Promise-Chaining" class="headerlink" title="Promise Chaining"></a>Promise Chaining</h3><p>Promise chaining is a syntax that allows you to chain together multiple asychronous tasks in a specific order. This is great for complex code where one asynchronous task needs to be performed after the completion of a different asynchronous task.</p><p>With the dummy asychronous function defined, promise chaining can be used to call <code>add</code> twice.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const add &#x3D; (a, b) &#x3D;&gt; &#123;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            resolve(a + b);</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(1, 2).then((sum) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(sum)</span><br><span class="line"></span><br><span class="line">    add(sum, 5).then((sum2) &#x3D;&gt; &#123;</span><br><span class="line">        console.log(sum2)</span><br><span class="line">    &#125;).catch((e) &#x3D;&gt; &#123;</span><br><span class="line">        console.log(e)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).catch((e) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise chaining occurs when the then callback function returns a promise. This allows<br>you to chain on another then call which will run when the second promise is fulfilled. catch<br>can still be called to handle any errors that might occur along the way.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add(1, 1).then((sum) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(sum)</span><br><span class="line">    return add(sum, 4)</span><br><span class="line">&#125;).then((sum2) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(sum2)</span><br><span class="line">&#125;).catch((e) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(e);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;promise&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Default Function Parameters</title>
    <link href="http://jbj828.github.io/2020/03/12/ES6-default-function-parameters/"/>
    <id>http://jbj828.github.io/2020/03/12/ES6-default-function-parameters/</id>
    <published>2020-03-12T14:46:25.000Z</published>
    <updated>2020-03-12T15:00:38.686Z</updated>
    
    <content type="html"><![CDATA[<p>default function parameters</p><a id="more"></a><h3 id="Default-Function-Parameters"><a href="#Default-Function-Parameters" class="headerlink" title="Default Function Parameters"></a>Default Function Parameters</h3><p>ES6 provides a new syntax to set default values for function arguments.</p><p>Function parameters are <code>undefined</code> unless an argument value is provided when the function is called. ES6 now allows function parameters to be configured with a custom default value.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const greeter &#x3D; (name &#x3D; &#39;user&#39;, age) &#x3D;&gt; &#123;</span><br><span class="line"> console.log(&#39;Hello &#39; + name)</span><br><span class="line">&#125;</span><br><span class="line">greeter(&#39;Andrew&#39;) &#x2F;&#x2F; Will print: Hello Andrew</span><br><span class="line">greeter() &#x2F;&#x2F; Will print: Hello user</span><br></pre></td></tr></table></figure><p>This syntax can also be used to provide default values when using ES6 destructuring. The <code>transaction</code> function below shows this off by providing a default value for <code>stock</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const transaction &#x3D; (type, &#123; label, stock &#x3D; 0 &#125; &#x3D; &#123;&#125;) &#x3D;&gt; &#123;</span><br><span class="line"> console.log(type, label, stock)</span><br><span class="line">&#125;</span><br><span class="line">transaction(&#39;order&#39;)</span><br></pre></td></tr></table></figure><br><p><em>reference : Udemy ‘The Complete Node.js Developer course’ by Andrew Mead</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;default function parameters&lt;/p&gt;
    
    </summary>
    
    
      <category term="ES6" scheme="http://jbj828.github.io/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://jbj828.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Browser HTTP Requests with Fetch</title>
    <link href="http://jbj828.github.io/2020/03/12/NodeJS-fetch-API/"/>
    <id>http://jbj828.github.io/2020/03/12/NodeJS-fetch-API/</id>
    <published>2020-03-12T14:46:25.000Z</published>
    <updated>2020-03-12T15:00:44.237Z</updated>
    
    <content type="html"><![CDATA[<p>fetch API</p><a id="more"></a><p>This chapter shows you how to make HTTP AJAX requests from the browser.<br><br></p><h3 id="The-Fetch-API"><a href="#The-Fetch-API" class="headerlink" title="The Fetch API"></a>The Fetch API</h3><p>Web APIs provide you with a way to make HTTP requests from JavaScript in the browser. This is done using the <code>fetch</code> function. <code>fetch</code> expects to be called with the URL as the first argument. It sends off the HTTP request and gives you back the response.</p><p>The <code>fetch</code> call below is used to fetch the weather for Boston. An if statement is then used to either print the forecast or the error message.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch(&#39;http:&#x2F;&#x2F;localhost:3000&#x2F;weather?address&#x3D;Boston&#39;).then((response) &#x3D;&gt; &#123;</span><br><span class="line"> response.json().then((data) &#x3D;&gt; &#123;</span><br><span class="line"> if (data.error) &#123;</span><br><span class="line"> console.log(data.error)</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> console.log(data.location)</span><br><span class="line"> console.log(data.forecast)</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><p><em>reference : Udemy ‘The Complete Node.js Developer course’ by Andrew Mead</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fetch API&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>The Query String</title>
    <link href="http://jbj828.github.io/2020/03/12/NodeJS-Query-String/"/>
    <id>http://jbj828.github.io/2020/03/12/NodeJS-Query-String/</id>
    <published>2020-03-12T05:46:25.000Z</published>
    <updated>2020-03-12T14:49:11.956Z</updated>
    
    <content type="html"><![CDATA[<p>Query String</p><a id="more"></a><h4 id="The-Query-String"><a href="#The-Query-String" class="headerlink" title="The Query String"></a>The Query String</h4><p>The query string is a portion of the URL that allows you to provide additional information to the server. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.get(&#39;&#x2F;weather&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(req.query)</span><br><span class="line">    if (!req.query.address) &#123;</span><br><span class="line">        return res.send(&#123;</span><br><span class="line">            error: &quot;You must provide an address.&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        forcast: &#39;forcast&#39;,</span><br><span class="line">        location: &#39;location&#39;,</span><br><span class="line">        address: req.query.address</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Query String&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>HTTP/HTTPS Request without library</title>
    <link href="http://jbj828.github.io/2020/03/11/NodeJS-Http-request/"/>
    <id>http://jbj828.github.io/2020/03/11/NodeJS-Http-request/</id>
    <published>2020-03-11T05:46:25.000Z</published>
    <updated>2020-03-11T06:12:03.290Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP Request without library</p><a id="more"></a><p>This is the low level access to the NodeJS. Without using library, we can also get the http/https request.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const https &#x3D; require(&quot;https&quot;);</span><br><span class="line"></span><br><span class="line">const url &#x3D; &#39;https:&#x2F;&#x2F;api.darksky.net&#x2F;forecast&#x2F;924276c331b8a398db96364a44fd10a2&#x2F;40,-50?units&#x3D;si&#39;</span><br><span class="line"></span><br><span class="line">const request &#x3D; https.request(url, (response) &#x3D;&gt; &#123;</span><br><span class="line">    let data &#x3D; &#39;&#39;;</span><br><span class="line"></span><br><span class="line">    response.on(&#39;data&#39;, (chunk) &#x3D;&gt; &#123;</span><br><span class="line">        data &#x3D; data + chunk.toString();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    response.on(&#39;end&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">        const body &#x3D; JSON.parse(data);</span><br><span class="line">        console.log(body);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">request.on(&#39;error&#39;, (error) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;An error&#39;, error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">request.end();</span><br></pre></td></tr></table></figure><p>This is the console result</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  latitude: 40,  </span><br><span class="line">  longitude: -50,</span><br><span class="line">  timezone: &#39;Etc&#x2F;GMT+3&#39;,</span><br><span class="line">  currently: &#123;</span><br><span class="line">    time: 1583906798,</span><br><span class="line">    summary: &#39;Partly Cloudy&#39;,</span><br><span class="line">    icon: &#39;partly-cloudy-night&#39;,</span><br><span class="line">    precipIntensity: 0,</span><br><span class="line">    precipProbability: 0,</span><br><span class="line">    temperature: 16.48,</span><br><span class="line">    apparentTemperature: 16.48,</span><br><span class="line">    dewPoint: 12.34,</span><br><span class="line">    humidity: 0.77,</span><br><span class="line">    pressure: 1028,</span><br><span class="line">    windSpeed: 5.67,</span><br><span class="line">    windGust: 9.52,</span><br><span class="line">    windBearing: 248,</span><br><span class="line">    cloudCover: 0.41,</span><br><span class="line">    uvIndex: 0,</span><br><span class="line">    visibility: 16.093,</span><br><span class="line">    ozone: 330.9</span><br><span class="line">  &#125;,</span><br><span class="line">  hourly: &#123;</span><br><span class="line">    summary: &#39;Windy in the afternoon and evening.&#39;,</span><br><span class="line">    icon: &#39;partly-cloudy-day&#39;,</span><br><span class="line">    data: [</span><br><span class="line">      [Object], [Object], [Object], [Object],</span><br><span class="line">      [Object], [Object], [Object], [Object],</span><br><span class="line">      [Object], [Object], [Object], [Object],</span><br><span class="line">      [Object], [Object], [Object], [Object],</span><br><span class="line">      [Object], [Object], [Object], [Object],</span><br><span class="line">      [Object], [Object], [Object], [Object],</span><br><span class="line">      [Object], [Object], [Object], [Object],</span><br><span class="line">      [Object], [Object], [Object], [Object],</span><br><span class="line">      [Object], [Object], [Object], [Object],</span><br><span class="line">      [Object], [Object], [Object], [Object],</span><br><span class="line">      [Object], [Object], [Object], [Object],</span><br><span class="line">      [Object], [Object], [Object], [Object],</span><br><span class="line">      [Object]</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  daily: &#123;</span><br><span class="line">    summary: &#39;Rain on Friday through next Wednesday.&#39;,</span><br><span class="line">    icon: &#39;rain&#39;,</span><br><span class="line">    data: [</span><br><span class="line">      [Object], [Object],</span><br><span class="line">      [Object], [Object],</span><br><span class="line">      [Object], [Object],</span><br><span class="line">      [Object], [Object]</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  flags: &#123;</span><br><span class="line">    sources: [</span><br><span class="line">      &#39;cmc&#39;,   &#39;gfs&#39;,</span><br><span class="line">      &#39;icon&#39;,  &#39;isd&#39;,</span><br><span class="line">      &#39;madis&#39;, &#39;nam&#39;,</span><br><span class="line">      &#39;sref&#39;</span><br><span class="line">    ],</span><br><span class="line">    &#39;nearest-station&#39;: 0,</span><br><span class="line">    units: &#39;si&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  offset: -3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTP Request without library&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Callback Function</title>
    <link href="http://jbj828.github.io/2020/03/11/NodeJS-callback-function/"/>
    <id>http://jbj828.github.io/2020/03/11/NodeJS-callback-function/</id>
    <published>2020-03-11T04:46:25.000Z</published>
    <updated>2020-03-10T15:06:06.721Z</updated>
    
    <content type="html"><![CDATA[<p>callback function on nodejs</p><a id="more"></a><h3 id="The-Callback-Function"><a href="#The-Callback-Function" class="headerlink" title="The Callback Function"></a>The Callback Function</h3><p>A callback function is a function that’s passed as an argument to another function.</p><p>Callback functions are at the core of asynchronous development. When you perform an asynchronous operation, you will provide Node with a callback function. Node will then call the callback when the async operation is complete. This is how you get access to the results of the async operation, whether it’s an HTTP request for JSON data or a query to a database for a user’s profile.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const add &#x3D; (a, b, callback) &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        callback(a + b)</span><br><span class="line">    &#125;, 2000)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(1, 4, (sum) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(sum) &#x2F;&#x2F; Should print: 5</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;callback function on nodejs&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Debugging Node.js</title>
    <link href="http://jbj828.github.io/2020/03/10/NodeJS-Debugging/"/>
    <id>http://jbj828.github.io/2020/03/10/NodeJS-Debugging/</id>
    <published>2020-03-10T04:46:25.000Z</published>
    <updated>2020-03-10T06:54:41.897Z</updated>
    
    <content type="html"><![CDATA[<p>Debugging</p><a id="more"></a><h3 id="Console-log"><a href="#Console-log" class="headerlink" title="Console.log"></a>Console.log</h3><br><h3 id="Node-Debugger"><a href="#Node-Debugger" class="headerlink" title="Node Debugger"></a>Node Debugger</h3><ul><li><p>NodeJS’ built-in Debugger</p></li><li><p>console창에 <code>node --inspect-brk app.js</code> : window용 // Mac은 <code>node inspect app.js</code></p></li><li><p>visit <strong><em>chrome://inspect</em></strong> in the Chrome Browser</p></li><li><p>Click <code>inspect</code> to open up the developer tools.</p></li><li><p>Click <code>play</code> icon on the right side of the monitor.</p></li><li><p>You can add breakpoints into your application to stop it at a specific point in the code. </p><ul><li><code>debugger</code>를 입력</li></ul></li><li><p>chrome창에서 아무 것도 안뜨면 <code>configure</code> 에서 IP주소랑 포트 입력</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Debugging&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="http://jbj828.github.io/2020/03/09/NodeJS-JSON-1/"/>
    <id>http://jbj828.github.io/2020/03/09/NodeJS-JSON-1/</id>
    <published>2020-03-09T04:46:25.000Z</published>
    <updated>2020-03-09T04:03:58.309Z</updated>
    
    <content type="html"><![CDATA[<p>study JSON</p><a id="more"></a><p><strong>JSON</strong> :  Javascript 객체 문법을 따르는 문자 기반의 데이터 포맷</p><p>JavaScript Object Notation (JSON)은 Javascript 객체 문법으로 구조화된 데이터를 표현하기 위한 문자 기반의 표준 포맷이다. 웹 어플리케이션에서 데이터를 전송할 때 일반적으로 사용한다(서버에서 클라이언트로 데이터를 전송하여 표현하려거나 반대의 경우).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; const book &#x3D; &#123;</span><br><span class="line">&#x2F;&#x2F;     title: &#39;Ego is the enemy&#39;,</span><br><span class="line">&#x2F;&#x2F;     author: &#39;Ryan Holiday&#39;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; const bookJSON &#x3D; JSON.stringify(book)</span><br><span class="line">&#x2F;&#x2F; fs.writeFileSync(&#39;1-json.json&#39;, bookJSON);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; const parsedData &#x3D; JSON.parse(bookJSON);</span><br><span class="line">&#x2F;&#x2F; console.log(parsedData.author);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; const dataBuffer &#x3D; fs.readFileSync(&#39;1-json.json&#39;);</span><br><span class="line">&#x2F;&#x2F; const dataJSON &#x3D; dataBuffer.toString();</span><br><span class="line">&#x2F;&#x2F; const data &#x3D; JSON.parse(dataJSON);</span><br><span class="line">&#x2F;&#x2F; console.log(data.title);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const dataBuffer &#x3D; fs.readFileSync(&#39;1-json.json&#39;);</span><br><span class="line">const data &#x3D; JSON.parse(dataBuffer);</span><br><span class="line">data.name &#x3D; &#39;Jay&#39;</span><br><span class="line">data.age &#x3D; &#39;26&#39;</span><br><span class="line">const newData &#x3D; JSON.stringify(data);</span><br><span class="line">fs.writeFileSync(&#39;1-json.json&#39;, newData);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;study JSON&lt;/p&gt;
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://jbj828.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>The Goal of 2020</title>
    <link href="http://jbj828.github.io/2020/03/08/self-Goal/"/>
    <id>http://jbj828.github.io/2020/03/08/self-Goal/</id>
    <published>2020-03-08T06:46:25.000Z</published>
    <updated>2020-03-15T14:40:45.504Z</updated>
    
    <content type="html"><![CDATA[<p>Goal of 2020</p><a id="more"></a><h3 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h3><p> <em><strong>프로그래밍은 노는 것이다. 스케쥴 짜서 공부할 필요 없다.</strong></em></p><h3 id="2020-Goal"><a href="#2020-Goal" class="headerlink" title="2020 Goal"></a>2020 Goal</h3><ol><li><strong>프로젝트 한 달 한 개 만들기</strong>(대단한거 만들 필요없다. 목표한 기능만 있는 것 만들기)</li><li><strong>한 달 책 한 권</strong>(인터넷 강의여도 됨, 즉 지식을 쌓는 데 한 달에 한 개)</li></ol><h4 id="프로젝트"><a href="#프로젝트" class="headerlink" title="프로젝트"></a>프로젝트</h4><ul><li>프로젝트에 필요한 지식들은 공부하면서 천천히 쌓기!</li><li>ex) Docker, AWS, Linux 등등</li></ul><h3 id="달-별-공부-목표"><a href="#달-별-공부-목표" class="headerlink" title="달 별 공부 목표"></a>달 별 공부 목표</h3><ul><li>3월 : NodeJS, IT인프라 책</li><li>4월 : 데이터 구조 및 알고리즘(강의), HTTP 책 읽기</li><li>5월 : AWS, 운영체제(대학강의)</li><li>6월 : Docker, 네트워크</li><li>7월 : 테스트 주도 개발 - 켄트벡 (저) 김창준 (역)</li><li>8월 : 리팩토링 - 파틴 파울러(저) 김지원 (역)</li><li>9월 : 디자인패턴</li><li>10월: </li><li>11월:</li><li>12월:</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Goal of 2020&lt;/p&gt;
    
    </summary>
    
    
      <category term="Goal" scheme="http://jbj828.github.io/categories/Goal/"/>
    
    
      <category term="Goal" scheme="http://jbj828.github.io/tags/Goal/"/>
    
  </entry>
  
  <entry>
    <title>Install NodeJS on Ubuntu Server</title>
    <link href="http://jbj828.github.io/2020/03/06/AWS-Install-NodeJS/"/>
    <id>http://jbj828.github.io/2020/03/06/AWS-Install-NodeJS/</id>
    <published>2020-03-06T04:46:25.000Z</published>
    <updated>2020-03-06T03:12:27.588Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu Server에 NodeJS 실습환경 구축</p><a id="more"></a><h3 id="NodeJS-설치"><a href="#NodeJS-설치" class="headerlink" title="NodeJS 설치"></a>NodeJS 설치</h3><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><p>참고 : <a href="https://github.com/nodesource/distributions/blob/master/README.md" target="_blank" rel="noopener">NodeSource</a></p><p>PPA를 통하여 최신 버전을 가져온다</p><p><code>curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -</code></p><p>우분투에 NodeJS를 설치<br><code>sudo apt-get install -y nodejs</code></p><p>NodeJS와 NPM이 잘 깔렸는지 확인<br><code>node -v</code><br><code>npm -v</code></p><p>NPM이 제 기능을 하게 하기 위해 다음 명령어 실행(이거 없으면 npm install 시 에러 날 확률이 높다)<br><code>sudo apt-get install build-essential</code></p><h4 id="NodeJS-Application-생성"><a href="#NodeJS-Application-생성" class="headerlink" title="NodeJS Application 생성"></a>NodeJS Application 생성</h4><p><code>cd /{디렉토리 이름a}</code><br><code>ls -al</code></p><p><code>sudo mkdir {디렉토리 이름b}</code><br><code>cd {디렉토리 이름b}</code></p><p><code>sudo chown ubuntu .</code> : 오너를 ubuntu로 바꾼다</p><br><p><strong>디렉토리에 웹 애플리케이션 생성</strong></p><p><code>npm init</code><br><code>ls -al</code></p><p><strong>ExpressJS 프레임웍 설치</strong></p><p><code>npm install express</code><br><code>ls -al</code><br><code>ls -al node_modules/</code></p><p><strong>웹 애플리케이션 구동</strong></p><p><code>vi app.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var express &#x3D; requier(&#39;express&#39;)</span><br><span class="line">var app &#x3D; express();</span><br><span class="line">app.get(&#39;&#x2F;&#39;, function(req, res)&#123;</span><br><span class="line">      res.send(&#39;Hello World&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(80, function()&#123;</span><br><span class="line">      console.log(&#39;Connected 80&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>sudo node app.js</code></p><p><code>{IP번호}:80</code> 을 브라우저 주소에 입력</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu Server에 NodeJS 실습환경 구축&lt;/p&gt;
    
    </summary>
    
    
      <category term="AWS" scheme="http://jbj828.github.io/categories/AWS/"/>
    
    
      <category term="AWS" scheme="http://jbj828.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>The method of Controlling AWS</title>
    <link href="http://jbj828.github.io/2020/03/06/AWS-ControlAWS/"/>
    <id>http://jbj828.github.io/2020/03/06/AWS-ControlAWS/</id>
    <published>2020-03-06T02:46:25.000Z</published>
    <updated>2020-03-06T02:40:59.877Z</updated>
    
    <content type="html"><![CDATA[<p>AWS를 제어하는 방법들</p><a id="more"></a><h3 id="Management-Console"><a href="#Management-Console" class="headerlink" title="Management Console"></a>Management Console</h3><ul><li>EC2를 생성하고 삭제하고 목록을 열람하는 기능을 제공</li><li>이러한 방식을 GUI(Graphical User Interface)라고 한다.</li></ul><h3 id="CLI-Command-Line-Interface"><a href="#CLI-Command-Line-Interface" class="headerlink" title="CLI(Command Line Interface)"></a>CLI(Command Line Interface)</h3><ul><li>명령어를 입력하여 컴퓨터를 제어하는 방식</li><li><code>aws ec2 describe-instances</code>  : Management Console에 나온 내용과 동일한 내용이 텍스트 형식으로 콘솔에 나타난다.</li><li>익숙해지면 GUI 방식보다 편리하다.</li><li>일련의 연속적인 작업을 한꺼번에 실행가능<ul><li><code>aws ec2 describe-instances | grep PublicIp</code>  : aws의 목록을 알아낸 후 PublicIp만의 텍스트를 추출한 것</li></ul></li></ul><h3 id="SDK-Software-Development-Kit"><a href="#SDK-Software-Development-Kit" class="headerlink" title="SDK(Software Development Kit)"></a>SDK(Software Development Kit)</h3><ul><li>프로그래밍을 통해 좀 더 섬세한 제어가 가능하도록 하기 위해 AWS에서 제공하는 도구</li><li>각각의 언어별로 다른 버전</li><li>언어별로 AWS 인프라를 제어할 수 있게 하는 개발 도구</li><li>자신이 사용할 수 있는 언어를 통해 AWS 인프라를 편리하게 제어 가능</li></ul><h3 id="API-Application-Programming-Interface"><a href="#API-Application-Programming-Interface" class="headerlink" title="API(Application Programming Interface)"></a>API(Application Programming Interface)</h3><ul><li>Restful API : Web을 통해 AWS의 인프라를 제어하거나 인프라의 상태를 알아낼 수 있는 상태</li><li>어떤 언어를 사용하건 상관없이 AWS의 인프라 사용 가능</li><li>직접 이용하는 건 복잡, 불편</li><li>그래서 SDK를 제공하는 것</li><li>직접 사용할 일은 없다.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AWS를 제어하는 방법들&lt;/p&gt;
    
    </summary>
    
    
      <category term="AWS" scheme="http://jbj828.github.io/categories/AWS/"/>
    
    
      <category term="AWS" scheme="http://jbj828.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>Connecting Dockerhub and Github</title>
    <link href="http://jbj828.github.io/2020/03/05/Docker-dockerhub-and-github/"/>
    <id>http://jbj828.github.io/2020/03/05/Docker-dockerhub-and-github/</id>
    <published>2020-03-05T01:46:25.000Z</published>
    <updated>2020-03-05T06:16:10.445Z</updated>
    
    <content type="html"><![CDATA[<p>Dockerhub와 Github 연동하기</p><a id="more"></a><h3 id="Dockerhub"><a href="#Dockerhub" class="headerlink" title="Dockerhub?"></a>Dockerhub?</h3><ul><li>도커의 이미지 용량은 메가에서 기가단위까지 거대하다. 이러한 큰 용량의 이미지를 Dockerhub를 통해 공개이미지로서 무료로 관리할 수 있게 만든 것.</li></ul><h3 id="Dockerhub와-Github-연동-이유"><a href="#Dockerhub와-Github-연동-이유" class="headerlink" title="Dockerhub와 Github 연동 이유?"></a>Dockerhub와 Github 연동 이유?</h3><ul><li>깃허브의 특정한 프로젝트에 있는 도커파일을 도커허브 측에서 자동으로 빌드를 수행해준다. 소스코드를 수정해서 깃허브에 업로드만 하면 자동으로 도커허브에서 그것을 감지해서 도커파일을 이용해 다시 빌드를 수행해주기 때문에 매우 쉽게 도커이미지를 컨테이너로 띄울 수 있게 된다.</li></ul><h3 id="과정"><a href="#과정" class="headerlink" title="과정"></a>과정</h3><ul><li>Dockerhub에서 Create a Repository</li><li>Github과 연동하여 해당 github repository와 연동</li><li>dockerhub에서 build 진행</li></ul><br><ul><li>빌드가 완료되면 우리의 서버에서 현재 구동 중인 모든 도커이미지를 제거해도 됨.</li><li><code>docker rm -f `docker ps -a -q`</code> : 컨테이너 삭제</li><li><code>docker rmi -f `docker images`</code>  : 이미지 삭제</li><li><code>docker ps -a</code> : 모든 이미지와 컨테이너 제거 확인</li></ul><br><p><strong>ReadMe 파일 만들기</strong></p><ul><li>Github에서 readme 파일 만들기<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Docker 실전 연습 예제입니다.</span><br><span class="line">### Installation</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">cd &#x2F;home</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;jbj828&#x2F;Docker-Practice</span><br><span class="line">cd Docker-Practice</span><br><span class="line">&lt;&#x2F;pre&gt;</span><br><span class="line">### Run</span><br><span class="line">&lt;pre&gt;</span><br><span class="line"># Login For Private Docker Repository</span><br><span class="line">docker login</span><br><span class="line">docker pull jbj828&#x2F;docker-practice</span><br><span class="line">docker run -p 80:80 -v &#x2F;home&#x2F;Docker-Practice&#x2F;Project:&#x2F;var&#x2F;www&#x2F;html jbj828&#x2F;docker-practice</span><br><span class="line">&lt;&#x2F;pre&gt;</span><br></pre></td></tr></table></figure></li></ul><br><p><strong>Readme파일에서 프로젝트 경로안에 index.html 파일이 존재하도록 설정했기 때문에, 깃 프로젝트의 구성을 바꿔준다</strong></p><ul><li><code>ls</code></li><li><code>cd /home/ubuntu</code></li><li><code>ls</code></li><li><code>cd Docker-Practice/</code></li><li><code>mkdir Project</code></li><li><code>mv index.php ./Project/index.php</code></li><li><code>cd Project</code></li><li><code>ls</code>  : 이제 Project 폴더안에 index.php가 존재</li></ul><br><ul><li><code>cd ..</code></li><li><code>git add .</code></li><li><code>git commit -m &quot;Change index.php path&quot;</code></li><li><code>git push</code></li><li>Readme.md파일을 수정했기 때문에 소스코드 충돌 메세지가 뜬다. 이럴 때는 pull 먼저 진행하면 된다</li><li><code>git pull</code></li><li>Merge관련 메세지 나오면 그냥 밖으로 나옴</li><li><code>git push</code></li></ul><br>출처 : 동빈나 youtube]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dockerhub와 Github 연동하기&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Posting Docker project to Github</title>
    <link href="http://jbj828.github.io/2020/03/04/Docker-withGithub/"/>
    <id>http://jbj828.github.io/2020/03/04/Docker-withGithub/</id>
    <published>2020-03-04T07:46:25.000Z</published>
    <updated>2020-03-04T06:27:37.001Z</updated>
    
    <content type="html"><![CDATA[<p>Github에 Docker 프로젝트 올리기</p><a id="more"></a><ul><li>Github에 새로운 Repository 생성</li></ul><br><p><em>AWS EC2의 ubuntu 18.04버전에는 자동으로 깃 프로그램이 설치되어 있어 바로 사용가능</em></p><h4 id="만들어진-Repository와-우리의-서버와-연동시키기-위해-클론부터-함"><a href="#만들어진-Repository와-우리의-서버와-연동시키기-위해-클론부터-함" class="headerlink" title="만들어진 Repository와 우리의 서버와 연동시키기 위해 클론부터 함"></a>만들어진 Repository와 우리의 서버와 연동시키기 위해 클론부터 함</h4><ul><li><code>cd /home/ubuntu</code></li><li><code>git clone 깃허브 레포지터리 복사</code></li><li><code>ls</code></li><li><code>cd 레포지터리 이름</code></li></ul><br><p>이제 깃프로젝트에 소스코드를 올리면 됨</p><ul><li><p><code>sudo vi 레포지터리이름</code></p></li><li><p><code>:wq!</code>  : 그냥 파일 저장할 수 있도록 해주고 주피터를 이용해서 소스코드 작성</p></li><li><p>이전에 작성한 example폴더의 Docker 파일 그대로 복사 붙여넣기(이렇게 깃 프로젝트를 만들었다)</p></li><li><p>주피터 홈에서 new -&gt; text file   하나의 php 코드도 만들어줌</p></li><li><p>이름은 index.php</p></li><li><p>내용은 이전에 작성했던 index.php내용 그대로 넣음</p></li></ul><br><p><strong>이제 실제로 깃에 올려보자</strong></p><ul><li><code>ls</code></li><li><code>cat Dockerfile</code> : 내용확인</li><li><code>cat index.php</code> : 내용확인</li><li><code>git add .</code></li><li><code>git commit -m &quot;이름&quot;</code></li><li><code>git push</code></li></ul><br>출처 : 동빈나 youtube]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Github에 Docker 프로젝트 올리기&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Making DB with AWS RDS</title>
    <link href="http://jbj828.github.io/2020/03/04/Docker-Making-DB-with-AWR-RDS/"/>
    <id>http://jbj828.github.io/2020/03/04/Docker-Making-DB-with-AWR-RDS/</id>
    <published>2020-03-04T06:46:25.000Z</published>
    <updated>2020-03-06T01:39:07.467Z</updated>
    
    <content type="html"><![CDATA[<p>AWS RDS를 이용한 데이터베이스 구축</p><a id="more"></a><p><strong>AWS RDS를 이용해 한 번 기록 된 데이터를 컨테이너가 꺼지더라도 남아있도록 하기 위해 이용</strong></p><br><p><strong>한글 데이터 삽입이 가능한 데이터베이스를 위해 한글 설정 관련 파라미터 그룹 생성</strong></p><ul><li>RDS에서 파라미터 생성</li><li><code>char</code> 검색해서 전부 utf8로 바꿈</li><li><code>collation</code> 검색 -&gt; 전부 utf8_general_ci</li></ul><br><ul><li>데이터베이스 -&gt; 연결 &amp; 보안 -&gt;　vpc 보안그룹 링크 들어감 -&gt; 인바운드 -&gt; 편집</li><li>실습이기 때문에 언제 어디서나 접속가능하게 만든다<ul><li>0.0.0.0/0</li></ul></li><li>이렇게 하면 접속주소만 알면 누구나 접속가능하게 됨</li></ul><br><ul><li>연결&amp;보안 -&gt; 엔드포인트(해당 mysql에 접속하기 위한 접속주소) 복사</li><li>php file에서 호스트 주소로 엔드포인트 붙여넣기</li><li>사용자 이름도 mysql 내용대로 수정</li><li>포트번호도 3306으로(mysql 포트번호)</li></ul><br><ul><li>aws ec2안에 설치된 mysql컨테이너는 지워도 됨</li><li><code>docker rm -f 컨테이너아이디</code></li></ul><br>출처 : 동빈나 youtube]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AWS RDS를 이용한 데이터베이스 구축&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
      <category term="AWS" scheme="http://jbj828.github.io/categories/Docker/AWS/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
      <category term="AWS" scheme="http://jbj828.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>Connecting MySQL Container and PHP Container</title>
    <link href="http://jbj828.github.io/2020/03/04/Docker-Connecting-mysqlAndPhp/"/>
    <id>http://jbj828.github.io/2020/03/04/Docker-Connecting-mysqlAndPhp/</id>
    <published>2020-03-04T04:46:25.000Z</published>
    <updated>2020-03-04T14:28:58.978Z</updated>
    
    <content type="html"><![CDATA[<p>PHP 컨테이너와 MySQL 컨테이너 연동해보기</p><a id="more"></a><ul><li><code>cd /home/ubuntu/example</code></li><li><code>ls</code></li><li><code>sudo vi Dockerfile</code></li><li>RUN 밑에<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Connect PHP &amp; MYSQL</span><br><span class="line">RUN apt-get install -y php5.6-mysql</span><br></pre></td></tr></table></figure>:wq!</li><li><code>docker build -t example .</code></li></ul><br><p>도커 이미지가 만들어졌으니, 이미지를 이용해서 컨테이너로 띄운다</p><ul><li><code>docker images</code></li><li><code>docker run -p 80:80 -v /home/ubuntu/example/html:/var/www/html example</code></li></ul><br><p>터미널을 하나 더 만들어서 php문서 작업</p><ul><li><code>cd /home/ubuntu/example/html</code></li><li><code>ls</code></li><li><code>cat index.php</code></li><li><code>sudo vi index.php</code></li></ul><br><p>문서작업이 많으면 Jupyter에서 직접 작업해도 된다.</p><ul><li>php를 mysql에 연결하기 위한 php문법<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $conn &#x3D; mysqli_connect(</span><br><span class="line">        &#39;[mysql IPAddress]&#39;,</span><br><span class="line">        &#39;test&#39;,</span><br><span class="line">        &#39;password&#39;,</span><br><span class="line">        &#39;TEST&#39;,</span><br><span class="line">        &#39;9876&#39;</span><br><span class="line">    );</span><br><span class="line">    if(mysqli_connect_errno())&#123;</span><br><span class="line">        echo &quot;Failed to connect to MySQL: &quot;.mysqli_connect_error();</span><br><span class="line">    &#125;</span><br><span class="line">    $sql &#x3D; &quot;SELECT VERSION()&quot;;</span><br><span class="line">    $result &#x3D; mysqli_query($conn, $sql);</span><br><span class="line">    $row &#x3D; mysqli_fetch_array($result);</span><br><span class="line">    print_r($row[&quot;VERSION()&quot;]));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li></ul><br>출처 : 동빈나 youtube]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP 컨테이너와 MySQL 컨테이너 연동해보기&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Making MySQL container with Docker</title>
    <link href="http://jbj828.github.io/2020/03/04/Docker-making-mySQL-container/"/>
    <id>http://jbj828.github.io/2020/03/04/Docker-making-mySQL-container/</id>
    <published>2020-03-04T03:46:25.000Z</published>
    <updated>2020-03-04T02:37:44.299Z</updated>
    
    <content type="html"><![CDATA[<p>Docker로 MySQL 컨테이너 만들어 보기</p><a id="more"></a><p><strong>MySQL은 도커허브에 존재하는 이미지이기 때문에 즉시 MySQL이미지를 다운로드 받아 사용할 수 있다</strong></p><br><ul><li><p><code>sudo apt install mysql-client-core-5.7</code> : mysql 설치</p></li><li><p><code>docker run -d -p 9876:3306 -e MYSQL_ROOT_PASSWORD=password mysql:5.6</code>  :  9876포트와 mysql의 기본포트인 3306포트 연결. 환경변수로 mysql의 루트 패스워드를 패스워드로 설정. mysql 5.6 이미지를 다운로드 받아서 실행까지 시행. </p></li><li><p><code>docker ps -a</code> </p></li><li><p><code>docker exec -it 컨테이너아이디 /bin/bash</code>  : 컨테이너 접속 위해 exec명령 이용. bash명령을 시행해 해당 컨테이너에 접속한 것과 같은 효과</p></li><li><p><code>mysql -u root -p</code>  : mysql 실행 및 접속</p></li><li><p>패스워드는 <code>password</code> 그대로 복사 붙여넣기</p></li></ul><br><h5 id="Database-생성"><a href="#Database-생성" class="headerlink" title="Database 생성"></a>Database 생성</h5><ul><li><code>CREATE DATABASE TEST;</code></li><li><code>SHOW DATABASES;</code></li><li><code>exit</code></li><li><code>exit</code></li></ul><br><h5 id="Docker-컨테이너의-세부정보-확인-및-컨테이너에-포함되어-있는-mysql-접속"><a href="#Docker-컨테이너의-세부정보-확인-및-컨테이너에-포함되어-있는-mysql-접속" class="headerlink" title="Docker 컨테이너의 세부정보 확인 및 컨테이너에 포함되어 있는 mysql 접속"></a>Docker 컨테이너의 세부정보 확인 및 컨테이너에 포함되어 있는 mysql 접속</h5><ul><li><code>docker inspect 컨테이너아이디</code></li><li>“IPAddress” 찾기</li><li><code>mysql -u root -p --host 아이피어드레스 --port 3306</code></li></ul><br><ul><li><code>SHOW DATABASES;</code>  : 이전에 만든 test 있는지 확인</li></ul><br><ul><li><code>mysql -u root -p --host 127.0.0.1 --port 9876</code> : 이 방법으로도 mysql에 접속 가능</li></ul><br><p>도커 컨테이너는 언제든지 제거될 수 있기 때문에 일반적으로 도커컨테이너를 mysql 서버로 사용 안함. 컨테이너와 같이 일시적인 서버로서 mysql을 사용하지 않음. 그래서 일반적으로 AWS RDS 같은 데이터베이스 기능을 많이 이용.</p><br><p><strong>Mysql 접속 이후 관리자 역할로 하나으 user 만들기</strong></p><ul><li><code>CREATE USER &#39;test&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39;;</code></li><li><code>GRANT ALL PRIVILEGES ON *.* TO &#39;test&#39;@&#39;%&#39;;</code> : 해당 유저에게 권한을 준다. test계정에 권한을 주고 외부에서 접속할 수 있도록 설정</li><li><code>FLUSH PRIVILEGES;</code></li><li><code>exit</code></li></ul><br><ul><li><code>docker restart 컨테이너아이디</code></li></ul><br><ul><li>AWS에서 포트 9876으로 열어준다.</li><li>‘IPv4 퍼블릭 IP’ 주소 복사해서 데이터베이스 접속 앱(HeidiSQL 등) 이용</li></ul><br>출처 : 동빈나 youtube]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker로 MySQL 컨테이너 만들어 보기&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Making Apache and PHP configuration with Docker Image</title>
    <link href="http://jbj828.github.io/2020/03/04/Docker-making-PHP-config/"/>
    <id>http://jbj828.github.io/2020/03/04/Docker-making-PHP-config/</id>
    <published>2020-03-04T01:46:25.000Z</published>
    <updated>2020-03-04T02:39:04.798Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 이미지로 Apache 및 PHP 개발환경 구축하기</p><a id="more"></a><p>아파치 웹서버만 포함되어있는 도커이미지를 더 수정해서 PHP까지 추가해본다. 볼륨을 공유할 수 있도록 해서 PHP 소스코드가 동작할 수 있도록 개발한다.</p><br><p><strong>컨테이너 제거</strong></p><ul><li><code>docker ps -a</code>  : 80번 포트의 컨테이너가 구동 중</li><li><code>docker rm -f `docker ps -a -q`</code>  : -f옵션은 컨테이너를 강제 삭제 시킴. docker ps에 -a -q를 붙여서 현재 존재하는 모든 컨테이너 명단을 가져온다.</li><li><code>docker ps -a</code>  : 컨테이너 확인해 본다</li></ul><br><p><strong>도커파일 수정</strong></p><ul><li><p><code>cd /home/ubuntu/example</code> : 저번에 만든 도커 파일 위치</p></li><li><p><code>ls</code> </p></li><li><p><code>sudo vi Dockerfile</code></p></li><li><p>도커파일에 php 설치 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;MAINTAINER 밑에</span><br><span class="line"># Avoiding user interaction with tzdata</span><br><span class="line">ENV DEBIAN_FRONTEND&#x3D;noninteractive</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 기존 RUN 밑에</span><br><span class="line">RUN apt-get install -y software-properties-common</span><br><span class="line">RUN add-apt-repository ppa:ondrej&#x2F;php # For Installing PHP 5.6</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y php5.6</span><br></pre></td></tr></table></figure></li><li><p><code>docker build -t example .</code></p></li><li><p><code>docker images</code></p></li></ul><p>빌드가 완료되면 기존에 존재하던 이미지는 <code>none</code>으로 바뀜. 사용되지 않는 이미지는 삭제한다. 하지만 삭제하고자 할 때 특정한 컨테이너에서 구동 중인 것은 삭제가 진행 안됨. 먼저 컨테이너부터 삭제 진행</p><ul><li><code>docker rm -f 컨테이너아이디</code> : docker ps -a에서 확인가능</li><li><code>docker rmi -f d 이미지아이디</code>  </li></ul><p><strong>Example 레포지터리를 컨테이너에 띄우기</strong></p><ul><li><code>docker run -p 80:80 -v /home/ubuntu/example/html:/var/www/html example</code>  : 80번 포트를 열고, volume옵션을 열어주어서 마운팅을 진행한다. /home/ubuntu/example/html 과 /var/www/html을 서로 연결해준다. 후자는 php의 소스코드가 놓이는 기본 경로.<br>이렇게 마운팅 된 경로는 호스트에다 파일을 넣어주면 자동으로 컨테이너의 해당 경로에 실제로 파일이 놓인 것과 같은 효과를 낸다.</li><li>/html/ubuntu/example/html 의 경로를 복사해 주피터에서 새로운 터미널을 열어 복사한다</li><li><code>cd /html/ubuntu/example/html</code></li><li><code>ls</code><br>: 이제 이 새로운 터미널에서 html문서나 php문서를 작성하면 이 컨테이너 내부에 있는 php소스코드 경로와 연결이 되기 때문에 실제 웹 서버에 php코드가 놓이는 것과 동일한 효과를 낸다</li><li>80번 포트에서 새로고침하면 php가 적용 된 문서가 나타난다</li></ul><p><strong>PHP 소스코드 작성</strong></p><p>새로운 터미널에서.</p><ul><li><p><code>sudo vi index.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><p>:wq!</p></li><li><p>다시 새로고침하면 컨테이너 안에 설치되어 있는 php환경설정 내용이 등장.</p></li></ul><br><ul><li>php와 apache가 설치된 하나의 image를 직접 만들었기 때문에 이제 docker run 을 통해 이 컨테이너를 띄울 수 있다</li><li><code>docker run -p 81:80 -v /home/ubuntu/example/html:/var/www/html example</code></li><li>AWS가서 81번도 방화벽을 열어준다</li></ul><p>출처 : 동빈나 youtube</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 이미지로 Apache 및 PHP 개발환경 구축하기&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Install Docker on AWS EC2 and run the web server through Dockerfile</title>
    <link href="http://jbj828.github.io/2020/03/03/Docker-installDockerOnAWSec2/"/>
    <id>http://jbj828.github.io/2020/03/03/Docker-installDockerOnAWSec2/</id>
    <published>2020-03-03T13:46:25.000Z</published>
    <updated>2020-03-06T01:38:57.930Z</updated>
    
    <content type="html"><![CDATA[<p>Docker Tutorial 2</p><a id="more"></a><p><strong>주피터에 도커 설치하기</strong></p><br><ul><li><code>df -h</code>  : 메모리가 어느정도 남았는지 체크</li><li><code>sudo apt update</code> : 설치는 apt를 이용해서 하기 때문에 먼저 apt 업데이트 명령 수행</li><li><code>sudo apt install apt-transport-https</code>  : 유틸 설치</li><li><code>sudo apt install ca-certificates</code>  : 유틸 설치</li><li><code>sudo apt install curl</code> : 유틸설치, 특정한 웹사이트에서 어떠한 데이터를 다운로드 받을 때 쓰는 것</li><li><code>sudo apt install software-properties-common</code></li></ul><br><ul><li><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code>  : curl을 이용해서 실제로 도커를 설치하기 위해 gpg내용을 다운로드 받고 그 내용을 apt기능을 위한 리스트에 추가할 수 있도록 함.</li></ul><br><ul><li><code>sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;</code>  : 도커는 레포지터리에서 다운로드 가능, 우분투 18.04버전에 맞는 도커를 다운로드 해야함.</li><li><code>sudo apt update</code></li></ul><p><strong>이것으로 apt-list에 docker를 다운로드 받기 위한 경로가 추가되었다</strong></p><br><p><strong>이제 실제로 도커를 다운로드 받는다</strong></p><ul><li><code>apt-cache policy docker-ce</code></li><li><code>sudo apt install docker-ce</code>  : 도커는 설치하게 되면 시스템 서비스로 등록되기 때문에 언제 어디서든 이용가능</li></ul><br><ul><li><code>sudo systemctl status docker</code>  : 도커 서비스 상태 확인</li><li><code>q</code> : 눌러서 원래로 돌아옴</li><li><code>docker pull hello-world</code>  : docker의 <em>pull</em> 명령은 특정한 서버파일 자체를 이미지 형태로 다운로드 받을 수 있게 해줌</li><li><code>docker images</code> : 이미지 확인</li></ul><br><p><strong>다운로드 받은 이미지를 실제 컨테이너로 만들기</strong></p><ul><li><code>docker run hello-world</code>  : hello-world 컨테이너를 띄움. 즉 이 명령을 내리자마자 우리의 서버 위에 하나의 서버가 별도로 더 생성되어 서버가 동작하고 작업이 종료된 것.</li><li><code>docker ps -a</code> : 어떤 컨테이너가 동작했는지 확인가능</li></ul><br><p><strong>컨테이너 삭제</strong></p><ul><li><code>docker rm 컨테이너아이디</code>  : docker ps -a로 아이디 확인 가능</li><li><code>docker images</code> : 삭제를 하더라도 이미지 파일은 남아있음</li></ul><br><h3 id="Docker-파일을-직접-작성해서-하나의-서버-이미지를-직접-만들기"><a href="#Docker-파일을-직접-작성해서-하나의-서버-이미지를-직접-만들기" class="headerlink" title="Docker 파일을 직접 작성해서 하나의 서버 이미지를 직접 만들기"></a>Docker 파일을 직접 작성해서 하나의 서버 이미지를 직접 만들기</h3><ul><li><code>ls</code>  : 현재 디렉토리의 파일에 대한 리스트를 보여줌</li><li><code>cd /home/ubuntu</code></li><li><code>ls</code></li><li><code>mkdir example</code></li><li><code>cd example</code></li><li><code>ls</code></li><li><code>sudo vi Dockerfile</code></li></ul><br><p><strong>도커파일 작성</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line">MAINTAINER ByungJae Chung &lt;jbj828@naver.com&gt;</span><br><span class="line"></span><br><span class="line">RUN apt-get update &#x2F;&#x2F;해당 서버가 웹 서버를 구동할 수 있도록 설정</span><br><span class="line">RUN apt-get install -y apache2 # Install Apache web server (Only &#39;yes&#39;) &#x2F;&#x2F; y옵션 넣는 이유는 설치할 때 용량 크면 설치 할 것인지 물어본다. docker이미지 만들 때는 행동예측이 어렵기에 무조건 설치한다는 뜻</span><br><span class="line"></span><br><span class="line">EXPOSE 80 # Open HTTP Port  &#x2F;&#x2F; 아파치 웹서버의 기본 포트인 80번 포트를 열 수 있도록 만들어준 것</span><br><span class="line"></span><br><span class="line">CMD [&quot;apachectl&quot;, &quot;-D&quot;, &quot;FOREGROUND&quot;] &#x2F;&#x2F;특정한 컨테이너는 작업 수행하자마자 바로 종료되기 때문에 아파치가 항상 구동중인 상태로 만들기 위해 명시</span><br></pre></td></tr></table></figure><p><code>:wq!</code></p><br><p><strong>Build Docker File</strong></p><p>도커 이미지를 만드는 것</p><ul><li><code>ls</code></li><li><code>docker build -t example .</code></li><li><code>docker images</code> : 확인<ul><li>만약 error가 났다면 error message 보고 docker file 들어가서 수정하고 다시 build하기</li></ul></li></ul><br><p><strong>만든 이미지를 활용해 실제 웹서버 컨테이너 구동</strong></p><ul><li><code>docker run -p 80:80 example</code> : 왼쪽은 현재 우리 서버의 포트를 넣고 오른쪽엔 컨테이너의 포트 넣기 - 호스트의 80번 포트와 컨테이너의 80번 포트가 연결됨, 실제로 호스트 서버의 80번 포트에 접속했을 때 사용자는 컨테이너의 80번 포트에 접속할 수 있게 됨</li></ul><Br><ul><li>이후 AWS -&gt; 보안그룹/launch-wizard-1 -&gt; 편집 -&gt;<br>규칙추가 -&gt; 유형:HTTP</li><li>서버의 80번 포트로 검색해봄 (주소창에서 주소명만 복사해서 <code>:80</code> 붙임) </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker Tutorial 2&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
      <category term="AWS" scheme="http://jbj828.github.io/categories/Docker/AWS/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
      <category term="AWS" scheme="http://jbj828.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>Install AWS EC2 Instance and Jupyter Notebook(환경설정)</title>
    <link href="http://jbj828.github.io/2020/03/03/Docker-tutorial1/"/>
    <id>http://jbj828.github.io/2020/03/03/Docker-tutorial1/</id>
    <published>2020-03-03T05:46:25.000Z</published>
    <updated>2020-03-06T01:39:26.840Z</updated>
    
    <content type="html"><![CDATA[<p>Docker Tutorial 1</p><a id="more"></a><h3 id="AWS-EC2-인스턴스-생성-및-접속"><a href="#AWS-EC2-인스턴스-생성-및-접속" class="headerlink" title="AWS EC2 인스턴스 생성 및 접속"></a>AWS EC2 인스턴스 생성 및 접속</h3><Br><ol><li>AWS에서 ubuntu 18버전으로 먼저 인스턴스 생성</li><li>key pair는 관리자만 실행가능하도록 환경설정<ul><li>오른쪽마우스 -&gt; 속성 -&gt; 보안 -&gt; 고급 -&gt; 상속사용</li><li>key pair는 무조건 C드라이브 안에 넣기</li></ul></li><li>명령프롬프트 관리자 권한으로 실행<ul><li>cd 키페어 위치</li><li>aws 홈페이지 가서 연결버튼 누름</li><li>ssh 링크 복사해서 cmd에 복사</li><li>연결완료 되면 pwd 입력 -&gt; <code>현재 서버위치</code></li></ul></li></ol><br><h3 id="Jupyter-Notebook-설치-HTTPS-적용-시스템-서비스-설정하기"><a href="#Jupyter-Notebook-설치-HTTPS-적용-시스템-서비스-설정하기" class="headerlink" title="Jupyter Notebook 설치, HTTPS 적용, 시스템 서비스 설정하기"></a>Jupyter Notebook 설치, HTTPS 적용, 시스템 서비스 설정하기</h3><br><ul><li><p><strong>Jypyter Notebook</strong> : 콘솔창이 아닌 웹브라우저 환경에서 해당 서버에 바로 접근해서 해당 서버를 관리할 수 있도록 해주는 유틸</p><ol><li>sudo apt-get update  :  apt-get명령의 업데이트</li><li>sudo apt-get install python3-pip<ul><li>ubuntu 18.04버전엔 pyhton3가 디폴트로 깔려있다. 그래서 python3는 깔 필요없고 파이썬 관련 패키지를 설치할 수 있도록 도와주는 python3-pip를 설치</li></ul></li><li>sudo pip3 install notebook  : jupyter notebook 설치</li></ol><br><p>만들어진 주피터를 통해서 서버의 외부에서 해당 서버에 웹브라우저를 이용해서 접속할 수 있도록 된 것. 이제 주피터 접속을 위한 비밀번호 설정을 해줘야 함.</p>  <br><ol><li>python3</li><li>from notebook.auth import passwd</li><li>passwd()   :  패스워드 함수 호출(비밀번호를 설정하겠다는 의미)</li><li>나온 hash값 복사해서 메모장 붙여넣기</li><li>exit()</li></ol><br><p>서버에서 주피터 노트북을 실행해서 외부에서 접속 했을 때 비밀번호를 입력해야 서버에 접속할 수 있도록 하기 위해 주피터 환경설정 진행</p><br><ol><li>jupyter notebook –generate-config    : 환경설정 파일 만듦</li><li>sudo vi 바로 윗줄 환경설정 위치값 붙여넣기<ul><li>ex)  sudo vi /home/ubuntu/.jupyter/jupyter_notebook_config.py         </li></ul></li><li>제일 밑으로 내려가서 ‘a’눌러서 수정모드로 변환</li><li>c = get_config()</li><li>c.NotebookApp.password = u’sha1 : 복사해둔 해시값’</li><li>c.NotebookApp.ip = ‘172.31.14.123’    이거는 화면 제목 창에 나온 주소 그대로 적으면 됨</li><li>c.NotebookApp.notebook_dir = ‘/‘</li><li>esc버튼 누르고</li><li>:wq!</li></ol><br><ol><li>sudo jupyter-notebook –allow-root   : 주피터 노트북을 루트권한을 가진 상태로 실행<ul><li>8888포트로 주피터 노트북이 열린 것 확인가능</li></ul></li></ol><br><ol><li>AWS 웹사이트 다시 돌아가서 </li><li>‘설명’란 안에 있는</li><li>‘보안그룹’ 의 ‘launch-wizard-1’ 클릭</li><li>‘인바운드’</li><li>‘편집’</li><li>‘규칙추가’</li><li>포트범위 : 8888</li><li>소스 : 0.0.0.0/0  (두 개 다)</li></ol><br><ol><li>인스턴스 화면으로 돌아옴</li><li>‘설명’란에 ‘IPv4 퍼블릭 IP’에 있는 주소 복사</li><li>주소창에 붙이고 ‘:8888’ 붙여서 엔터</li></ol><br><ul><li>더 이상 ssh가 필요하지 않고 바로 웹 브라우저에서 해당 서버에 접속할 수 있어서 매우 편리해졌다. 하지만 우린 주피터를 항상 실행할 수 있는 상태로 만들고 싶다</li></ul></li></ul><br><ol><li>다시 cmd로 돌아와서 ‘ctrl+z’로 해당 서버 종료 </li><li>bg   : background상태에서 돌아가게 함</li><li>disown -h   : 소유권 포기<ul><li>이제 주피터 노트북이 항상 실행 중인 상태가 됨<br></li></ul></li></ol><p>언제 어디서나 웹브라우저로 서버를 관리할 수 있게 됨<br>하지만 지금의 주피터 노트북은 ssl인증서가 적용되지 않은 상태라서 통신과정에서 상당히 위험.<br><br></p><p>그러므로 https를 적용해야됨</p><br><ol><li>sudo netstat -nap | grep 8888  : 현재 8888포트가 실행 중인 피아이디를 알 수 있다</li><li>sudo kill -9 ‘파이썬 옆 숫자’<ul><li>해당 주피터 노트북을 종료시킬 수 있음</li><li>웹브라우저에서 새로고침하면 적용 안 됨</li></ul></li></ol><br><h3 id="HTTPS-적용"><a href="#HTTPS-적용" class="headerlink" title="HTTPS 적용"></a>HTTPS 적용</h3><br><p><em>환경설정에 개인키와 공개키를 넣는 작업</em></p><br><ol><li>cd /home/ubuntu</li><li>pwd</li><li>mkdir ssl</li><li>cd ssl</li><li>sudo openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout “cert.key” -out “cert.pem” -batch     <em>개인키 공개키 생성</em></li><li>ls</li><li>sudo vi 바로 윗줄 환경설정 다시 열기<br>ex)  sudo vi /home/ubuntu/.jupyter/jupyter_notebook_config.py<br><em>방향키 위쪽 버튼 눌러서 찾기</em></li><li>‘a’눌러서 시작</li><li>c.NotebookApp.certfile = u’/home/ubuntu/ssl/cert.pem’</li><li>c.Notebop.keyfile = u’/home/ubuntu/ssl/cert.key’</li><li>esc버튼</li><li>:wq!</li></ol><Br><ol><li><p>sudo jupyter-notebook –allow-root   <em>주피터 노트북 실행</em></p><ul><li>https://주소:8888 넣으면 ssl이 적용이 된 상태로 서버에 접속가능</li><li>여기까지가 우리 주피터 노트북에 ssl(인증서)까지 적용한 것</li></ul></li></ol><br><h3 id="시스템-서비스-설정하기"><a href="#시스템-서비스-설정하기" class="headerlink" title="시스템 서비스 설정하기"></a>시스템 서비스 설정하기</h3><ul><li>서버가 재부팅되면 자동으로 주피터 노트북이 실행이 안됨. 그래서 주피터 노트북을 시스템 서비스로서 등록시켜서 재부팅해도 자동실행 가능하도록 함.</li></ul><br><ol><li><p>먼저 ctrl+c 눌러서 서버 구동 종료</p></li><li><p>which jupyter-notebook    <em>주피터 노트북 실행파일의 경로를 찾기 위한 명령</em></p></li><li><p>sudo vi /etc/systemd/system/jupyter.service    <em>시스템 서비스로 등록하기 위해 서비스 파일 작성</em></p></li><li><p><em>서비스 파일 작성</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Jupyter Notebook Server</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">User&#x3D;ubuntu  &#x2F;&#x2F;기본적으로 AWS ec2에 ssh명령을 이용해서 접속할 땐 ubuntu계정으로 접속하기 때문</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;sudo &#x2F;usr&#x2F;local&#x2F;bin&#x2F;jupyter-notebook --allow-root --config&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;.jupyter&#x2F;jupyter_notebook_config.py</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>:wq!입력</p><br></li></ol><p>  <em>주피터 노트북을 구동시키도록 함</em></p><ol><li>sudo systemctl daemon-reload <em>데몬을 다시 로드할수 있도록</em></li><li>sudo systemctl enable jupyter <em>주피터서비스를 사용가능하도록 만듦</em> </li><li>sudo systemctl start jupyter  <em>항상 실행상태가 되도록 만듦</em></li></ol><br><ul><li><p>실행 중인 주피터 서비스를 확인</p><ol><li>sudo systemctl status jupyter</li><li>확인 후 ‘q’눌러서 상태확인 마침</li></ol><br></li><li><p>주피터 서비스를 다시 시작하고자 할 때</p><ol><li>sudo systemctl restart jupyter</li></ol></li></ul><br><p>이제 aws ec2를 재부팅하더라도 주피터 노트북 서비스가 자동으로 실행되어서 구동중인 상태가 될 수 있도록 처리한 것. 항상 주피터를 이용해서 해당 서버에 접속해 관리할 수 있도록 된 것.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker Tutorial 1&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
      <category term="AWS" scheme="http://jbj828.github.io/categories/Docker/AWS/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
      <category term="AWS" scheme="http://jbj828.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>What is Docker?</title>
    <link href="http://jbj828.github.io/2020/03/03/Docker-theory/"/>
    <id>http://jbj828.github.io/2020/03/03/Docker-theory/</id>
    <published>2020-03-03T01:46:25.000Z</published>
    <updated>2020-03-02T16:47:18.314Z</updated>
    
    <content type="html"><![CDATA[<p>Primary theory of Docker</p><a id="more"></a><p>출처 : 공부목적으로 <a href="https://subicura.com/" target="_blank" rel="noopener">Subicura’s Blog</a>를 참조했습니다.</p><br><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul><li>컨테이너를 관리하는 플랫폼</li><li>컨테이너 기반의 오픈소스 가상화 플랫폼<ul><li>다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해줍니다. 백엔드 프로그램, 데이터베이스 서버, 메시지 큐등 어떤 프로그램도 컨테이너로 추상화할 수 있고 조립PC, AWS, Azure, Google cloud등 어디에서든 실행할 수 있습니다.</li><li>즉, 컨테이너는 격리된 공간에서 프로세스가 동작하는 기술입니다.</li></ul></li></ul><p><strong>Difference between VM and Docker</strong></p><br><img src="/2020/03/03/Docker-theory/docker1.png" class="" width="500" height="300" title="VM and Docker"><br><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><p>  ‘컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것’</p><ul><li>이미지는 컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것으로 상태값을 가지지 않고 변하지 않습니다(Immutable). 컨테이너는 이미지를 실행한 상태라고 볼 수 있고 추가되거나 변하는 값은 컨테이너에 저장됩니다. 같은 이미지에서 여러개의 컨테이너를 생성할 수 있고 컨테이너의 상태가 바뀌거나 컨테이너가 삭제되더라도 이미지는 변하지 않고 그대로 남아있습니다.</li><li>말그대로 이미지는 컨테이너를 실행하기 위한 모든 정보를 가지고 있기 때문에 더 이상 의존성 파일을 컴파일하고 이것저것 설치할 필요가 없습니다. 이제 새로운 서버가 추가되면 미리 만들어 놓은 이미지를 다운받고 컨테이너를 생성만 하면 됩니다. 한 서버에 여러개의 컨테이너를 실행할 수 있고, 수십, 수백, 수천대의 서버도 문제없습니다.</li><li>도커 이미지는 Docker hub에 등록하거나 Docker Registry 저장소를 직접 만들어 관리할 수 있습니다. 현재 공개된 도커 이미지는 50만개가 넘고 Docker hub의 이미지 다운로드 수는 80억회에 이릅니다. 누구나 쉽게 이미지를 만들고 배포할 수 있습니다.</li></ul><br><img src="/2020/03/03/Docker-theory/docker2.png" class="" width="500" height="300" title="Docker Image">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Primary theory of Docker&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://jbj828.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
