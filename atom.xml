<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Developer Javit</title>
  
  <subtitle>Slowly and Steadily</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jbj828.github.io/"/>
  <updated>2020-02-02T06:42:52.699Z</updated>
  <id>http://jbj828.github.io/</id>
  
  <author>
    <name>Javit</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Circular Single Linked List</title>
    <link href="http://jbj828.github.io/2020/02/02/CircularSingleLinkedList/"/>
    <id>http://jbj828.github.io/2020/02/02/CircularSingleLinkedList/</id>
    <published>2020-02-02T06:46:25.000Z</published>
    <updated>2020-02-02T06:42:52.699Z</updated>
    
    <content type="html"><![CDATA[<p>The method which could be applied to Circular Single Linked List</p><a id="more"></a><p>SingleCircularLinkedList.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line"></span><br><span class="line">public class SingleCircularLinkedList &#123;</span><br><span class="line">private SingleNode head;</span><br><span class="line">private SingleNode tail;</span><br><span class="line">private int size;&#x2F;&#x2F; denotes size of list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SingleNode createSingleLinkedList(int nodeValue) &#123;</span><br><span class="line">head &#x3D; new SingleNode();</span><br><span class="line">SingleNode node &#x3D; new SingleNode();</span><br><span class="line">node.setValue(nodeValue);</span><br><span class="line">node.setNext(node);</span><br><span class="line">head &#x3D; node;</span><br><span class="line">tail &#x3D; node;</span><br><span class="line">size &#x3D; 1;&#x2F;&#x2F; size &#x3D;1</span><br><span class="line">return head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public SingleNode getHead() &#123;</span><br><span class="line">return head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setHead(SingleNode head) &#123;</span><br><span class="line">this.head &#x3D; head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public SingleNode getTail() &#123;</span><br><span class="line">return tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTail(SingleNode tail) &#123;</span><br><span class="line">this.tail &#x3D; tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getSize() &#123;</span><br><span class="line">return size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSize(int size) &#123;</span><br><span class="line">this.size &#x3D; size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void insertInLinkedList(int nodeValue, int location) &#123;</span><br><span class="line">SingleNode node &#x3D; new SingleNode();</span><br><span class="line">node.setValue(nodeValue);</span><br><span class="line">System.out.println(&quot;Inserting new node at location: &quot; + location);</span><br><span class="line">if (!existsLinkedList()) &#123;</span><br><span class="line">System.out.println(&quot;The linked list does not exist!!&quot;);</span><br><span class="line">return; &#x2F;&#x2F; Linked List does not exists</span><br><span class="line">&#125; else if (location &#x3D;&#x3D; 0) &#123;&#x2F;&#x2F; insert at first position</span><br><span class="line">node.setNext(head);</span><br><span class="line">head &#x3D; node;</span><br><span class="line">tail.setNext(node); &#x2F;&#x2F; update tail</span><br><span class="line">&#125; else if (location &gt;&#x3D; size) &#123;&#x2F;&#x2F; insert at last position</span><br><span class="line">tail.setNext(node);</span><br><span class="line">tail &#x3D; node; &#x2F;&#x2F; to keep track of last node</span><br><span class="line">tail.setNext(head); &#x2F;&#x2F; update tail to circularly point head</span><br><span class="line">&#125; else &#x2F;&#x2F; insert at specified location</span><br><span class="line">&#123;</span><br><span class="line">SingleNode tempNode &#x3D; head;</span><br><span class="line">int index &#x3D; 0;</span><br><span class="line">while (index &lt; location - 1) &#123;&#x2F;&#x2F; loop till we reach specified node</span><br><span class="line">tempNode &#x3D; tempNode.getNext();</span><br><span class="line">index++;</span><br><span class="line">&#125;&#x2F;&#x2F; insert new node after tempNode</span><br><span class="line">node.setNext(tempNode.getNext());</span><br><span class="line">tempNode.setNext(node);</span><br><span class="line">&#125;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean existsLinkedList() &#123;</span><br><span class="line">&#x2F;&#x2F; if head is not null retrun true otherwise return false</span><br><span class="line">return head !&#x3D; null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Traverse Linked List</span><br><span class="line">void traverseLinkedList() &#123;</span><br><span class="line">if (existsLinkedList()) &#123;</span><br><span class="line">SingleNode tempNode &#x3D; head;</span><br><span class="line">for (int i &#x3D; 0; i &lt; size; i++) &#123;</span><br><span class="line"></span><br><span class="line">System.out.print(tempNode.getValue());</span><br><span class="line">if (i !&#x3D; size - 1) &#123;</span><br><span class="line">System.out.print(&quot; -&gt; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">tempNode &#x3D; tempNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;\n&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;\nLinked List does not exists !&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Traverse Linked List</span><br><span class="line">void printHeadUsingTail() &#123;</span><br><span class="line">if (existsLinkedList()) &#123;</span><br><span class="line">System.out.println(&quot;Printing Tail...&quot;);</span><br><span class="line">System.out.println(tail.getValue());</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;Printing Head using Head reference...&quot;);</span><br><span class="line">System.out.println(head.getValue());</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;Printing Head using Tail reference...&quot;);</span><br><span class="line">System.out.println(tail.getNext().getValue());</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">System.out.println(&quot;Linked List does not exists&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Delete linked list</span><br><span class="line">void deleteLinkedList() &#123;</span><br><span class="line">System.out.println(&quot;\n\nDeleting Linked List...&quot;);</span><br><span class="line">head &#x3D; null;</span><br><span class="line">if(tail &#x3D;&#x3D; null) &#123;</span><br><span class="line">System.out.println(&quot;Linked List is already deleted, nothing to delete !&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">tail.setNext(null);</span><br><span class="line">tail &#x3D; null;</span><br><span class="line">System.out.println(&quot;Linked List deleted successfully !&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Search given value in Linked List</span><br><span class="line">boolean searchNode(int nodeValue) &#123;</span><br><span class="line">if (existsLinkedList()) &#123;</span><br><span class="line">SingleNode tempNode &#x3D; head;</span><br><span class="line">for (int i &#x3D; 0; i &lt; size; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; System.out.print(tempNode.value);</span><br><span class="line">if (tempNode.getValue() &#x3D;&#x3D; nodeValue) &#123;</span><br><span class="line">System.out.print(&quot;Found the node at location: &quot;+i);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">tempNode &#x3D; tempNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(&quot;Node not found!! &quot;);</span><br><span class="line"></span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void deletionOfNode(int location) &#123;</span><br><span class="line">if (!existsLinkedList()) &#123;</span><br><span class="line">System.out.println(&quot;The linked list does not exist!!&quot;);&#x2F;&#x2F; Linked List does not exists</span><br><span class="line">return;</span><br><span class="line">&#125; else if (location &#x3D;&#x3D; 0) &#123; &#x2F;&#x2F; we want to delete first element</span><br><span class="line">head &#x3D; head.getNext();</span><br><span class="line">tail.setNext(head);</span><br><span class="line">setSize(getSize()-1);</span><br><span class="line">if(getSize() &#x3D;&#x3D; 0) &#123; &#x2F;&#x2F; if there are no more nodes in this list</span><br><span class="line">tail &#x3D; null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else if (location &gt;&#x3D; getSize())&#123; &#x2F;&#x2F;If location is not in range or equal, then delete last node</span><br><span class="line">SingleNode tempNode &#x3D; head;</span><br><span class="line">for (int i &#x3D; 0; i &lt; size - 1; i++) &#123;</span><br><span class="line">tempNode &#x3D; tempNode.getNext(); &#x2F;&#x2F;temp node points to 2nd last node</span><br><span class="line">&#125;</span><br><span class="line">if (tempNode &#x3D;&#x3D; head) &#123; &#x2F;&#x2F;if this is the only element in the list</span><br><span class="line">tail &#x3D; head &#x3D; null;</span><br><span class="line">setSize(getSize()-1);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">tempNode.setNext(head); </span><br><span class="line">tail&#x3D; tempNode;</span><br><span class="line">setSize(getSize()-1);</span><br><span class="line"></span><br><span class="line">&#125;else &#123; &#x2F;&#x2F;if any inside node is to be deleted</span><br><span class="line">SingleNode tempNode &#x3D; head;</span><br><span class="line">for (int i &#x3D; 0; i &lt; location - 1; i++) &#123;</span><br><span class="line">tempNode &#x3D; tempNode.getNext(); &#x2F;&#x2F; we need to traverse till we find the location</span><br><span class="line">&#125;</span><br><span class="line">tempNode.setNext(tempNode.getNext().getNext()); &#x2F;&#x2F; delete the required node</span><br><span class="line">setSize(getSize()-1);</span><br><span class="line">&#125;&#x2F;&#x2F;end of else</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F;end of class</span><br></pre></td></tr></table></figure><p>SingleNode.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line"></span><br><span class="line">public  class SingleNode &#123;</span><br><span class="line">private int value;</span><br><span class="line">private SingleNode next;</span><br><span class="line"></span><br><span class="line">public int getValue() &#123;</span><br><span class="line">return value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setValue(int value) &#123;</span><br><span class="line">this.value &#x3D; value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public SingleNode getNext() &#123;</span><br><span class="line">return next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setNext(SingleNode next) &#123;</span><br><span class="line">this.next &#x3D; next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return  value + &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The method which could be applied to Circular Single Linked List&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/categories/Algorithm/"/>
    
    
      <category term="algorithm" scheme="http://jbj828.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Single Linked List</title>
    <link href="http://jbj828.github.io/2020/02/01/SingleLinkedList/"/>
    <id>http://jbj828.github.io/2020/02/01/SingleLinkedList/</id>
    <published>2020-02-01T06:23:25.000Z</published>
    <updated>2020-02-01T05:39:16.521Z</updated>
    
    <content type="html"><![CDATA[<p>The method which could be applied on the Single linked list</p><a id="more"></a><p>SingleNode.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line"></span><br><span class="line">public class SingleNode &#123;</span><br><span class="line"></span><br><span class="line">    private int value;</span><br><span class="line">    private SingleNode next;</span><br><span class="line"></span><br><span class="line">    public int getValue() &#123;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setValue(int value) &#123;</span><br><span class="line">        this.value &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SingleNode getNext() &#123;</span><br><span class="line">        return next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNext(SingleNode next) &#123;</span><br><span class="line">        this.next &#x3D; next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return value + &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SingleLinkedList.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line"></span><br><span class="line">public class SingleLinkedList &#123;</span><br><span class="line">private SingleNode head;</span><br><span class="line">private SingleNode tail;</span><br><span class="line">private int size;&#x2F;&#x2F; denotes size of list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public SingleNode getHead() &#123;</span><br><span class="line">return head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setHead(SingleNode head) &#123;</span><br><span class="line">this.head &#x3D; head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public SingleNode getTail() &#123;</span><br><span class="line">return tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setTail(SingleNode tail) &#123;</span><br><span class="line">this.tail &#x3D; tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getSize() &#123;</span><br><span class="line">return size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setSize(int size) &#123;</span><br><span class="line">this.size &#x3D; size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public SingleNode createSingleLinkedList(int nodeValue) &#123;</span><br><span class="line">head &#x3D; new SingleNode();</span><br><span class="line">SingleNode node &#x3D; new SingleNode();</span><br><span class="line">node.setValue(nodeValue);</span><br><span class="line">node.setNext(null);</span><br><span class="line">head &#x3D; node;</span><br><span class="line">tail &#x3D; node;</span><br><span class="line">size &#x3D; 1;&#x2F;&#x2F; size &#x3D;1</span><br><span class="line">return head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void insertInLinkedList(int nodeValue, int location) &#123;</span><br><span class="line">SingleNode node &#x3D; new SingleNode();</span><br><span class="line">node.setValue(nodeValue);</span><br><span class="line">if (!existsLinkedList()) &#123; &#x2F;&#x2F; Linked List does not exists</span><br><span class="line">System.out.println(&quot;The linked list does not exist!!&quot;);</span><br><span class="line">return; </span><br><span class="line">&#125; else if (location &#x3D;&#x3D; 0) &#123;&#x2F;&#x2F; insert at first position</span><br><span class="line">node.setNext(head);</span><br><span class="line">head &#x3D; node;</span><br><span class="line">&#125; else if (location &gt;&#x3D; size) &#123;&#x2F;&#x2F; insert at last position</span><br><span class="line">node.setNext(null);</span><br><span class="line">tail.setNext(node);</span><br><span class="line">tail &#x3D; node; </span><br><span class="line">&#125; else &#123;&#x2F;&#x2F; insert at specified location</span><br><span class="line">SingleNode tempNode &#x3D; head;</span><br><span class="line">int index &#x3D; 0;</span><br><span class="line">while (index &lt; location - 1) &#123;&#x2F;&#x2F; loop till we reach specified node</span><br><span class="line">tempNode &#x3D; tempNode.getNext();</span><br><span class="line">index++;</span><br><span class="line">&#125;&#x2F;&#x2F;tempNode currently references to node after which we should insert new node</span><br><span class="line">SingleNode nextNode &#x3D; tempNode.getNext(); &#x2F;&#x2F;this is the immediate next node after new node</span><br><span class="line">tempNode.setNext(node);&#x2F;&#x2F;update reference of tempNode to reference to new node</span><br><span class="line">node.setNext(nextNode);&#x2F;&#x2F;update newly added nodes&#39; next.</span><br><span class="line">&#125;</span><br><span class="line">setSize(getSize()+1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public boolean existsLinkedList() &#123;</span><br><span class="line">&#x2F;&#x2F; if head is not null retrun true otherwise return false</span><br><span class="line">return head !&#x3D; null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Traverses Linked List</span><br><span class="line">void traverseLinkedList() &#123;</span><br><span class="line">if (existsLinkedList()) &#123;</span><br><span class="line">SingleNode tempNode &#x3D; head;</span><br><span class="line">for (int i &#x3D; 0; i &lt; getSize(); i++) &#123;</span><br><span class="line">System.out.print(tempNode.getValue());</span><br><span class="line">if (i !&#x3D; getSize() - 1) &#123;</span><br><span class="line">System.out.print(&quot; -&gt; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">tempNode &#x3D; tempNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;Linked List does not exists !&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Deletes entire Linked List</span><br><span class="line">void deleteLinkedList() &#123;</span><br><span class="line">System.out.println(&quot;\n\nDeleting Linked List...&quot;);</span><br><span class="line">head &#x3D; null;</span><br><span class="line">tail &#x3D; null;</span><br><span class="line">System.out.println(&quot;Linked List deleted successfully !&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Searches a node with given value</span><br><span class="line">boolean searchNode(int nodeValue) &#123;</span><br><span class="line">if (existsLinkedList()) &#123;</span><br><span class="line">SingleNode tempNode &#x3D; head;</span><br><span class="line">for (int i &#x3D; 0; i &lt; getSize(); i++) &#123;</span><br><span class="line">if (tempNode.getValue() &#x3D;&#x3D; nodeValue) &#123;</span><br><span class="line">System.out.print(&quot;Found the node at location: &quot;+i+&quot;\n&quot;);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">tempNode &#x3D; tempNode.getNext();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(&quot;Node not found!! \n&quot;);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Deletes a node having a given value</span><br><span class="line">public void deletionOfNode(int location) &#123;</span><br><span class="line">if (!existsLinkedList()) &#123;</span><br><span class="line">System.out.println(&quot;The linked list does not exist!!&quot;);&#x2F;&#x2F; Linked List does not exists</span><br><span class="line">return;</span><br><span class="line">&#125; else if (location &#x3D;&#x3D; 0) &#123; &#x2F;&#x2F; we want to delete first element</span><br><span class="line">head &#x3D; head.getNext();</span><br><span class="line">setSize(getSize()-1);</span><br><span class="line">if(getSize() &#x3D;&#x3D; 0) &#123; &#x2F;&#x2F; if there are no more nodes in this list</span><br><span class="line">tail &#x3D; null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else if (location &gt;&#x3D; getSize())&#123; &#x2F;&#x2F;If location is not in range or equal, then delete last node</span><br><span class="line">SingleNode tempNode &#x3D; head;</span><br><span class="line">for (int i &#x3D; 0; i &lt; size - 1; i++) &#123;</span><br><span class="line">tempNode &#x3D; tempNode.getNext(); &#x2F;&#x2F;temp node points to 2nd last node</span><br><span class="line">&#125;</span><br><span class="line">if (tempNode &#x3D;&#x3D; head) &#123; &#x2F;&#x2F;if this is the only element in the list</span><br><span class="line">tail &#x3D; head &#x3D; null;</span><br><span class="line">setSize(getSize()-1);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">tempNode.setNext(null); </span><br><span class="line">tail&#x3D; tempNode;</span><br><span class="line">setSize(getSize()-1);</span><br><span class="line"></span><br><span class="line">&#125;else &#123; &#x2F;&#x2F;if any inside node is to be deleted</span><br><span class="line">SingleNode tempNode &#x3D; head;</span><br><span class="line">for (int i &#x3D; 0; i &lt; location - 1; i++) &#123;</span><br><span class="line">tempNode &#x3D; tempNode.getNext(); &#x2F;&#x2F; we need to traverse till we find the location</span><br><span class="line">&#125;</span><br><span class="line">tempNode.setNext(tempNode.getNext().getNext()); &#x2F;&#x2F; delete the required node</span><br><span class="line">setSize(getSize()-1);</span><br><span class="line">&#125;&#x2F;&#x2F;end of else</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F;end of method</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F; end of class</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The method which could be applied on the Single linked list&lt;/p&gt;
    
    </summary>
    
    
      <category term="Alogrithm" scheme="http://jbj828.github.io/categories/Alogrithm/"/>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Linked List</title>
    <link href="http://jbj828.github.io/2020/01/30/LinkedList/"/>
    <id>http://jbj828.github.io/2020/01/30/LinkedList/</id>
    <published>2020-01-30T09:46:25.000Z</published>
    <updated>2020-02-01T05:36:35.819Z</updated>
    
    <content type="html"><![CDATA[<ul><li>What is linked list?<a id="more"></a><ul><li>A linked list is a linear data structure where is element is a separate object. Each element(node) of a list comprises of two items - the date and a reference to the next code. The most powerful feature of Linked list is that it is of variable size.</li></ul></li></ul><p><em>picture ref : data Structure and algorithms by DS GUY</em></p><br><p> <strong>Linked List VS Array</strong></p><pre><code>1. Seperate Object : The node of Linked list is could be separated from the list. However, the cells of Array can&apos;t be separated. The Array itself is separated from other Array.2. Variable Size : You can add, delete the node from Linked list. However, Array can&apos;t.3. Random Access : You can access the each cell of Array by using index. But on the linked list, you have to loop over all the node to get the data you want.</code></pre><p><strong>Components of Linked List</strong>   </p><pre><code>1. Node : Contains Data &amp; Reference to the next Node.2. Head : Reference to first node in the list.3. Tail : Reference to last node of the list.  </code></pre><h4 id="Types-of-Linked-List"><a href="#Types-of-Linked-List" class="headerlink" title="Types of Linked List"></a>Types of Linked List</h4><ul><li><strong>Single Linked List</strong><ul><li>In a singly linked list each node in the list stores the data of the node and a reference to the next node int the list. It does not store any reference to the previous node.<img src="/2020/01/30/LinkedList/linkedlist.PNG" class="" title="linked list"><br></li></ul></li><li><strong>Circular Linked List</strong><ul><li>In the case of a circular doubly linked list, the only change thata occurs is that the end of the given list is linked to the front<img src="/2020/01/30/LinkedList/circularSingle.PNG" class="" title="circular linked list"><br></li></ul></li><li><strong>Double Linked List</strong><ul><li>In double linked list each node contains two reference, that references to the previous and next node<img src="/2020/01/30/LinkedList/doublelinkedlist.PNG" class="" title="double linked list"><br></li></ul></li><li><strong>Circular Double Linked List</strong><ul><li>The only change that occurs is that the end of the given list is linked back to the front of the list and vice versa.<img src="/2020/01/30/LinkedList/circularDouble.PNG" class="" title="circular double linked list"></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;What is linked list?
    
    </summary>
    
    
      <category term="Alogrithm" scheme="http://jbj828.github.io/categories/Alogrithm/"/>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Two Dimension Array</title>
    <link href="http://jbj828.github.io/2020/01/29/MultipleDimensionArray/"/>
    <id>http://jbj828.github.io/2020/01/29/MultipleDimensionArray/</id>
    <published>2020-01-29T06:46:25.000Z</published>
    <updated>2020-01-30T08:54:11.809Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Declaring, instanciating, initializing a 2D Array</li></ul><a id="more"></a><ul><li><p>Declare               ————————- O(1)</p><ul><li>dataType[][] arr</li><li>ex: int[][] arr</li></ul></li><li><p>Instanciation of Array ————————-O(1)</p><ul><li>arrayRefVar = new datatype[row][col];</li><li>ex: arr = new int[2][3];</li></ul></li><li><p>Initialization        ————————–O(mn)</p><ul><li>a[0][0]=10;</li><li>a[0][1]=20;</li><li>a[0][2]=30;</li><li>a[1][0]=40;<br>….</li></ul></li></ul><ul><li>Declaring, instanciating, initializing ———–O(1)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* int[][] arr &#x3D; &#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>When to Use/Avoid Array</p><ul><li><p>When to use</p><ul><li>When there is a need to store multiple similar type of data</li><li>When random access is regular affair(접근할 때 바로 인덱스 넣으면 접근가능하기에 time complexity가 O(1)이다)</li></ul></li><li><p>When to avoid</p><ul><li>Data to be stored are non-homogenous(데이터 종류가 같지 않을 경우)</li><li>When number of data to be stored is not known in advance.</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Declaring, instanciating, initializing a 2D Array&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Alogrithm" scheme="http://jbj828.github.io/categories/Alogrithm/"/>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Basic Array Theory and Single Dimension Array</title>
    <link href="http://jbj828.github.io/2020/01/29/Array/"/>
    <id>http://jbj828.github.io/2020/01/29/Array/</id>
    <published>2020-01-29T04:46:25.000Z</published>
    <updated>2020-01-29T05:01:12.788Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Types of Array</li></ul><a id="more"></a><ul><li>One Dimensional   (Array[i])</li><li>Multi Dimensional <ul><li>two Dimensioanl  (Array[row][col])</li><li>three  ‘’        (Array[depth][row][col])</li><li>four   ‘’</li><li>.. n   Dimensional</li></ul></li></ul><p>주로 one, two dimensional 사용함</p><ul><li>How is an Array represented in Memory?<ul><li>2d 3d 관계없이 memory에는 1행에 순서대로 저장된다. 1d Array 랑 같은 방식이라고 보면 된다.</li></ul></li></ul><ul><li>Create an Array<ul><li>Declare : Creates a reference to Array</li><li>Instanciation of an Array : Creates a Array</li><li>Initialization : Assigns values to cells in Array</li></ul></li></ul><ul><li>Single Dimension Array<ul><li>Array has a index. So when we consider the time complexity, we don’t need to loop all the array to get the value. We can just use the index to get the value.</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">package com.chung;</span><br><span class="line"></span><br><span class="line">public class SingleDimensionArray &#123;</span><br><span class="line">int arr[] &#x3D; null;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;Constructor</span><br><span class="line">public SingleDimensionArray(int sizeOfArray) &#123;</span><br><span class="line">arr &#x3D; new int[sizeOfArray];</span><br><span class="line">for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i] &#x3D; Integer.MIN_VALUE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Print the array</span><br><span class="line">public void traverseArray() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + &quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.out.println(&quot;Array no longer exists !&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;Insert value in the Array</span><br><span class="line">public void insert(int location, int valueToBeInserted) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if (arr[location] &#x3D;&#x3D; Integer.MIN_VALUE) &#123;</span><br><span class="line">arr[location] &#x3D; valueToBeInserted;</span><br><span class="line">System.out.println(&quot;Successfully inserted &quot; + valueToBeInserted + &quot; at location: &quot; + location);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">System.out.println(&quot;This cell is already occupied by another value.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">System.out.println(&quot;Invalid index to access array !&quot;);</span><br><span class="line">&#x2F;&#x2F; e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Access a particular element of an array</span><br><span class="line">public void accessingCell(int cellNumber) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">System.out.println(arr[cellNumber]);</span><br><span class="line"></span><br><span class="line">&#125; catch (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">System.out.println(&quot;Invalid index to access array !&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Search for an element in the given Array</span><br><span class="line">public void searchInAnArray(int valueToSearch) &#123;</span><br><span class="line">for (int i &#x3D; 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">if (arr[i] &#x3D;&#x3D; valueToSearch) &#123;</span><br><span class="line">System.out.println(&quot;Value found !&quot;);</span><br><span class="line">System.out.println(&quot;Index of &quot; + valueToSearch + &quot; is: &quot; + i);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(valueToSearch + &quot; is not found!!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Delete value from given Array</span><br><span class="line">public void deleteValueFromArray(int deleteValueFromThisCell) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">arr[deleteValueFromThisCell] &#x3D; Integer.MIN_VALUE;</span><br><span class="line">&#125; catch (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(&quot;Cant delete the value as cell# provided is not in the range of array !&quot;);</span><br><span class="line">&#x2F;&#x2F; e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Delete the entire Array</span><br><span class="line">public void deleteThisArray() &#123;</span><br><span class="line">arr &#x3D; null;</span><br><span class="line">System.out.println(&quot;Array has been succefully deleted&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;&#x2F;&#x2F;end of class</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Types of Array&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Alogrithm" scheme="http://jbj828.github.io/categories/Alogrithm/"/>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Reucursive</title>
    <link href="http://jbj828.github.io/2020/01/28/recursion/"/>
    <id>http://jbj828.github.io/2020/01/28/recursion/</id>
    <published>2020-01-28T13:46:25.000Z</published>
    <updated>2020-01-29T01:50:30.349Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Properties of Recursion<ul><li>Some operation is performed multiple times with different inputs</li><li>In every step we try to make the problem smaller</li><li>We have to have a base condition which tells a system when to stop the recursion.</li></ul></li></ul><a id="more"></a><ul><li>Format of a ‘Recursive Function’<ul><li>Recursive Case : Case where the function recur</li><li>Base Case : Case where the function does not recur</li></ul></li></ul><p>Factorial example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Factorial(n):</span><br><span class="line">  if(n equals 0)&#123;</span><br><span class="line">    return 1;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return (n * factorial(n-1))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Fibonacci series</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fib(n)</span><br><span class="line">  if(n is less than 1)&#123;</span><br><span class="line">      return error message</span><br><span class="line">  &#125; else if(n is equal to 1 or 2)&#123;</span><br><span class="line">      return n-1;</span><br><span class="line">  &#125; else&#123;</span><br><span class="line">      return fib(n-1) + fin(n-2);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>Time Complexity of Recursive Algo</p><ul><li><p>Problem statement : Given a sorted array of 11 numbers, find number 110<br>  10 20 30 40 50 … 90 100 110</p></li><li><p>Solution</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BinarySearch(int findNumber, int arr[], start, end):  ----- T(n)</span><br><span class="line">  if(start equals end)&#123;</span><br><span class="line">    if(arr[start] equals findNumber)&#123;</span><br><span class="line">        return findNumber</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">        return error message that number does not exist in the array</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  mid &#x3D; findMid(arr[], start, end)  </span><br><span class="line">    if(mid &gt; findNumber)&#123;</span><br><span class="line">      BianarySearch(int Number, int arr[], start, mid);  -------- T(n&#x2F;2)</span><br><span class="line">    &#125;else if( mid &lt; findNumber)&#123;</span><br><span class="line">      BinarySearch(int Number, int arr[], mid, end);  ----------- T(n&#x2F;2)</span><br><span class="line">    &#125;else if(mid &#x3D; findNumber)&#123;</span><br><span class="line">      return mid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>Time Complexity:<br>T(n) = O(1) + T(n/2)</p></li><li><p>Back Substitution : </p><ul><li>T(n) = T(n/2) + 1 ——- Equation #1</li><li>T(1) = 1         ——– Base Condition</li><li>T(n/2) = T(n/4) + 1 ——Equation #2</li><li>T(n/4) = T(n/8) + 1 ——Equation #3</li></ul></li></ul><p>  T(n) = T(n/2) + 1<br>       = (T(n/4) + 1) + 1<br>       =  T(n/4) + 2<br>       = (T(n/8) + 1) + 2<br>       = T(n/8) + 3<br>       = T(n/2^k) + k </p><pre><code>n/2^k = 1    n = 2^k    k = log n= T(1) + log n= 1 + log n= log n</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Properties of Recursion&lt;ul&gt;
&lt;li&gt;Some operation is performed multiple times with different inputs&lt;/li&gt;
&lt;li&gt;In every step we try to make the problem smaller&lt;/li&gt;
&lt;li&gt;We have to have a base condition which tells a system when to stop the recursion.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Alogrithm" scheme="http://jbj828.github.io/categories/Alogrithm/"/>
    
    
      <category term="Algorithm" scheme="http://jbj828.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Model 2 - Expression language</title>
    <link href="http://jbj828.github.io/2020/01/27/jsp-model2-theory/"/>
    <id>http://jbj828.github.io/2020/01/27/jsp-model2-theory/</id>
    <published>2020-01-27T04:10:25.000Z</published>
    <updated>2020-01-27T14:21:43.547Z</updated>
    
    <content type="html"><![CDATA[<ul><li>EL(Expression Language)<ul><li>표현식으로 attribute나 parameter 등을 JSP파일에서 출력할 용도로 사용하는 언어</li><li>attribute 를 출력할 때는 ${애트리뷰트 이름} 으로 출력</li><li>파라미터는 ${param.이름} 또는 ${paramValue.이름[idx]} 의 형태로 출력</li></ul></li></ul><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;EL(Expression Language)&lt;ul&gt;
&lt;li&gt;표현식으로 attribute나 parameter 등을 JSP파일에서 출력할 용도로 사용하는 언어&lt;/li&gt;
&lt;li&gt;attribute 를 출력할 때는 ${애트리뷰트 이름} 으로 출력&lt;/li&gt;
&lt;li&gt;파라미터는 ${param.이름} 또는 ${paramValue.이름[idx]} 의 형태로 출력&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JSP" scheme="http://jbj828.github.io/categories/JSP/"/>
    
    
      <category term="jsp" scheme="http://jbj828.github.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>TIL</title>
    <link href="http://jbj828.github.io/2020/01/25/jsp-model1/"/>
    <id>http://jbj828.github.io/2020/01/25/jsp-model1/</id>
    <published>2020-01-25T13:46:25.000Z</published>
    <updated>2020-01-25T13:47:03.723Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>Connection Pool을 사용하지 않고 게시판을 만들어 보았다.</p><p>이전에 공부했던 connection pool사용한 회원가입-로그인 프로젝트는 별도로 server에 환경설정해야 하는 것과 달리 pool을 사용하지 않으면 DBO 클래스에서 데이터베이스에 연결만 시킬 뿐 환경설정은 필요하지 않다.</p><p>하지만 역시 connection pool을 사용하는게 재정비 및 다수의 사용자를 받아들이기엔 이상적이다.</p><p>오늘부터 정보처리산업기사 공부를 시작한다. 일주일에 한 챕터씩 끝내는 것을 목표로 나아가자!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;Connection Pool을 사용하지 않고 게시판을 만들어 보았다.&lt;/p&gt;
&lt;p&gt;이전에 공부했던 connection pool사용한 회원가입-로그인 프로젝트는 별도로 server에 환경설정해야 하는 것과 달리 p
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://jbj828.github.io/categories/JSP/"/>
    
    
      <category term="jsp" scheme="http://jbj828.github.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>Session Login Form</title>
    <link href="http://jbj828.github.io/2020/01/22/SessionLogin/"/>
    <id>http://jbj828.github.io/2020/01/22/SessionLogin/</id>
    <published>2020-01-22T04:46:25.000Z</published>
    <updated>2020-01-23T13:32:13.915Z</updated>
    
    <content type="html"><![CDATA[<p>Session 을 이용한 로그인 폼 작성법</p><a id="more"></a><p>SessionLoginForm.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;EUC-KR&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;EUC-KR&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;EUC-KR&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;h2&gt; Session Login &lt;&#x2F;h2&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;SessionLoginProc.jsp&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">&lt;table border&#x3D;&quot;1&quot; width&#x3D;&quot;400&quot;&gt;</span><br><span class="line">&lt;tr height&#x3D;&quot;50&quot;&gt;</span><br><span class="line">&lt;td width&#x3D;&quot;150&quot; align&#x3D;&quot;center&quot;&gt; ID &lt;&#x2F;td&gt;</span><br><span class="line">&lt;td width&#x3D;&quot;250&quot;&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;id&quot; &#x2F;&gt; &lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr height&#x3D;&quot;50&quot;&gt;</span><br><span class="line">&lt;td width&#x3D;&quot;150&quot; align&#x3D;&quot;center&quot;&gt; Password &lt;&#x2F;td&gt;</span><br><span class="line">&lt;td width&#x3D;&quot;250&quot;&gt; &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;pass&quot; &#x2F;&gt; &lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr height&#x3D;&quot;50&quot;&gt;</span><br><span class="line">&lt;td colspan&#x3D;&quot;2&quot; align&#x3D;&quot;center&quot;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Login&quot;&#x2F;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>SessionLoginProc.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;EUC-KR&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;EUC-KR&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;EUC-KR&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;center&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">request.setCharacterEncoding(&quot;euc-kr&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;사용자로부터 데이터를 읽어드림</span><br><span class="line">String id &#x3D; request.getParameter(&quot;id&quot;);</span><br><span class="line">String pass &#x3D; request.getParameter(&quot;pass&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;아이디와 패스워드를 저장</span><br><span class="line">session.setAttribute(&quot;id&quot;, id);</span><br><span class="line">session.setAttribute(&quot;pass&quot;, pass);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;세션의 유지시간 설정</span><br><span class="line">session.setMaxInactiveInterval(60);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt; Your id is &lt;%&#x3D; id %&gt;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;SessionLoginProc2.jsp&quot;&gt;Next page&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>SessionLoginProc2.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;EUC-KR&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;EUC-KR&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;EUC-KR&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;center&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">&#x2F;&#x2F;세션을 이용하여 데이터를 불러드림</span><br><span class="line">String id &#x3D; (String) session.getAttribute(&quot;id&quot;);</span><br><span class="line">String pass &#x3D; (String) session.getAttribute(&quot;pass&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt; Your id is &lt;%&#x3D; id %&gt;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Session 을 이용한 로그인 폼 작성법&lt;/p&gt;
    
    </summary>
    
    
      <category term="JSP" scheme="http://jbj828.github.io/categories/JSP/"/>
    
    
      <category term="jsp" scheme="http://jbj828.github.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>게시판 만들기 TIL</title>
    <link href="http://jbj828.github.io/2020/01/21/today1/"/>
    <id>http://jbj828.github.io/2020/01/21/today1/</id>
    <published>2020-01-21T13:46:25.000Z</published>
    <updated>2020-01-21T13:23:02.234Z</updated>
    
    <content type="html"><![CDATA[<p>오늘 배운 것</p><ul><li><p>게시판 만들기 중 생긴 버그로 인해 한동안 고생했다. 해답은 역시…에러창을 잘 들여다보면 나온다. 아직 모든 버그를 고치지 못했지만 고지가 보인다. </p><a id="more"></a></li><li><p>MySQL과 오라클은 데이터베이스로 문법이 대부분 비슷할 것이라 생각한 착각이 시간을 잡아먹었다. 전혀 예상치 못했던 부분에서 문법이 달랐다. 항상 링크가 잘못되었다고 생각했다. 역시 문법 문제였다.</p></li><li><p>처음으로 프로젝트를 문서화했다. 구체적으로 모든 코드를 적지 않았다. 프로젝트 시작 전 초안을 만든다는 생각으로 작성했다. 늘 짐으로 느껴졌던 문서화가 생각보다 재밌었고 프로젝트의 구조를 이해하는 데 도움이 되었다.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;오늘 배운 것&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;게시판 만들기 중 생긴 버그로 인해 한동안 고생했다. 해답은 역시…에러창을 잘 들여다보면 나온다. 아직 모든 버그를 고치지 못했지만 고지가 보인다. &lt;/p&gt;
    
    </summary>
    
    
      <category term="JSP" scheme="http://jbj828.github.io/categories/JSP/"/>
    
    
      <category term="jsp" scheme="http://jbj828.github.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>Connection Pool</title>
    <link href="http://jbj828.github.io/2020/01/20/ConnectionPool/"/>
    <id>http://jbj828.github.io/2020/01/20/ConnectionPool/</id>
    <published>2020-01-20T13:46:25.000Z</published>
    <updated>2020-01-20T13:43:13.441Z</updated>
    
    <content type="html"><![CDATA[<p>Connection Pool이란?</p><ul><li><p>동시 접속자가 가질 수 있는 connection을 하나로 모아놓고 관리한다는 개념. 누군가 접속하면 자신이 관리하는 Pool에서 남아있는 Connection을 제공한다. 하지만 남아있는 connection이 없는 경우, 해당 클라이언트는 대기 상태로 전환시킨다. 이후 connection이 다시 pool에 들어오면 대기상태의 클라이언트에게 순서대로 제공한다.</p><a id="more"></a></li><li><p>즉, 데이터베이스와 연결된 connection을 미리 만들어서 pool 속에 저장해 두었다가 필요할 때 connection을 pool에서 쓰고 다시 pool에 반환하는 기법.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Connection Pool이란?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;동시 접속자가 가질 수 있는 connection을 하나로 모아놓고 관리한다는 개념. 누군가 접속하면 자신이 관리하는 Pool에서 남아있는 Connection을 제공한다. 하지만 남아있는 connection이 없는 경우, 해당 클라이언트는 대기 상태로 전환시킨다. 이후 connection이 다시 pool에 들어오면 대기상태의 클라이언트에게 순서대로 제공한다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="http://jbj828.github.io/categories/Database/"/>
    
    
      <category term="database" scheme="http://jbj828.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>Cookie Login Form</title>
    <link href="http://jbj828.github.io/2020/01/19/CookieLogin/"/>
    <id>http://jbj828.github.io/2020/01/19/CookieLogin/</id>
    <published>2020-01-19T06:46:25.000Z</published>
    <updated>2020-01-19T05:47:47.615Z</updated>
    
    <content type="html"><![CDATA[<p>쿠키를 이용해 로그인 폼 작성하는 방법</p><a id="more"></a><p>CookieLoginForm.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;EUC-KR&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;EUC-KR&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;EUC-KR&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">&#x2F;&#x2F;사용자 컴퓨터의 쿠키 저장소로부터 쿠키값을 읽어드림 - 몇 개인지 모르기에 배열을 이용하여 쿠키값을 저장</span><br><span class="line">Cookie[] cookies &#x3D; request.getCookies();</span><br><span class="line">String id &#x3D;&quot;&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;쿠키값이 없을 수도 있기에 null처리 해줌</span><br><span class="line">if(cookies !&#x3D; null)&#123;</span><br><span class="line">for(int i&#x3D;0; i&lt; cookies.length; i++)&#123;</span><br><span class="line">if(cookies[i].getName().equals(&quot;id&quot;))&#123;</span><br><span class="line">id &#x3D; cookies[i].getValue();</span><br><span class="line">break; &#x2F;&#x2F; 우리가 원하는 데이터를 찾았기에 반복문을 빠져나옴</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;h2&gt; Cookie Login &lt;&#x2F;h2&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;CookieLoginProc.jsp&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">&lt;table border&#x3D;&quot;1&quot; width&#x3D;&quot;400&quot;&gt;</span><br><span class="line">&lt;tr height&#x3D;&quot;50&quot;&gt;</span><br><span class="line">&lt;td width&#x3D;&quot;150&quot; align&#x3D;&quot;center&quot;&gt; ID &lt;&#x2F;td&gt;</span><br><span class="line">&lt;td width&#x3D;&quot;250&quot;&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;id&quot; value&#x3D;&lt;%&#x3D; id %&gt; &#x2F;&gt; &lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr height&#x3D;&quot;50&quot;&gt;</span><br><span class="line">&lt;td width&#x3D;&quot;150&quot; align&#x3D;&quot;center&quot;&gt; Password &lt;&#x2F;td&gt;</span><br><span class="line">&lt;td width&#x3D;&quot;250&quot;&gt; &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; &#x2F;&gt; &lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr height&#x3D;&quot;50&quot;&gt;</span><br><span class="line">&lt;td colspan&#x3D;&quot;2&quot; align&#x3D;&quot;center&quot;&gt;&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;save&quot;&gt; Save ID &lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr height&#x3D;&quot;50&quot;&gt;</span><br><span class="line">&lt;td colspan&#x3D;&quot;2&quot; align&#x3D;&quot;center&quot;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Login&quot;&#x2F;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>CookieLoginProc.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;EUC-KR&quot;</span><br><span class="line">    pageEncoding&#x3D;&quot;EUC-KR&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;EUC-KR&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">request.setCharacterEncoding(&quot;euc-kr&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;아이디 저장 체크박스가 체크되었는 판단 여부</span><br><span class="line">String save &#x3D; request.getParameter(&quot;save&quot;);</span><br><span class="line">&#x2F;&#x2F;아이디 값을 저장</span><br><span class="line">String id &#x3D; request.getParameter(&quot;id&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;체크 되었는지 비교 판단</span><br><span class="line">if(save !&#x3D; null)&#123; &#x2F;&#x2F;아이디 저장이 눌렸다면</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;쿠키를 사용하려면 쿠키클래스를 생성해주어야 함</span><br><span class="line">Cookie cookie &#x3D; new Cookie(&quot;id&quot;, id); &#x2F;&#x2F; 첫번째 String 키 값을 적어줌, 두번째 String엔 해당하는 value 값을 넣어줌</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;쿠키 유효시간 설정</span><br><span class="line">cookie.setMaxAge(60*10); &#x2F;&#x2F;10분간 유효</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;사용자에게 쿠키값을 넘겨준다</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">out.write(&quot;Cookie is generated.&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;쿠키를 이용해 로그인 폼 작성하는 방법&lt;/p&gt;
    
    </summary>
    
    
      <category term="JSP" scheme="http://jbj828.github.io/categories/JSP/"/>
    
    
      <category term="jsp" scheme="http://jbj828.github.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>sequence, limit, view</title>
    <link href="http://jbj828.github.io/2020/01/16/mysql-sequence-limit/"/>
    <id>http://jbj828.github.io/2020/01/16/mysql-sequence-limit/</id>
    <published>2020-01-16T14:46:25.000Z</published>
    <updated>2020-01-18T15:21:42.151Z</updated>
    
    <content type="html"><![CDATA[<ul><li>sequence<ul><li>로우를 추가할 때 자동으로 증가하는 값이 저장되는 것을 시퀀스라고 부른다</li><li>시퀀스는 데이터베이스 별 사용하는 방법이 다르므로 반드시 파악.<a id="more"></a></li><li>mysql은 auto_increment 키워드를 설정해주면 된다.</li><li>데이터를 insert 할 때 auto_increment를 설정한 컬럼은 제외한다</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create table test_table100(</span><br><span class="line">data1 int auto_increment,</span><br><span class="line">data2 int not null,</span><br><span class="line">data3 int not null,</span><br><span class="line">constraint pk1 primary key (data1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into test_table100 (data2, data3) values (100, 200);</span><br><span class="line">insert into test_table100 (data2, data3) values (101, 201);</span><br><span class="line">insert into test_table100 (data2, data3) values (102, 202);</span><br><span class="line"></span><br><span class="line">select * from test_table100;</span><br></pre></td></tr></table></figure><ul><li>limit<ul><li>select 해서 가져온 로우에서 원하는 범위의 로우만 가지고 올 때 사용한다.</li><li>게시판 등에서 사용하는 페이징 기법을 구현할 때 사용한다.</li><li>데이터베이스 별 구현 방법 다르다</li><li>select 문 limit 시작인덱스, 개수</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use employees;</span><br><span class="line">select * from employees;</span><br><span class="line"></span><br><span class="line">select * from employees order by emp_no;</span><br><span class="line">select * from employees order by emp_no limit 0, 10;</span><br><span class="line">select * from employees order by emp_no limit 10, 10;</span><br></pre></td></tr></table></figure><ul><li><p>view</p><ul><li><p>view 는 가상의 테이블을 의미한다</p></li><li><p>두 개 이상의 테이블을 조인하거나 서브쿼리를 사용하는 select 문은 쿼리문이 복잡해지게 되는데 이를 매번 사용하게 되면 개발자의 불편함이 따르게 된다.</p></li><li><p>이 때 조인이나 서브쿼리를 사용해 얻어진 결과를 뷰로 만들어 놓으면 개발자는 뷰를 통해 결과를 얻어올 수 있다.</p></li><li><p>사실 뷰는 select문을 통해 얻어진 결과를 가지고 있는 것이 아니라 select문 자체를 가지고 있어 뷰를 select하면 이전에 사용한 쿼리문이 실행되어 결과를 가져오게 된다.</p></li><li><p>create view 뷰이름 as select 쿼리문</p></li><li><p>drop view 뷰이름</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">create table test_table4000(</span><br><span class="line">data1 int,</span><br><span class="line">data2 int not null,</span><br><span class="line">constraint pk1 primary key (data1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table test_table5000(</span><br><span class="line">data1 int not null,</span><br><span class="line">data3 int not null,</span><br><span class="line">constraint fk10 foreign key (data1) references test_table4000 (data1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into test_table4000 (data1, data2) values (1,10);</span><br><span class="line">insert into test_table4000 (data1, data2) values (2,20);</span><br><span class="line">insert into test_table4000 (data1, data2) values (3,30);</span><br><span class="line"></span><br><span class="line">insert into test_table5000 (data1, data3) values (1, 100);</span><br><span class="line">insert into test_table5000 (data1, data3) values (2, 200);</span><br><span class="line">insert into test_table5000 (data1, data3) values (3, 300);</span><br><span class="line"></span><br><span class="line">select a1.data1, a1.data2, a2.data3</span><br><span class="line">from test_table4000 a1, test_table5000 a2</span><br><span class="line">where a1.data1 &#x3D; a2.data1;</span><br><span class="line"></span><br><span class="line">create view test_view</span><br><span class="line">as </span><br><span class="line">select a1.data1, a1.data2, a2.data3</span><br><span class="line">from test_table4000 a1, test_table5000 a2</span><br><span class="line">where a1.data1 &#x3D; a2.data1;</span><br><span class="line"></span><br><span class="line">select * from test_view;</span><br><span class="line"></span><br><span class="line">drop view test_view;</span><br><span class="line"></span><br><span class="line">select * from test_view;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;sequence&lt;ul&gt;
&lt;li&gt;로우를 추가할 때 자동으로 증가하는 값이 저장되는 것을 시퀀스라고 부른다&lt;/li&gt;
&lt;li&gt;시퀀스는 데이터베이스 별 사용하는 방법이 다르므로 반드시 파악.
    
    </summary>
    
    
      <category term="Database, MySQL" scheme="http://jbj828.github.io/categories/Database-MySQL/"/>
    
    
      <category term="database, MySQL" scheme="http://jbj828.github.io/tags/database-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>제약조건</title>
    <link href="http://jbj828.github.io/2020/01/16/mysql-makingCondition/"/>
    <id>http://jbj828.github.io/2020/01/16/mysql-makingCondition/</id>
    <published>2020-01-16T14:30:25.000Z</published>
    <updated>2020-01-18T15:21:42.903Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>제약조건</p><ul><li><p>컬럼에 저장 될 데이터의 조건을 설정하는 것</p></li><li><p>제약 조건을 설정하면 조건에 위배되는 데이터는 저장할 수 없다.</p><a id="more"></a></li><li><p>데이터베이스 내의 테이블은 여러 개발자가 사용하므로 제약 조건 설정이 중요하다.</p></li><li><p>primary key : 컬럼에 중복으로 데이터를 저장할 수 없으며, null 값을 허용하지 않는다. 주로 각 로우를 구분하기 위한 유일한 값을 저장하는 컬럼에 사용한다. 기본키라고도 부른다.</p></li><li><p>foreign key : 특정 테이블의 primary key 컬럼에 저장되어 있는 값만 저장할 수 있도록 한다. 흔히 참조키, 외래키라고 부르며 지정된 테이블의 기본키 컬럼을 참조하여 참조하는 기본키 컬럼에 저장되어 있는 값만 저장할 수 있다. null 값을 허용한다.</p></li><li><p>not null : 컬럼에 null 값을 저장할 수 없으며 쿼리문을 통해 반드시 값이 지정되어야 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">create table test_table10(</span><br><span class="line">data1 int not null</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into test_table10 (data1) value (1);</span><br><span class="line">insert into test_table10 (data1) value (2);</span><br><span class="line">insert into test_table10 (data1) value (3);</span><br><span class="line"></span><br><span class="line">select * from test_table10;</span><br><span class="line"></span><br><span class="line">insert into test_table10 (data1) value (null); -- 에러메시지 뜸</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table test_table20(</span><br><span class="line">data1 int,</span><br><span class="line">data2 int not null,</span><br><span class="line">constraint pk1 primary key(data1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into test_table20 (data1, data2) values (10, 100);</span><br><span class="line">insert into test_table20 (data1, data2) values (20, 200);</span><br><span class="line">insert into test_table20 (data1, data2) values (30, 300);</span><br><span class="line"></span><br><span class="line">select * from test_table20;</span><br><span class="line"></span><br><span class="line">insert into test_table20 (data1, data2) values (10, 100); -- 에러메시지 뜸</span><br><span class="line">insert into test_table20 (data1, data2) values (10, null); -- 에러메시지 뜸</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table test_table30(</span><br><span class="line">data1 int,</span><br><span class="line">data2 int,</span><br><span class="line">constraint pk2 primary key (data1),</span><br><span class="line">constraint fk2 foreign key (data2) references test_table20 (data1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">select * from test_table20;</span><br><span class="line">insert into test_table30 (data1, data2) values (1,10);</span><br><span class="line"></span><br><span class="line">insert into test_table30 (data1, data2) values (1, 40); -- 에러메시지 (data1에는 40 이라는 값이 없음)</span><br><span class="line">insert into test_table30 (data1, data2) values (2, null);</span><br><span class="line">insert into test_table30 (data1) values (6);</span><br><span class="line"></span><br><span class="line">select * from test_table30;</span><br></pre></td></tr></table></figure></li><li><p>unique : 컬럼에 중복된 값을 저장할 수 없다. null은 허용한다</p></li><li><p>check : 값의 범위나 종류를 지정하여 조건에 맞는 값만 저장할 수 있도록 한다. check 제약조건은 mysql에서 지원하지 않는다.</p></li><li><p>default : null이 들어올 경우 기본 설정되는 값을 지정한다. default를 설정할 경우 컬럼에 null을 저장할 수 없다.</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">create table test_table40(</span><br><span class="line">data1 int,</span><br><span class="line">data2 int not null,</span><br><span class="line">constraint uk1 unique (data1),</span><br><span class="line">constraint uk2 unique (data2)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into test_table40 (data1, data2) values (1, 10);</span><br><span class="line">insert into test_table40 (data1, data2) values (2, 20);</span><br><span class="line">select * from test_table40;</span><br><span class="line">insert into test_table40 (data1, data2) values (1, 30); -- error</span><br><span class="line">insert into test_table40 (data1, data2) values (3, 10); -- error</span><br><span class="line"></span><br><span class="line">insert into test_table40 (data1, data2) values (null, 40);</span><br><span class="line">insert into test_table40 (data1, data2) values (null, 50);</span><br><span class="line"></span><br><span class="line">select * from test_table40;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table test_table50(</span><br><span class="line">data1 int not null,</span><br><span class="line">data2 int not null,</span><br><span class="line">constraint chk1 check (data1 &gt; 10), -- 10보다 큰 것만 넣어라</span><br><span class="line">constraint chk2 check (data2 in(10, 20, 30)) -- 10,20,30 만 넣어라</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table test_table60(</span><br><span class="line">data1 int not null default 1,</span><br><span class="line">data2 int not null default 10</span><br><span class="line">);</span><br><span class="line">insert into test_table60 (data1, data2) values (null, null);</span><br><span class="line"></span><br><span class="line">select * from test_table60; -- null 지정한건 생략해버림</span><br><span class="line"></span><br><span class="line">insert into test_table60 (data1) values (100); -- 100 10 </span><br><span class="line">insert into test_table60 (data2) values (200); -- 1 200</span><br><span class="line">select * from test_table60;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;제약조건&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;컬럼에 저장 될 데이터의 조건을 설정하는 것&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;제약 조건을 설정하면 조건에 위배되는 데이터는 저장할 수 없다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database, MySQL" scheme="http://jbj828.github.io/categories/Database-MySQL/"/>
    
    
      <category term="database, MySQL" scheme="http://jbj828.github.io/tags/database-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>테이블 변경하기</title>
    <link href="http://jbj828.github.io/2020/01/16/change-table/"/>
    <id>http://jbj828.github.io/2020/01/16/change-table/</id>
    <published>2020-01-15T15:40:25.000Z</published>
    <updated>2020-01-15T15:21:36.166Z</updated>
    
    <content type="html"><![CDATA[<ul><li>rename 명령문 : 테이블 이름을 변경</li><li>alter 명령문 : 테이블의 컬럼을 추가, 변경, 삭제</li><li>drop table 명령문 : 테이블 삭제<a id="more"></a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br><span class="line">-- rename</span><br><span class="line">rename table test_table1 to test_table3;</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">-- 속성변경</span><br><span class="line">desc test_table3;</span><br><span class="line">alter table test_table3 modify data1 int(100);</span><br><span class="line">desc test_table3;</span><br><span class="line"></span><br><span class="line">-- 컬럼변경</span><br><span class="line">alter table test_table3 change data1 data10 int(200);</span><br><span class="line">desc test_table3;</span><br><span class="line"></span><br><span class="line">-- 컬럼추가</span><br><span class="line">alter table test_table3 add data4 int(10);</span><br><span class="line">desc test_table3;</span><br><span class="line"></span><br><span class="line">-- 컬럼삭제</span><br><span class="line">alter table test_table3 drop data4;</span><br><span class="line">desc test_table3;</span><br><span class="line"></span><br><span class="line">-- 테이블 삭제</span><br><span class="line">drop table test_table3;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;rename 명령문 : 테이블 이름을 변경&lt;/li&gt;
&lt;li&gt;alter 명령문 : 테이블의 컬럼을 추가, 변경, 삭제&lt;/li&gt;
&lt;li&gt;drop table 명령문 : 테이블 삭제
    
    </summary>
    
    
      <category term="Database, MySQL" scheme="http://jbj828.github.io/categories/Database-MySQL/"/>
    
    
      <category term="database, MySQL" scheme="http://jbj828.github.io/tags/database-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Transaction</title>
    <link href="http://jbj828.github.io/2020/01/16/transaction-management/"/>
    <id>http://jbj828.github.io/2020/01/16/transaction-management/</id>
    <published>2020-01-15T15:12:25.000Z</published>
    <updated>2020-01-15T15:15:59.490Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>트랜젝션</p><ul><li><p>데이터베이스에서 데이터 처리의 한 단위를 트랜젝션이라고 한다.</p></li><li><p>데이터 저장, 수정, 삭제 등 일련의 활동은 즉시 하드디스크에 반영되지 않는다.</p><a id="more"></a></li><li><p>커밋을 하기 전에 발생한 변화는 메모리 상에서만 동작한다. 커밋을 하면 하드디스크에 적용된다.</p></li><li><p>개발자가 데이터 작업을 위해 입력하는 명령문의 시작부터 커밋까지의 과정을 트랜젝션이라고 부른다.</p></li><li><p>rollback</p><ul><li>데이터 저장, 삭제, 수정 작업을 한 뒤에 원래 형태로 되돌리는 작업</li><li>커밋을 한 후 RollBack 작업을 해도 원래 상태로 되돌리지 못한다.</li><li>workbench와 같은 프로그램에서는 자동으로 커밋작업이 발생하므로 RollBack을 해도 작동되지 않는다.</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select * from test_table2;</span><br><span class="line"></span><br><span class="line">delete from test_table2;</span><br><span class="line">select * from test_table2;</span><br><span class="line"></span><br><span class="line">rollback;</span><br><span class="line">select * from test_table2;</span><br></pre></td></tr></table></figure><ul><li>savepoint<ul><li>savepoint를 지정하면 rollback 시 지정된 위치로 복원 가능</li><li>savepoint 명령어로 지점을 지정하고 rollback 명령어로 복원한다</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">insert into test_table2 (data1, data2, data3) values (100, &quot;lang1&quot;, 11.1);</span><br><span class="line">insert into test_table2 (data1, data2, data3) values (200, &quot;lang2&quot;, 22.1);</span><br><span class="line">insert into test_table2 (data1, data2, data3) values (300, &quot;lang3&quot;, 33.1);</span><br><span class="line"></span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line">select * from test_table2;</span><br><span class="line">update test_table2 set data2&#x3D;&quot;newlang&quot;, data3&#x3D;44.4 where data1&#x3D;100;</span><br><span class="line">savepoint aa;</span><br><span class="line">delete from test_table2 where data1&#x3D;100;</span><br><span class="line">rollback to aa;</span><br><span class="line">select * from test_table2;</span><br></pre></td></tr></table></figure><ul><li>truncate<ul><li>truncate를 사용하면 지정된 테이블의 모든 로우를 삭제한다.</li><li>delete문은 데이터베이스에 바로 반영하지</li><li>않으므로 rollback이 가능하지만, truncate는 바로 데이터베이스에 반영하므로 rollback이 불가능</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">truncate test_table2;</span><br><span class="line">rollback;</span><br><span class="line">select * from test_table2;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;복원되지 않음</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;트랜젝션&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;데이터베이스에서 데이터 처리의 한 단위를 트랜젝션이라고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;데이터 저장, 수정, 삭제 등 일련의 활동은 즉시 하드디스크에 반영되지 않는다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database, MySQL" scheme="http://jbj828.github.io/categories/Database-MySQL/"/>
    
    
      <category term="database, MySQL" scheme="http://jbj828.github.io/tags/database-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Making DataBase</title>
    <link href="http://jbj828.github.io/2020/01/15/makeDB/"/>
    <id>http://jbj828.github.io/2020/01/15/makeDB/</id>
    <published>2020-01-15T06:46:25.000Z</published>
    <updated>2020-01-15T14:11:44.725Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>데이터 베이스 만들기</p><ul><li>데이터베이스 생성은 create database 구문을 사용</li><li>create database 이름<a id="more"></a></li><li>생성한 데이터베이스는 use 문을 이용하여 선택해야 한다</li><li>utf-8 인코딩 타입의 한글을 저장하려면 다음과 같이 언어 타입을 지정해준다<ul><li>create database 이름<br>character set = ‘utf8’<br>collate = ‘utf8_general_ci’;</li></ul></li></ul></li><li><p>테이블 만들기</p><ul><li><p>데이터베이스를 선택 후 create table 명령문을 이용해 테이블 생성</p></li><li><p>create table 이름(<br>컬럼이름 자료형 제약조건,<br>컬럼이름 자료형 제약조건,<br>);</p><ul><li>char(n) : 고정길이 문자열(속도빠름)</li><li>varchar(n) : 가변길이 문자열</li><li>int(n) : 정수형 타입</li><li>bigint(n) : 정수형 타입</li><li>float(n,m) : 부동소수점 타입</li><li>double(n,m) : 부동소수점 타입</li><li>date : 날짜</li><li>time : 시간</li><li>datetime : 날짜와 시간<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create database test_db</span><br><span class="line">character set &#x3D; &#39;utf8&#39;</span><br><span class="line">collate &#x3D; &#39;utf8_general_ci&#39;;</span><br><span class="line"></span><br><span class="line">use test_db;</span><br><span class="line"></span><br><span class="line">create table test_table1(</span><br><span class="line">data1 int(10),</span><br><span class="line">data2 varchar(10),</span><br><span class="line">data3 float(10,2)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">desc test_table1;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>서브쿼리를 이용한 테이블 생성하기</p><ul><li>select문을 통해 가져온 결과를 이용해 테이블을 생성할 때 사용한다</li><li>create table 테이블명<br>as<br>select문</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">use employees;</span><br><span class="line"></span><br><span class="line">select * from departments;</span><br><span class="line"></span><br><span class="line">create table dept1</span><br><span class="line">as</span><br><span class="line">select * from departments;</span><br><span class="line"></span><br><span class="line">desc dept1;</span><br><span class="line"></span><br><span class="line">select * from dept1;</span><br><span class="line"></span><br><span class="line">-- 구조는 생성하지만 데이터는 넣지 않을 때 </span><br><span class="line">create table dept2</span><br><span class="line">as</span><br><span class="line">select * from departments where 1&#x3D;0;</span><br><span class="line"></span><br><span class="line">desc dept2;</span><br><span class="line"></span><br><span class="line">select * from dept2;</span><br></pre></td></tr></table></figure><ul><li>데이터 저장하기<ul><li>insert 문을 활용하면 데이터를 저장할 수 있다</li><li>이 때, 로우 단위로 저장된다</li><li>insert into 테이블명 (컬럼명) values (값)</li><li>insert into 테이블명 values (값)</li><li>컬럼에 저장될 값을 지정하지 않으면 null이 저장된다.</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">use test_db;</span><br><span class="line"></span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">desc test_table1;</span><br><span class="line"></span><br><span class="line">insert into test_table1 (data1, data2, data3) values (100, &#39;문자열1&#39;, 12.2);</span><br><span class="line"></span><br><span class="line">select * from test_table1;</span><br><span class="line"></span><br><span class="line">insert into test_table1 value (300, &quot;another&quot;, 12.4);</span><br><span class="line"></span><br><span class="line">select * from test_table1;</span><br><span class="line"></span><br><span class="line">create table test_table2</span><br><span class="line">as</span><br><span class="line">select * from test_table1 where 1&#x3D;0;</span><br><span class="line"></span><br><span class="line">desc test_table2;</span><br><span class="line">select * from test_table2;</span><br><span class="line"></span><br><span class="line">insert into test_table2</span><br><span class="line">select data1, data2, data3 from test_table1;</span><br><span class="line"></span><br><span class="line">select * from test_table2;</span><br></pre></td></tr></table></figure><ul><li>데이터 수정하기<ul><li>update 문을 활용하면 데이터를 수정할 수 있다</li><li>update 테이블명 set 컬럼명=값, 컬럼명=값 where 조건식</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">update test_table1 set data2&#x3D;&quot;neence&quot;, data3&#x3D;77.77;</span><br><span class="line">select * from test_table1;</span><br><span class="line"></span><br><span class="line">select * from test_table2;</span><br><span class="line">update test_table2 set data1&#x3D;&quot;100&quot;, data2&#x3D;&quot;newWord&quot;</span><br><span class="line">where data1&#x3D;700;</span><br><span class="line">select * from test_table2;</span><br></pre></td></tr></table></figure><ul><li>데이터 삭제하기<ul><li>delete 문을 활용하면 데이터를 삭제할 수 있다.</li><li>delete from 테이블명 where 조건식</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">delete from test_table1;</span><br><span class="line">select * from test_table1;</span><br><span class="line"></span><br><span class="line">delete from test_table2 where data1&#x3D;100;</span><br><span class="line">select * from test_table2;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;데이터 베이스 만들기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스 생성은 create database 구문을 사용&lt;/li&gt;
&lt;li&gt;create database 이름
    
    </summary>
    
    
      <category term="Database, MySQL" scheme="http://jbj828.github.io/categories/Database-MySQL/"/>
    
    
      <category term="database, MySQL" scheme="http://jbj828.github.io/tags/database-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Join문, 서브쿼리, Set</title>
    <link href="http://jbj828.github.io/2020/01/15/postmysql-join/"/>
    <id>http://jbj828.github.io/2020/01/15/postmysql-join/</id>
    <published>2020-01-15T03:46:25.000Z</published>
    <updated>2020-01-15T04:30:43.677Z</updated>
    
    <content type="html"><![CDATA[<ul><li>join<ul><li>데이터의 중복을 최소화 하기 위해 테이블을 분리 시킨 후 데이터를 가져올 때 여러 테이블을 하나의 결과로 가져올 때 join문을 사용한다</li></ul></li></ul><a id="more"></a><ul><li>join문을 사용하면 여러 테이블의 데이터를 한 번에 가져올 수 있다</li><li>join 문을 사용하면 다 대 다의 관계로 가져온다. 이 때문에 잘못된 데이터가 구성될 수 있는데 이를 위해 join조건문을 작성해야 한다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select a2.emp_no, a2.dept_no, a1.dept_no, a1.dept_name</span><br><span class="line">from departments a1, dept_emp a2</span><br><span class="line">where a1.dept_no &#x3D; a2.dept_no</span><br><span class="line">order by a2.emp_no;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select a1.emp_no, a1.first_name, a2.dept_no </span><br><span class="line">from employees a1, dept_emp a2</span><br><span class="line">where a1.emp_no &#x3D; a2.emp_no;</span><br><span class="line"></span><br><span class="line">select a1.emp_no, a1.first_name, a2.salary</span><br><span class="line">from employees a1, salaries a2</span><br><span class="line">where a1.emp_no &#x3D; a2.emp_no</span><br><span class="line">and a2.to_date &#x3D; &#39;9999-01-01&#39;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">select a1.emp_no, a1.first_name, a2.dept_name</span><br><span class="line">from employees a1, departments a2, dept_emp a3</span><br><span class="line">where a3.emp_no &#x3D; a1.emp_no and a3.dept_no &#x3D; a2.dept_no;</span><br></pre></td></tr></table></figure><ul><li>서브쿼리<ul><li>쿼리문 안에 쿼리문이 있는 것을 서브쿼리라고 부른다</li><li>조건문 등을 만들 때 값을 직접 지정하지 못하고 쿼리문을 통해 구해야와 할 경우 서브쿼리를 통해 값을 구해와 조건문을 완성 할 수 있다</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 현재 받는 급여의 평균보다 많이 받는 사람들의 사원번호, 급여액을 가져온다</span><br><span class="line"></span><br><span class="line">select emp_no, salary</span><br><span class="line">from salaries</span><br><span class="line">where salary &gt; (select avg(salary) from salaries where to_date&#x3D;&quot;9999-01-01&quot;)</span><br><span class="line">and to_date&#x3D;&quot;9999-01-01&quot;;</span><br><span class="line">                </span><br><span class="line">-- d001부서에 근무하고 있는 사원들의 사원번호와 first_name을 가져온다</span><br><span class="line">select emp_no, first_name</span><br><span class="line">from employees</span><br><span class="line">where emp_no in(select emp_no from dept_emp where  dept_no&#x3D;&#39;d001&#39;);</span><br><span class="line"></span><br><span class="line">-- 1960년 이후에 태어난 사원들이 근무하고 있는 사원들의 사원번호, 근무 부서 번호를 가져온다</span><br><span class="line">select emp_no, dept_no</span><br><span class="line">from dept_emp</span><br><span class="line">where emp_no in(select emp_no from employees where birth_date &gt;&#x3D; &#39;1960-01-01&#39;);</span><br></pre></td></tr></table></figure><ul><li><p>set</p><ul><li><p>두 select 문을 통해 얻어온 결과를 집합 연산을 통해 하나의 결과로 만드는 것을 set이라고 한다.</p></li><li><p>합집합, 교집합, 차집합 등 집합 연산을 할 수 있다</p></li><li><p>집합 연산을 하기 위해서는 두 select문을 통해 가져오는 컬럼이 같아야 한다.</p></li><li><p>합집합</p><ul><li>두 select문의 결과를 모두 포함하는 최종 결과 반환</li><li>union : 중복되는 데이터는 하나만 가져옴</li><li>union all: 중복되는 데이터도 모두 가져옴</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select emp_no from titles where title&#x3D;&#39;Senior Staff&#39;</span><br><span class="line">union</span><br><span class="line">select emp_no from titles where title&#x3D;&#39;Staff&#39;;</span><br></pre></td></tr></table></figure><ul><li><p>교집합</p><ul><li>join문을 사용한다</li></ul></li><li><p>차집합</p><ul><li>차집합은 서브쿼리를 이용한다</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;join&lt;ul&gt;
&lt;li&gt;데이터의 중복을 최소화 하기 위해 테이블을 분리 시킨 후 데이터를 가져올 때 여러 테이블을 하나의 결과로 가져올 때 join문을 사용한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Database, MySQL" scheme="http://jbj828.github.io/categories/Database-MySQL/"/>
    
    
      <category term="database, MySQL" scheme="http://jbj828.github.io/tags/database-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>날짜함수, group by, having</title>
    <link href="http://jbj828.github.io/2020/01/15/mysql-select-query3/"/>
    <id>http://jbj828.github.io/2020/01/15/mysql-select-query3/</id>
    <published>2020-01-15T02:46:25.000Z</published>
    <updated>2020-01-15T03:22:05.655Z</updated>
    
    <content type="html"><![CDATA[<ul><li>날짜에 대한 작업을 하는 함수<ul><li>now(), sysdate(), current_timestamp() : 현재 날짜와 시간을 반환한다</li></ul></li></ul><a id="more"></a><ul><li>curdate(), current_date() : 현재 날짜를 반환한다</li><li>curtime(), current_time() : 현재 시간을 반환한다</li><li>date_add(날짜, interval 기준값) : 날짜에서 기준값만큼 더한다<br>(year, month, day, hour, minute, second)</li><li>date_sub(날짜, interval 기준값) : 날짜에서 기준값만큼 뺀다<br>(year, month, day, hour, minute, second)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">select hire_date, date_add(hire_date, interval 100 day)</span><br><span class="line">from employees;</span><br><span class="line"></span><br><span class="line">select count(*) from employees;</span><br><span class="line"></span><br><span class="line">select count(*)</span><br><span class="line">from employees</span><br><span class="line">where gender&#x3D;&quot;M&quot;;</span><br><span class="line"></span><br><span class="line">select count(*)</span><br><span class="line">from dept_emp</span><br><span class="line">where dept_no&#x3D;&#39;d005&#39; and to_date&#x3D;&#39;9999-01-01&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select avg(salary)</span><br><span class="line">from salaries</span><br><span class="line">where to_date&#x3D;&#39;9999-01-01&#39;;</span><br><span class="line"></span><br><span class="line">-- 사원의 수를 성별로 구분하여 가져온다</span><br><span class="line">select gender, count(*)</span><br><span class="line">from employees</span><br><span class="line">group by gender;</span><br><span class="line"></span><br><span class="line">-- 각 부서에 근무하고 있는 사원의 수</span><br><span class="line">select dept_no, count(*)</span><br><span class="line">from dept_emp</span><br><span class="line">where to_date&#x3D;&#39;9999-01-01&#39;</span><br><span class="line">group by dept_no;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 각 부서별 과거의 매니저의 수를 구한다</span><br><span class="line">select dept_no, count(*)</span><br><span class="line">from dept_manager</span><br><span class="line">where not to_date&#x3D;&#39;9999-01-01&#39;</span><br><span class="line">group by dept_no;</span><br><span class="line"></span><br><span class="line">-- 급여수령 시작일 별 급여 총합을 구한다</span><br><span class="line">select from_date, sum(salary)</span><br><span class="line">from salaries</span><br><span class="line">group by from_date;</span><br><span class="line"></span><br><span class="line">-- 10만명 이상이 사용하고 있는 직함의 이름과 직원의 수를 가져온다</span><br><span class="line">select title, count(emp_no)</span><br><span class="line">from titles</span><br><span class="line">group by title</span><br><span class="line">having count(emp_no) &gt;&#x3D; 100000;</span><br><span class="line"></span><br><span class="line">-- 5만명 이상이 근무하고 있는 부서의 부서 번호와 부서 소속 사원의 수를 가져온다</span><br><span class="line">select dept_no, count(*)</span><br><span class="line">from dept_emp</span><br><span class="line">group by dept_no</span><br><span class="line">having count(*) &gt;&#x3D; 50000;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;날짜에 대한 작업을 하는 함수&lt;ul&gt;
&lt;li&gt;now(), sysdate(), current_timestamp() : 현재 날짜와 시간을 반환한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Database, MySQL" scheme="http://jbj828.github.io/categories/Database-MySQL/"/>
    
    
      <category term="database, MySQL" scheme="http://jbj828.github.io/tags/database-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL select 쿼리문2</title>
    <link href="http://jbj828.github.io/2020/01/15/MySQL-select-query2/"/>
    <id>http://jbj828.github.io/2020/01/15/MySQL-select-query2/</id>
    <published>2020-01-15T01:46:25.000Z</published>
    <updated>2020-01-15T01:33:54.496Z</updated>
    
    <content type="html"><![CDATA[<ul><li>like<ul><li>조건식을 만들어 줄 때 문자열과 비교 시 사용한다.</li><li>문자열 값을 비교할 때 = 을 이용하면 지정된 문자열이 저장되어 있는 로우를 가져 올 수 있다.</li></ul></li></ul><a id="more"></a><ul><li>like는 이를 보다 확장해서 조건을 만들어 줄 때 사용한다.</li><li>like는 와일드 카드라는 개념을 사용하는데 와일드 카드는 모든 글자를 의미하는 특수 기호이다.</li><li>_ : 글자 하나를 의미한다</li><li>% : 글자 수와 상관없이 모든 글자를 의미한다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 이름이 A로 시작하는 사원의 사원번호, 이름을 가져온다</span><br><span class="line">select emp_no, first_name</span><br><span class="line">from employees</span><br><span class="line">where first_name like &#39;A%&#39;;</span><br><span class="line"></span><br><span class="line">-- 이름에 o가 포함되어 있는 사원의 사원번호, 이름을 가져온다</span><br><span class="line">select emp_no, first_name</span><br><span class="line">from employees</span><br><span class="line">where first_name like &#39;%o%&#39;;</span><br><span class="line"></span><br><span class="line">-- 이름에 o가 포함되어 있는 사원의 사원번호, 이름을 가져온다</span><br><span class="line">-- 단 마지막 글자가 o가 아닌 사원만 가져온다</span><br><span class="line">select emp_no, first_name</span><br><span class="line">from employees</span><br><span class="line">where first_name like &quot;%o%&quot; and not first_name like &#39;%o&#39;;</span><br></pre></td></tr></table></figure><ul><li>정렬<ul><li>데이터를 가져올 때 오름차순 혹은 내림차순으로 정렬하여 가져올 수 있다.</li><li>Order by 컬럼명 asc : 오름차순 정렬, asc는 생략 가능하다.</li><li>Order by 컬럼명 desc : 내림차순 정렬</li><li>정렬 기준은 숫자, 문자열, 날짜 등 모든 컬럼이 가능하다.</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select emp_no, salary</span><br><span class="line">from salaries</span><br><span class="line">order by salary desc;</span><br><span class="line"></span><br><span class="line">select emp_no, first_name</span><br><span class="line">from employees</span><br><span class="line">order by first_name asc;</span><br></pre></td></tr></table></figure><ul><li>숫자 함수<ul><li>숫자와 관련된 작업을 하는 함수이다.</li><li>ABS(숫자) : 절대값을 구한다.</li><li>CEIL(숫자) : 값보다 큰 정수 중 가장 작은 정수. 소수점 이하 올림</li><li>FLOOR(숫자) : 값보다 작은 정수 중 가장 큰 정수. 소수점 이하 버림</li><li>ROUND(숫자, 자릿수) : 자릿수를 기준으로 반올림</li><li>TRUNCATE(숫자, 자릿수) : 자릿수를 기준으로 버림</li><li>POW(X, Y) or POWER(X, Y) : X의 Y승</li><li>MOD(분자, 분모) : 분자를 분모로 나눈 나머지를 구한다</li><li>GREATEST(숫자1, 숫자2, 숫자3) : 주어진 숫자 중에 가장 큰 값을 반환</li><li>LEAST(숫자1, 숫자2, 숫자3) : 주어진 숫자 중 가장 작은 값 반환</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-- 절대값</span><br><span class="line">select abs(100), abs(-100);</span><br><span class="line"></span><br><span class="line">-- 소수점 이하 올림</span><br><span class="line">select ceil(10.1), ceil(10.6);</span><br><span class="line"></span><br><span class="line">-- 소수점 이하 버림</span><br><span class="line">select floor(10.1), floor(10.8);</span><br><span class="line"></span><br><span class="line">-- 반올림</span><br><span class="line">select round(10.1), round(10.7);</span><br><span class="line">select round(166.555, 0), round(166.555, 1), round(166.555, -1); </span><br><span class="line">-- 167, 166.6, 170</span><br><span class="line">    </span><br><span class="line">-- 버림</span><br><span class="line">select truncate(166.555, 0), truncate(166.555, 1), truncate(166.555, -1); </span><br><span class="line">-- 166, 166.5, 160</span><br><span class="line">    </span><br><span class="line">-- x의 y승</span><br><span class="line">select pow(10,2);</span><br><span class="line"></span><br><span class="line">-- 나머지 구하기</span><br><span class="line">select mod(10,3);</span><br><span class="line"></span><br><span class="line">-- 최대 숫자 구하기</span><br><span class="line">select greatest(10, 4, 20, 1);</span><br><span class="line"></span><br><span class="line">-- 최소 숫자 구하기</span><br><span class="line">select least(10, 4, 20, 1);</span><br><span class="line"></span><br><span class="line">select emp_no, salary * 1.1, ceil(salary * 1.1),</span><br><span class="line">floor(salary * 1.1), round(salary * 1.1, 0)</span><br><span class="line">from salaries;</span><br></pre></td></tr></table></figure><ul><li>문자열 함수<ul><li>컬럼에 저장되어 있는 문자열에 대한 작업을 할 수 있는 함수</li><li>concat(문자열1, 문자열2, 문자열3) : 문자열을 합친다</li><li>insert(문자열, 시작위치, 길이, 새로운 문자열) : 문자열의 시작 위치부터 길이만큼의 문자열을 제거하고 그 자리에 새로운 문자열을 삽입한다.</li><li>replace(문자열, 기존문자열, 새로운 문자열) : 문자열에서 기존 문자열을 찾아 제거하고 그 자리에 새로운 문자열을 삽입한다.</li><li>instr(문자열1, 문자열2) : 문자열1에서 문자열2를 찾아 위치를 반환한다. 위치는 1부터 시작하여 문자열 2를 찾지 못하면 0을 반환한다.</li><li>left(문자열, 개수) : 문자열의 좌측부터 개수만큼 가져온다</li><li>right(문자열, 개수) : 문자열의 우측부터 개수만큼 가져온다</li><li>mid(문자열, 시작위치, 개수) : 문자열에서 시작위치에서 개수만큼 가져온다.</li><li>substring(문자열, 시작위치, 개수) : 문자열에서 시작위치에서 개수만큼 가져온다</li><li>ltrim(문자열) : 문자열의 좌측 공백을 제거한다</li><li>rtrim(문자열) : 문자열의 우측 공백을 제거한다</li><li>trim(문자열) : 문자열의 좌우측 공백을 제거한다<pre><code></code></pre></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;like&lt;ul&gt;
&lt;li&gt;조건식을 만들어 줄 때 문자열과 비교 시 사용한다.&lt;/li&gt;
&lt;li&gt;문자열 값을 비교할 때 = 을 이용하면 지정된 문자열이 저장되어 있는 로우를 가져 올 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Database, MySQL" scheme="http://jbj828.github.io/categories/Database-MySQL/"/>
    
    
      <category term="database, MySQL" scheme="http://jbj828.github.io/tags/database-MySQL/"/>
    
  </entry>
  
</feed>
